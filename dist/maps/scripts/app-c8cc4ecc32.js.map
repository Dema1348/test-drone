{"version":3,"sources":["scripts/app.js"],"names":["config","$stateProvider","$translatePartialLoaderProvider","msNavigationServiceProvider","state","abstract","url","params","rule","views","content@app","templateUrl","controller","saveItem","title","icon","weight","$inject","angular","module","RulesListController","$q","$rootScope","$scope","$state","$timeout","$log","$mdDialog","Devices","managerDeviceService","init","vm","rules","query","limit","page","filter","options","debounce","rowSelection","multiSelect","autoSelect","decapitate","largeEditDialog","boundaryLinks","limitSelect","pageSelect","promise","deferred","initData","getRules","then","response","debug","resolve","goCreate","go","editRule","ev","this","defer","devices","RulesCreateController","$stateParams","condition","isEdit","copy","name","id","description","device","_","find","deviceId","changeDevice","split","property","operation","comparison","isNumber","parseInt","isNaN","propertyComparison","loader","getLastEvent","saveRule","disabled","addRule","showState","deleteRule","showStateDelete","show","alert","parent","element","document","querySelector","clickOutsideToClose","textContent","ariaLabel","ok","targetEvent","operations","comparisons","text","NodesListController","UNITS","HelperService","AlertService","MQTTUtils","forEach","loadEvent","event","checkOldAlert","error","detalle","dialogDevice","DialogController","controllerAs","body","SelectDevice","fullscreen","result","update","showUpadateDeviceState","onStartWatchDevice","refreshLastEvent","showAddDeviceState","htmlContent","authToken","typeId","unregister","confirm","cancel","unregisterState","Device","LoopBackAuth","uiGmapGoogleMapApi","hide","register","isEmpty","all","updateLocation","i","length","mapStyle","marker","draggable","newDevice","location","latitude","longitude","maps","center","searchbox","template","autocomplete","scrollwheel","componentRestrictions","country","events","places_changed","searchBox","places","getPlaces","geometry","lat","lng","map","disableDefaultUI","styles","disableDoubleClickZoom","zoom","dblclick","mapModel","eventName","originalEventArgs","e","latLng","$apply","sensors","$on","eventDevice","console","log","changeIconMarker","NodesCreateController","sendForm","registerForm","enableHighAccuracy","navigator","geolocation","getCurrentPosition","pos","coords","message","HelpUnitsController","HelpConfigController","addPart","translate","ReportsController","$filter","moment","alasql","selectDevices","isLoading","getCount","getReports","reports","count","total","getEvents","exportCvs","getReportsFull","reportArray","data","Fecha","timestamp","format","value","ProfileController","authService","getCurrentUser","profileForm","updatePassword","changePassword","passForm","oldPassword","newPassword","status","dataError","code","$setValidity","updateProfile","$broadcast","showStateProfile","bodyClass","HomeController","$interval","$mdSidenav","ChartService","ToastService","MareasService","user","carousel","images","src","currentIndex","autoSlide","time","now","second","minute","hour","day","month","year","fulltime","ticker","weekDay","nowTicker","historyChart","createHistory","lineChart","createLineChart","lineChartACC","createLineChartACC","gagueBAT","createGague","min","max","color","gagueCHR","gaguePM10","gaguePM2_5","gagueNOISE","getWeather","updateValues","NIVEL_RIO","US_DEFAULT","newValueBAT","dataOriginal","BAT","newValueCHR","CHR","newValueUS","US","newValueACCX","ACCX","newValueACCY","ACCY","newValueACCZ","ACCZ","Date","getTime","diff","values","push","fecha","US_GENERATE","weather","fit","cluster","minimumClusterSize","zoomOnClick","width","height","textColor","textSize","averageCenter","clusterClass","markersEvents","click","model","args","info","AlertsController","Alerts","alerts","main@","content@app.auth_reset","onEnter","access_token","ResetController","reset","setPassword","resetForm","password","content@app.auth_register","RegisterController","uiHelper","passwordConfirm","details","codes","key","firstName","lastName","content@app.auth_login","LoginController","localStorageService","clearAll","onStopAllWatches","login","loginForm","rememberMe","forgotPassword","forgotPasswordController","email","keypress","which","forgotForm","$invalid","resetPassword","MsWidgetController","$element","flip","isFlippable","flipped","toggleClass","isDefined","flippable","msWidgetDirective","restrict","scope","transclude","compile","tElement","addClass","iElement","iAttrs","MsWidgetCtrl","transcludeFn","clone","empty","append","msWidgetFrontDirective","require","flipWidget","msWidgetBackDirective","directive","MsTimelineController","setScrollEl","scrollEl","getScrollEl","undefined","msTimelineDirective","msTimeline","loadMore","MsTimelineCtrl","onScroll","scrollTop","threshold","loadMoreEl","position","top","unregisterOnScroll","removeClass","registerOnScroll","remove","on","off","extend","msTimelineItemDirective","cardEl","testForImage","itemLoaded","testForVisibility","imgEl","itemInViewport","itemReadyWatcher","$watch","current","old","equals","MsStepperController","setOrientation","orientation","registerMainForm","form","mainForm","registerStep","step","stepNumber","steps","stepTitle","stepTitleTranslate","sort","a","b","setupSteps","setCurrentStep","currentStepNumber","x","$setPristine","$setUntouched","gotoFirstStep","isStepNumberValid","j","gotoStep","isStepHidden","gotoPreviousStep","s","gotoNextStep","gotoLastStep","isFirstStep","isLastStep","isStepCurrent","isStepDisabled","isStepValid","isStepOptional","optionalStep","hideStep","filterHiddenStep","$valid","isUndefined","isFormValid","currentStep","msHorizontalStepperDirective","priority","bindToController","ctrls","FormCtrl","MsStepperCtrl","msHorizontalStepperStepDirective","msVerticalStepperDirective","msVerticalStepperStepDirective","stepInfo","MsStepper","msSplashScreenDirective","$animate","link","splashScreenRemoveEvent","leave","msSidenavHelperDirective","MdSidenavCtrl","isOpen","isLockedOpen","MsShortcutsController","$cookies","$document","msNavigationService","loadShortcuts","shortcuts","results","resultsLoading","populateResults","flatNavigation","getFlatNavigation","uisref","item","lowercase","search","hasShortcut","y","_id","selectedResultIndex","fromJson","get","saveShortcuts","put","toJson","success","addShortcut","removeShortcut","splice","handleResultClick","absorbEvent","preventDefault","handleKeydown","keyCode","keys","indexOf","ensureSelectedResultIsVisible","handleMouseenter","index","ignoreMouseEvents","temporarilyIgnoreMouseEvents","mouseEventIgnoreTimeout","resultsEl","selectedItemEl","bottom","outerHeight","toggleMobileBar","mobileBarActive","queryOptions","sortableOptions","ghostClass","forceFallback","fallbackClass","onSort","msShortcutsDirective","MsSearchBarController","collapsed","onSearchEvaluated","$parent","$eval","onSearch","isArray","isPromise","isNull","expand","onExpand","isFunction","collapse","onCollapse","onResultClick","msSearchBarDirective","inputEl","bodyEl","focus","msScrollConfigProvider","configuration","defaultConfiguration","wheelSpeed","wheelPropagation","swipePropagation","minScrollbarLength","maxScrollbarLength","useBothWheelAxes","useKeyboard","suppressScrollX","suppressScrollY","scrollXMarginOffset","scrollYMarginOffset","stopPropagationOnClick","$get","getConfig","service","msScrollDirective","msScrollConfig","msUtils","fuseConfig","isMobile","updateScrollbar","PerfectScrollbar","msScroll","initialize","prop","destroy","provider","msResponsiveTableDirective","wrapper","after","msRandomClassDirective","msRandomClass","randomClass","Math","floor","random","path","isString","parts","_findOrCreateParent","updateItem","_getUiSref","children","_path","deleteItem","navigation","p","sortByWeight","_byWeight","pop","createParent","join","stateParams","isObject","injector","clearNavigation","navigationScope","setActiveItem","node","activeItem","getActiveItem","getNavigation","root","_flattenNavigation","setNavigationScope","setFolded","folded","getFolded","setFoldedOpen","foldedOpen","getFoldedOpen","toggleFolded","flatNav","navToPush","concat","MsNavigationController","toggleHorizontalMobileMenu","msNavigationDirective","setFoldExpander","$emit","removeFoldCollapser","foldExpanderEl","onFoldExpanderHover","setFoldCollapser","foldCollapserEl","onFoldCollapserHover","sidenav","close","MsNavigationNodeController","hasChildren","group","collapsable","includes","$evalAsync","givenPathParts","activePathParts","toggleCollapsed","collapseEl","offsetHeight","animate","display","animateHeightClass","css","expandEl","visibility","getClass","isHidden","hidden","msNavigationNodeDirective","MsNavigationNodeCtrl","msNavigationItemDirective","msNavigationHorizontalDirective","MsNavigationHorizontalNodeController","isActive","msNavigationHorizontalNodeDirective","MsNavigationHorizontalNodeCtrl","msNavigationHorizontalItemDirective","$mdMedia","onClick","msNavFoldService","setFoldable","foldable","isNavFoldedOpen","toggleFold","openFolded","closeFolded","msNavIsFoldedDirective","isFoldedOpen","isFolded","fold","unfold","sidenavEl","openOverlay","closeOverlay","msNavIsFolded","MsNavController","isDisabled","disable","enable","setToggleItem","toggleItems","getLockedItems","lockedItems","setLockedItem","clearLockedItems","msNavDirective","$mdComponentRegistry","stateChangeSuccessEvent","when","msNavTitleDirective","msNavButtonDirective","msNavToggleDirective","tAttrs","attr","MsNavCtrl","toggle","isCollapsed","isExpanded","reject","elementToExpand","classes","expandAnimation","expanded","elementToCollapse","collapseAnimation","links","states","regExp","replace","locked","lockedItem","currentState","shouldExpand","factory","msMaterialColorPickerController","$mdColorPalette","$mdMenu","fuseGenerator","activateHueSelection","palette","hues","selectedPalette","selectedHues","selectColor","hue","updateSelectedColor","updateModel","removeColor","selectedColor","class","setSelectedColor","modelCtrl","$viewValue","msModelType","bgColorValue","rgba","palettes","fgColorValue","contrast","$selectedColor","$setViewValue","msMaterialColorPicker","ngModel","attrs","controllers","ctrl","el","nodeType","replaceWith","msMasonryController","$window","defaultOpts","watchContainerResize","waitImagesLoaded","callback","imagesLoaded","imgLoad","container","newValue","oldValue","reLayout","start","containerPos","getBoundingClientRect","updateColumnOptions","items","referenceArr","Array","apply","columnCount","xPos","yPos","column","refTop","columnWidth","respectItemOrder","round","transform","reLayoutTimeout","reLayoutDebounce","responsive","md","sm","xs","msMasonry","attributes","pre","post","msMasonryItem","newVal","oldVal","msInfoBarDirective","removeInfoBar","$destroy","MsFormWizardController","forms","previousStep","selectedIndex","nextStep","firstStep","lastStep","totalSteps","currentStepInvalid","previousStepInvalid","formsIncomplete","msFormWizardDirective","msFormWizardFormDirective","formCtrl","MsFormWizardCtrl","msDatepickerFixConfigProvider","defaultConfig","formatter","val","parser","add","utcOffset","toDate","msDatepickerFix","msDatepickerFixConfig","elem","$formatters","$parsers","msCardDirective","templatePath","card","cardTemplateLoaded","fuseThemingService","$mdTheming","getRegisteredPalettes","PALETTES","getRegisteredThemes","THEMES","setActiveTheme","themeName","themes","list","warn","active","theme","setThemesList","themeList","$mdThemingProvider","fusePalettes","fuseThemes","invoke","_$cookies","customTheme","getObject","alwaysWatchTheme","definePalette","primaryPalette","primary","accentPalette","accent","warnPalette","backgroundPalette","background","default","hue-1","hue-2","hue-3","pinkTheme","tealTheme","constant","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","contrastDefaultColor","contrastDarkColors","contrastStrongLightColors","fuseGeneratorService","fuseTheming","generate","registeredThemes","registeredPalettes","registeredTheme","colors","colorType","colorTypeName","levels","contrast1","contrast2","contrast3","contrast4","hue1","hue2","hue3","processAndStoreThemes","styleVars","colorTypes","colorLevelName","colorName","ucfirst","render","_themes","selectedTheme","cssTemplate","regex","RegExp","Object","matched","headEl","styleEl","html","_contrastLevel","contrastLevel","applyContrast","contrastLevels","white","1","2","3","4","black","string","charAt","toUpperCase","slice","MsThemeOptionsController","getActiveTheme","updateLayoutMode","layoutMode","updateLayoutStyle","layoutStyle","reload","layoutModes","label","layoutStyles","figure","msThemeOptions","toggleOptionsSidenav","exists","detectBrowser","searchString","dataString","dataProp","versionSearchString","versionSearch","identity","subString","searchVersion","substring","browserInfo","browserData","userAgent","vendor","opera","osData","platform","browser","version","appVersion","os","toLowerCase","guidGenerator","S4","toString","mobileDetect","mobile","toggleInArray","array","MobileDetect","msApiProvider","setBaseUrl","baseUrl","getBaseUrl","getApiObject","api","resource","paramDefaults","actions","$resource","action","parameters","actionParts","method","apiObject","resourceObject","request","apiResolverService","resourceParts","l","filterByTags","tags","filtered","match","every","tag","tagExists","itemTag","filterSingleByTags","itemTags","filterByPropIds","parameter","ids","filterByIds","toTrustedFilter","$sce","trustAsHtml","htmlToPlainTextFilter","String","nospaceFilter","humanizeDocFilter","doc","type","$1","altDate","fromNow","calendar","hljsDirective","$interpolate","contents","codeElement","lines","line","trim","firstLineWhitespace","startingWhitespaceRegex","highlightedCode","hljs","highlight","language","lang","shouldInterpolate","contentParent","fuseConfigProvider","fuseConfiguration","disableCustomScrollbars","disableMdInkRippleOnMobile","disableCustomScrollbarsOnMobile","configName","setConfig","configValue","$mdToast","showToast","simple","hideDelay","ToolbarController","$translate","customer","selectedLanguage","languages","preferredLanguage","toggleSidenav","sidenavId","addNode","addNodeController","gagueDO","gagueWT","deviceForm","userId","currentUserId","create","$promise","newDeviceCache","statusCode","logout","changeLanguage","use","toggleMsNavigationFolded","searchResultClick","global","en","translation","flag","es","newProfile","haibuSmartPalettes","haibuSmartThemes","haibuSmart","toastr","toastrError","toastClass","timeOut","MQTT","ORG","USERNAME","PASSWORD","WSBROKER","WSPORT","connectClient","mqttServer","mqttPort","mqttCliente","UUID","onSuccess","onConnect","cleanSession","useSSL","userName","onFailure","State","DISCONNECTED","reconnectTimeout","cliente","Client","onConnectionLost","onMessageArrived","connect","send","msg","qos","mqttMsg","Message","JSON","stringify","destinationName","responseObject","errorCode","errorMessage","CONNECTED","handlePendingSubscribes","onStartWatchDevices","topic","watches","addWatch","subscribe","topics","unsubscribe","createUuid","substr","payloadString","evtType","payload","parse","d","addWeight","deviceEvent","deviceType","eventType","checkAlert","utils","$http","getMarea","mareas","marea","Campo1","LIMIT_DAY","date","Campo2","parseTime","fullDate","Campo3","symbol","Campo4","Campo5","Campo6","Campo7","Campo8","Campo9","timeSplit","getPuertos","puertosJson","ApiUser","Event","Weather","Ruler","devicesCache","deleteDeviceCache","findIndex","deleteRuleCache","deviceInfo","getLocacion","updatelocation","getDevices","mapDevice","apiUserId","replaceOrCreate","getAlerts","alertsCache","addAlert","unshift","deleteById","cache","getHistory","skip","history","order","where","fields","today","devicesTypeCache","$provide","PLURAL_CATEGORY","ZERO","ONE","TWO","FEW","MANY","OTHER","DATETIME_FORMATS","AMPMS","DAY","ERANAMES","ERAS","FIRSTDAYOFWEEK","MONTH","SHORTDAY","SHORTMONTH","STANDALONEMONTH","WEEKENDRANGE","longDate","medium","mediumDate","mediumTime","short","shortDate","shortTime","NUMBER_FORMATS","CURRENCY_SYM","DECIMAL_SEP","GROUP_SEP","PATTERNS","gSize","lgSize","maxFrac","minFrac","minInt","negPre","negSuf","posPre","posSuf","localeID","pluralCat","n","opt_precision","exports","window","getHost","m","urlBase","authHeader","urlBaseHost","host","LoopBackResource","$injector","R","::findById::Device::events","fk","::destroyById::Device::events","::updateById::Device::events","::get::Device::events","::create::Device::events","::createMany::Device::events","::delete::Device::events","::count::Device::events","modelName","prototype$__findById__roles","prototype$__destroyById__roles","prototype$__updateById__roles","prototype$__link__roles","prototype$__unlink__roles","prototype$__exists__roles","prototype$__findById__accessTokens","prototype$__destroyById__accessTokens","prototype$__updateById__accessTokens","prototype$__findById__devices","prototype$__destroyById__devices","prototype$__findById__rules","prototype$__destroyById__rules","prototype$__updateById__rules","prototype$__findById__alerts","prototype$__destroyById__alerts","prototype$__updateById__alerts","prototype$__get__roles","prototype$__create__roles","prototype$__delete__roles","prototype$__count__roles","prototype$__get__accessTokens","prototype$__create__accessTokens","prototype$__delete__accessTokens","prototype$__count__accessTokens","prototype$__get__devices","prototype$__create__devices","prototype$__delete__devices","prototype$__count__devices","prototype$__get__rules","prototype$__create__rules","prototype$__delete__rules","prototype$__count__rules","prototype$__get__alerts","prototype$__create__alerts","prototype$__delete__alerts","prototype$__count__alerts","createMany","patchOrCreate","findById","replaceById","prototype$patchAttributes","include","interceptor","accessToken","setUser","save","clearUser","clearStorage","responseError","prototype$verify","prototype$addRole","prototype$removeRole","prototype$banUser","prototype$unlockUser","::get::Device::users","getCurrent","currentUserData","__isGetCurrentUser__","getCachedCurrent","isAuthenticated","getCurrentId","TargetResource","arguments","destroyAll","destroyById","updateById","::findById::Device::thresholds","::destroyById::Device::thresholds","::updateById::Device::thresholds","::get::Device::thresholds","::create::Device::thresholds","::createMany::Device::thresholds","::delete::Device::thresholds","::count::Device::thresholds","prototype$__get__users","prototype$__findById__thresholds","prototype$__destroyById__thresholds","prototype$__updateById__thresholds","prototype$__findById__events","prototype$__destroyById__events","prototype$__updateById__events","prototype$__findById__rulers","prototype$__destroyById__rulers","prototype$__updateById__rulers","prototype$__get__cage","prototype$__get__thresholds","prototype$__create__thresholds","prototype$__delete__thresholds","prototype$__count__thresholds","prototype$__get__events","prototype$__create__events","prototype$__delete__events","prototype$__count__events","prototype$__get__rulers","prototype$__create__rulers","prototype$__delete__rulers","prototype$__count__rulers","::findById::ApiUser::devices","::destroyById::ApiUser::devices","::get::ApiUser::devices","::create::ApiUser::devices","::createMany::ApiUser::devices","::delete::ApiUser::devices","::count::ApiUser::devices","::get::Ruler::device","::get::Alert::device","::findById::Cage::devices","::destroyById::Cage::devices","::updateById::Cage::devices","::get::Cage::devices","::create::Cage::devices","::createMany::Cage::devices","::delete::Cage::devices","::count::Cage::devices","users","thresholds","rulers","cage","daily","prototype$__get__device","::findById::ApiUser::rules","::destroyById::ApiUser::rules","::updateById::ApiUser::rules","::get::ApiUser::rules","::create::ApiUser::rules","::createMany::ApiUser::rules","::delete::ApiUser::rules","::count::ApiUser::rules","::findById::Device::rulers","::destroyById::Device::rulers","::updateById::Device::rulers","::get::Device::rulers","::create::Device::rulers","::createMany::Device::rulers","::delete::Device::rulers","::count::Device::rulers","upsertWithWhere","findOne","updateAll","createChangeStream","::findById::ApiUser::alerts","::destroyById::ApiUser::alerts","::updateById::ApiUser::alerts","::get::ApiUser::alerts","::create::ApiUser::alerts","::createMany::ApiUser::alerts","::delete::ApiUser::alerts","::count::ApiUser::alerts","::findById::Device::alerts","::destroyById::Device::alerts","::updateById::Device::alerts","::get::Device::alerts","::create::Device::alerts","::createMany::Device::alerts","::delete::Device::alerts","::count::Device::alerts","prototype$__findById__cages","prototype$__destroyById__cages","prototype$__updateById__cages","prototype$__get__cages","prototype$__create__cages","prototype$__delete__cages","prototype$__count__cages","::get::Cage::center","cages","prototype$__updateById__devices","prototype$__get__center","::get::Device::cage","::findById::Center::cages","::destroyById::Center::cages","::updateById::Center::cages","::get::Center::cages","::create::Center::cages","::createMany::Center::cages","::delete::Center::cages","::count::Center::cages","self","props","load","storage","propsPrefix","err","localStorage","sessionStorage","prototype","accessTokenId","userData","$httpProvider","interceptors","headers","res","setAuthHeader","header","getAuthHeader","setUrlBase","getUrlBase","$save","upsert","call","labelClass","labelAnchor","labelContent","DOFormula","tc","WT","muestra","DO","sal","tk","A","exp","featureType","elementType","stylers","prioritys","sortBy","findWhere","reverse","generateFakeData","generateFakeData2","lowerLimit","upperLimit","unit","ranges","gague","gagueTemplate","historyTemplate","lineChartTemplate","precision","chart","noData","margin","right","left","showValues","useInteractiveGuideline","duration","clipEdge","clipVoronoi","interpolate","showLegend","xAxis","ticks","showMaxMin","staggerLabels","tickFormat","d3","yAxis","interactiveLayer","tooltip","gravity","twoHoursBefore","setHours","getHours","isArea","yDomain","credentials","currentUser","newUser","eval","z","Paho","decodeMessage","input","startingPos","first","messageInfo","digit","remLength","multiplier","endPos","wireMessage","WireMessage","MESSAGE_TYPE","CONNACK","connectAcknowledgeFlags","sessionPresent","returnCode","PUBLISH","len","readUint16","topicName","parseUTF8","messageIdentifier","subarray","retained","duplicate","payloadMessage","PUBACK","PUBREC","PUBREL","PUBCOMP","UNSUBACK","SUBACK","writeUint16","buffer","offset","writeString","utf8Length","stringToUTF8","encodeMBI","number","output","numBytes","UTF8Length","charCode","charCodeAt","lowCharCode","Error","ERROR","MALFORMED_UNICODE","utf16","byte1","byte2","MALFORMED_UTF","byte3","byte4","fromCharCode","CONNECT","SUBSCRIBE","UNSUBSCRIBE","PINGREQ","PINGRESP","DISCONNECT","validate","obj","hasOwnProperty","errorStr","INVALID_TYPE","f","OK","CONNECT_TIMEOUT","SUBSCRIBE_TIMEOUT","UNSUBSCRIBE_TIMEOUT","PING_TIMEOUT","INTERNAL_ERROR","CONNACK_RETURNCODE","SOCKET_ERROR","SOCKET_CLOSE","UNSUPPORTED","INVALID_STATE","INVALID_ARGUMENT","UNSUPPORTED_OPERATION","INVALID_STORED_DATA","INVALID_MQTT_MESSAGE_TYPE","CONNACK_RC","0","5","substitutions","field","part1","part2","MqttProtoIdentifierv3","MqttProtoIdentifierv4","encode","topicStrLength","destinationNameLength","mqttVersion","clientId","willMessage","willMessagePayloadBytes","payloadBytes","Uint8Array","byteLength","requestedQos","ArrayBuffer","mbi","byteStream","set","connectFlags","keepAliveInterval","Pinger","client","_client","_window","_keepAliveInterval","isReset","pingReq","doTimeout","pinger","doPing","_trace","socket","timeout","setTimeout","_disconnected","clearTimeout","Timeout","timeoutSeconds","ClientImpl","uri","port","_localKey","_msg_queue","_sentMessages","_receivedMessages","_notify_msg_sent","_message_identifier","_sequence","restore","connected","maxMessageIdentifier","connectOptions","hostIndex","onMessageDelivered","traceFunction","_connectTimeout","sendPinger","receivePinger","receiveBuffer","_traceBuffer","_MAX_TRACE_ENTRIES","connectOptionsMasked","_traceMask","uris","_doConnect","subscribeOptions","grantedQos","invocationContext","_requires_ack","_schedule_message","unsubscribeOptions","disconnect","getTraceLog","startTrace","stopTrace","wsurl","uriParts","WebSocket","binaryType","onopen","_on_socket_open","onmessage","_on_socket_message","onerror","_on_socket_error","onclose","_on_socket_close","_process_queue","store","prefix","storedMessage","pubRecReceived","hex","messageBytes","payloadHex","sequence","setItem","getItem","fifo","_socket_send","messageCount","messages","_deframeMessages","_handleMessage","byteArray","newData","stack","sentMessage","removeItem","receivedMessage","sequencedMessages","msgId","pubRelMessage","_receivePublish","_receiveMessage","pubCompMessage","wireMessageMasked","pubAckMessage","pubRecMessage","wireMmessage","errorText","readyState","mqttVersionExplicit","record","severity","shift","traceObject","masked","traceObjectMasked","ipv6AddSBracket","clientIdLength","_getHost","_setHost","_getPort","_setPort","_getPath","_setPath","_getURI","_setURI","_getClientId","_setClientId","_getOnConnectionLost","_setOnConnectionLost","newOnConnectionLost","_getOnMessageDelivered","_setOnMessageDelivered","newOnMessageDelivered","_getOnMessageArrived","_setOnMessageArrived","newOnMessageArrived","_getTrace","_setTrace","trace","hosts","ports","stringPayload","usingURIs","test","ipv6","isConnected","[object Object]","newHost","newPort","newPath","newClientId","newTraceFunction","newPayload","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","_getPayloadString","_getPayloadBytes","_getDestinationName","_setDestinationName","newDestinationName","_getQos","_setQos","newQos","_getRetained","_setRetained","newRetained","_getDuplicate","_setDuplicate","newDuplicate","NavigationController","dispatchEvent","msScrollOptions","MainController","targetScope","$id","parseUnits","units","onlySymbol","limitObjectTo","ret","arrayIndex","colorState","hasAlert","RESET_TIME","eventTime","capitalize","serverValidation","ngModelCtrl","setValidity","errorName","arrServerValidation","firstError","$error","runBlock","htmlClass","run","$ariaProvider","$logProvider","debugEnabled","tabindex","$location","amMoment","changeLocale","stateChangeStartEvent","loadingProgress","restrictedPage","$","inArray","next","routeConfig","$urlRouterProvider","$locationProvider","html5Mode","otherwise","toolbar@app","navigation@app","IndexController","uiGmapGoogleMapApiProvider","$translateProvider","LoopBackResourceProvider","BASEURL","API_KEY","toastrConfig","rejection","nextAfterLogin","configure","v","libraries","useLoader","urlTemplate","useSanitizeValueStrategy","autoDismiss","containerId","maxOpened","extendedTimeOut","closeButton","tapToDismiss","newestOnTop","positionClass","preventDuplicates","preventOpenDuplicates","target","Rules","$templateCache"],"mappings":"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AAI,0CAA0C,qDAC7D02C,EAAe12C,IAAI,sCAAsC,45IACzD02C,EAAe12C,IAAI,sCAAsC,+7EACzD02C,EAAe12C,IAAI,6DAA6D,qpBAChF02C,EAAe12C,IAAI,uDAAuD,02EAC1E02C,EAAe12C,IAAI,8DAA8D,ohEACjF02C,EAAe12C,IAAI,4DAA4D,gqDAC/E02C,EAAe12C,IAAI,mDAAmD,mqQACtE02C,EAAe12C,IAAI,iDAAiD,6/CACpE02C,EAAe12C,IAAI,sDAAsD;AACzE02C,EAAe12C,IAAI,oDAAoD,00TACvE02C,EAAe12C,IAAI,kDAAkD,wkGACrE02C,EAAe12C,IAAI,sDAAsD,0sHACzE02C,EAAe12C,IAAI,kDAAkD,umDACrE02C,EAAe12C,IAAI,mEAAmE,maACtF02C,EAAe12C,IAAI,qEAAqE,odACxF02C,EAAe12C,IAAI,mEAAmE,4kBACtF02C,EAAe12C,IAAI,mEAAmE,giBACtF02C,EAAe12C,IAAI,mEAAmE,+UACtF02C,EAAe12C,IAAI,mEAAmE,yYACtF02C,EAAe12C,IAAI,mEAAmE,wRACtF02C,EAAe12C,IAAI,mEAAmE,g7BACtF02C,EAAe12C,IAAI,mEAAmE,sjBACtF02C,EAAe12C,IAAI,mEAAmE,63BACtF02C,EAAe12C,IAAI,sEAAsE,glEACzF02C,EAAe12C,IAAI,kEAAkE,2IACrF02C,EAAe12C,IAAI,+DAA+D,gwFAClF02C,EAAe12C,IAAI,4EAA4E","file":"scripts/app-c8cc4ecc32.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.rules', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider) {\n\n        // State\n        $stateProvider\n            .state('app.pages.rules', {\n                abstract: true,\n                url: '/rules'\n            })\n            .state('app.pages.rules.create', {\n                url: '/create',\n                params: {\n                    rule: null\n                },\n                views: {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/rules/rules-create/rules-create.html',\n                        controller: 'RulesCreateController as vm'\n                    }\n                }\n            }).state('app.pages.rules.list', {\n                url: '/list',              \n                views: {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/rules/rules-list/rules-list.html',\n                        controller: 'RulesListController as vm'\n                    }\n                }\n            });\n\n\n\n        msNavigationServiceProvider.saveItem('rules', {\n            title: 'Reglas',\n            icon: 'icono-medir2-HaibuSmart',\n            weight: 5\n        });\n\n        msNavigationServiceProvider.saveItem('rules.list', {\n            title: 'Ver Reglas',\n            state: 'app.pages.rules.list'\n        });\n\n        msNavigationServiceProvider.saveItem('rules.create', {\n            title: 'Crear Regla',\n            state: 'app.pages.rules.create'\n        });\n\n\n\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.rules')\n        .controller('RulesListController', RulesListController);\n\n    /** @ngInject */\n    function RulesListController($q,$rootScope, $scope, $state, $timeout, $log, $mdDialog, Devices, managerDeviceService) {\n        var vm = this;\n        var deferred = $q.defer();\n        vm.devices = Devices;\n       \n       \n        //Metod\n        vm.goCreate= goCreate;\n        vm.editRule=editRule;\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init() {\n            vm.rules = [];\n            vm.query = {\n                limit: 5,\n                page: 1,\n                filter: \"\"\n            };\n\n            vm.filter = {\n                options: {\n                    debounce: 500\n                }\n            }\n\n            vm.options = {\n                rowSelection: false,\n                multiSelect: false,\n                autoSelect: false,\n                decapitate: false,\n                largeEditDialog: false,\n                boundaryLinks: false,\n                limitSelect: true,\n                pageSelect: true\n            };\n\n\n            vm.promise = deferred.promise;\n            initData();\n        }\n\n        function initData() {\n            managerDeviceService.getRules().then(function(response) {\n                $log.debug(response);\n                vm.rules=response;\n            }).finally(function() {\n                 deferred.resolve();\n            })\n        }\n\n\n        function goCreate() {\n            $state.go('app.pages.rules.create');\n        }\n\n        function editRule(ev, rule) {\n            $state.go('app.pages.rules.create',{rule:rule});\n\n        }\n        \n\n\n      \n\n\n\n\n\n\n    }\n\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.rules')\n        .controller('RulesCreateController', RulesCreateController);\n\n    /** @ngInject */\n    function RulesCreateController($q,$rootScope, $scope, $state, $stateParams, $timeout, $log, $mdDialog, Devices,managerDeviceService) {\n        var vm = this;\n        vm.devices = Devices;\n        vm.operations=['>','>=','<','<=','==','!='];\n        vm.comparisons=[{id:\"static\",text:'Valor estatico'},{id:\"property\",text:'Propiedad'}];\n              \n        //Metod\n        vm.deleteRule=deleteRule;\n        vm.changeDevice=changeDevice;\n        vm.saveRule=saveRule;\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init() {\n            vm.rule={};\n            vm.condition={};\n            if($stateParams.rule){\n                vm.isEdit=true;\n                var rule= angular.copy($stateParams.rule);\n                vm.rule.name=rule.name;\n                vm.rule.id=rule.id;\n                vm.rule.description=rule.description;\n                vm.rule.device = _.find(vm.devices, function(device) {\n                    return device.deviceId === rule.deviceId\n                });\n                if(vm.rule.device)\n                    changeDevice();\n                var condition= rule.condition.split(\" \");\n                vm.condition.property=condition[0];\n                vm.condition.operation=condition[1];\n                var comparison=angular.copy(condition[2]);\n                if(_.isNumber(parseInt(condition[2])) && !_.isNaN(parseInt(condition[2])) ){\n                   vm.condition.comparison=\"static\";\n                    vm.condition.propertyComparison=parseInt(comparison);\n                    $log.debug(\"is Number\");\n                }else{\n                    vm.condition.comparison=\"property\";\n                    vm.condition.propertyComparison=comparison;\n\n                }\n                $log.debug(vm.condition);\n            }\n            \n        }\n\n\n\n\n        function changeDevice() {\n            vm.condition={};\n            $rootScope.loader = true;\n            managerDeviceService.getLastEvent(vm.rule.device).finally(function() {\n                $rootScope.loader = false;\n\n            });\n            \n        }\n\n        function saveRule(ev) {\n            var rule = angular.copy(vm.rule);\n            rule.condition=vm.condition.property+\" \"+vm.condition.operation+\" \"+vm.condition.propertyComparison;\n            rule.deviceId=rule.device.deviceId;\n            delete rule.device;\n            rule.disabled=false;\n            $rootScope.loader = true;\n            $log.debug(rule);\n            managerDeviceService.addRule(rule).then(function(response){\n                showState(ev,response);\n            }).finally(function() {\n                $rootScope.loader = false;\n            })\n\n        }\n\n        function deleteRule(ev) {\n            $rootScope.loader = true;\n            managerDeviceService.deleteRule(vm.rule).then(function(response){\n                showStateDelete(ev,response);\n            }).finally(function() {\n                $rootScope.loader = false;\n            })\n\n        }\n\n        function showState(ev,response) {\n             $mdDialog.show(\n              $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Agregar Regla')\n                .textContent(!vm.isEdit?'Se ha creado la regla '+ response.condition+' con éxito.':'Se ha actualizado la regla '+ response.condition+' con éxito.')\n                .ariaLabel('Agregar de Nodo')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n                $state.go(\"app.pages.rules.list\");\n            });\n        }\n\n\n        function showStateDelete(ev,response) {\n             $mdDialog.show(\n              $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Eliminar Regla')\n                .textContent('Se ha eliminado con éxito la regla.')\n                .ariaLabel('Agregar de Nodo')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n                $state.go(\"app.pages.rules.list\");\n            });\n        }\n      \n\n\n    }\n\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.pages.nodes', [\n             ])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider)\n    {\n        // State\n        $stateProvider\n            // .state('app.pages.nodes', {\n            //     abstract: true,\n            //     url     : '/nodes'\n            // })\n            .state('app.pages.nodes', {\n                url    : '/list',\n                views  : {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/nodes/nodes-list/nodes-list.html',\n                        controller : 'NodesListController as vm'\n                    }\n                }\n            });\n            // .state('app.nodes.create', {\n            //     url    : '/create',\n            //     views  : {\n            //         'content@app': {\n            //             templateUrl: 'app/main/nodes/nodes-create/nodes-create.html',\n            //             controller : 'NodesCreateController as vm'\n            //         }\n            //     },\n            //     resolve: {\n            //         Devices: function(managerDeviceService) {\n            //             return managerDeviceService.getDevices();\n            //         },\n            //         DevicesTypes: function(managerDeviceService) {\n            //             return managerDeviceService.getDevicesTypes();\n            //         }\n            //     }\n            // });\n\n      \n\n\n        msNavigationServiceProvider.saveItem('nodes', {\n            title : 'Ver Nodos',\n            icon  : 'icono-senal2-HaibuSmart',\n            state: 'app.pages.nodes'\n\n        });\n\n        // msNavigationServiceProvider.saveItem('nodes.list', {\n        //     title: 'Ver Nodos',\n        //     state: 'app.pages.nodes.list'\n        // });\n\n        // msNavigationServiceProvider.saveItem('nodes.create', {\n        //     title: 'Registrar Nodo',\n        //     state: 'app.nodes.create'\n        // });\n\n\n\n\n\n\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.nodes')\n        .controller('NodesListController', NodesListController);\n\n    /** @ngInject */\n    function NodesListController($q, $rootScope, $scope, $state, $timeout, $log, $mdDialog, Devices, UNITS, managerDeviceService, _, HelperService, AlertService, MQTTUtils) {\n        var vm = this;\n        vm.devices = Devices;\n        vm.sensors = UNITS;\n\n        //Metod\n        vm.dialogDevice = dialogDevice;\n        vm.refreshLastEvent = refreshLastEvent;\n        vm.config = config;\n        vm.unregister = unregister;\n        vm.detalle=detalle;\n\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init() {\n            angular.forEach(vm.devices,function(device) {\n                device.loadEvent=true;\n                managerDeviceService.getLastEvent(device).then(function(response) {\n                    device.event=response;\n                    AlertService.checkOldAlert(device);\n                }).catch(function(error) {\n                    $log.debug(\"sin cache\"+error);\n                }).finally(function() {\n                     device.loadEvent=false;\n                });\n            })\n                  \n        }\n\n        $scope.$on('update', function(event, eventDevice) {\n            var device = _.find(vm.devices, function(device) {\n                return device.deviceId === eventDevice.deviceId\n            })\n\n            $timeout(function() {\n                if (device) {\n                    device.event = eventDevice;\n                    console.log(device.event);\n                    HelperService.changeIconMarker(device, vm.sensors);\n\n                }\n                $log.debug(device);\n            });\n\n\n        });\n\n\n        $scope.$on('$destroy', function() {\n\n        });\n\n\n      \n\n        function detalle(ev,device) {\n            $state.go('app.pages.home',{device:device});\n        }\n\n\n        function dialogDevice(ev, device) {\n            $mdDialog.show({\n                controller: DialogController,\n                controllerAs: 'vm',\n                templateUrl: 'app/main/pages/nodes/nodes-list/nodes-create.html',\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                SelectDevice: device,\n                Devices: vm.devices,\n                clickOutsideToClose: true,\n                fullscreen: true\n            }).then(function(result) {\n                if(result.update){\n                    showUpadateDeviceState(ev, result.response);\n                }else{\n                    var device= result.device;\n                    MQTTUtils.onStartWatchDevice(device);\n                    refreshLastEvent(ev, device);\n                    showAddDeviceState(ev, device);\n                }\n             \n            });\n        }\n\n\n\n        function showAddDeviceState(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Registrar Nodo')\n                .htmlContent('Tu nodo ha sido registrado con éxito, tu cable de autentificación es <span class=\"text-bold\">' + response.authToken + '</span>.<br>Para configurar tu nodo correctamente, debes ocupar la id  <span class=\"text-bold\">' + response.deviceId + '</span> y el tipo de nodo es <span class=\"text-bold\">' + response.typeId + '</span>.')\n                .ariaLabel('Registrar Nodo')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n\n            });\n        }\n\n          function showUpadateDeviceState(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Editar Nodo')\n                .htmlContent('Tu nodo ha sido actualizado con éxito.')\n                .ariaLabel('Editar Nodo')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n\n            });\n        }\n\n        function refreshLastEvent(ev, device) {\n            device.loadEvent = true;\n            managerDeviceService.refreshLastEvent(device).then(function(response) {\n                device.event=response;\n                AlertService.checkOldAlert(device);\n            }).catch(function(error) {\n                $log.debug(\"Sin cache\",error);\n            }).finally(function() {\n                device.loadEvent = false;\n            });\n        }\n\n      \n        function unregister(ev, device) {\n            var confirm = $mdDialog.confirm()\n                    .title('¿Está seguro de eliminar el nodo?')\n                    .htmlContent('El nodo <b>' +device.name +' </b>' + ' sera eliminado.')\n                    .ariaLabel('borrar nodo')\n                    .targetEvent(ev)\n                    .ok('ACEPTAR')\n                    .cancel('CANCELAR');\n\n                $mdDialog.show(confirm).then(function ()\n                {\n                    $rootScope.loader = true;\n                    managerDeviceService.unregister(device).then(function(response) {\n                        unregisterState(ev, response);\n                    }).finally(function() {\n                        $rootScope.loader = false;\n                    });\n\n                });\n            \n\n           \n        }\n\n\n        function config(ev, device) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Configurar el nodo')\n                .htmlContent('El nodo se debe configurar con los siguientes parametros, id del nodo <span class=\"text-bold\">' + device.deviceId + '</span> y con el tipo <span class=\"text-bold\">' + device.typeId + '</span>.')\n                .ariaLabel('Compartir nodo')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            )\n        }\n\n\n        function showState(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Dejar de seguir')\n                .textContent('Se ha dejado de seguir el nodo con éxito.')\n                .ariaLabel('Dejar de seguir')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            )\n        }\n\n        function unregisterState(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Eliminar nodo')\n                .textContent('Se ha eliminado el nodo con éxito.')\n                .ariaLabel('Dejar de seguir')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            )\n        }\n\n\n        function DialogController($mdDialog, SelectDevice, Devices, $log, Device, LoopBackAuth, uiGmapGoogleMapApi, HelperService, managerDeviceService, _) {\n            var vm = this;\n            vm.device = angular.copy(SelectDevice);\n            vm.devices = Devices;\n            vm.hide = hide;\n            vm.cancel = cancel;\n            vm.register = register;\n            vm.update = update;\n\n            vm.mapStyle = HelperService.mapStyle();\n\n            vm.marker = {\n                options: {\n                    draggable: true,\n                    icon: '/assets/images/icons/salmon.png'\n                }\n            }\n\n\n            if (!vm.device) {\n                vm.title = 'Registrar Nodo';\n                vm.newDevice = true;\n                vm.device={\n                    location:''\n                }\n                vm.device.location = {\n                    latitude: -33.422431,\n                    longitude: -70.614143\n                }\n\n\n            } else {\n                vm.title = \"Editar Nodo\";\n\n            }\n\n            function hide() {\n                $mdDialog.hide();\n            }\n\n\n            function cancel() {\n                $mdDialog.cancel();\n            }\n\n\n\n            uiGmapGoogleMapApi.then(function(maps) {\n                var center={};\n                center=vm.device.location;\n\n                vm.searchbox = {\n                    template: 'searchbox.tpl.html',\n\n                    options: {\n                        autocomplete: true,\n                        scrollwheel: true,\n                        componentRestrictions: {\n                            country: 'cl'\n                        }\n                    },\n                    events: {\n                        places_changed: function(searchBox) {\n                            var places = searchBox.getPlaces();\n                            if (places.length == 0) {\n                                return;\n                            } else {\n                                vm.device.location = {\n                                    latitude: places[0].geometry.location.lat(),\n                                    longitude: places[0].geometry.location.lng()\n                                }\n                                vm.map.center = {\n                                    latitude: places[0].geometry.location.lat(),\n                                    longitude: places[0].geometry.location.lng()\n                                }\n                            }\n\n                        }\n                    }\n\n                }\n\n                vm.map = {\n                    options: {\n                        disableDefaultUI: false,\n                        styles: vm.mapStyle,\n                        disableDoubleClickZoom: true\n                    },\n                     center: {\n                        latitude: center.latitude || -41.486373,\n                        longitude: center.longitude || -72.937377\n                    },\n                    zoom: 10,\n                    events: {\n                        dblclick: function(mapModel, eventName, originalEventArgs) {\n                            var e = originalEventArgs[0];\n                            var latitude = e.latLng.lat();\n                            var longitude = e.latLng.lng();\n                            vm.device.location = {\n                                latitude: latitude,\n                                longitude: longitude\n                            };\n                            $scope.$apply();\n\n                        }\n                    }\n\n                };\n\n            });\n\n\n\n            function register(ev) {\n                $rootScope.loader = true;\n                var device = angular.copy(vm.device);\n                if (_.isEmpty(device.authToken))\n                    delete device.authToken;\n                $log.debug(\"New node register\", device);\n                $log.debug(\"-------------------------\");\n                managerDeviceService.register(device).then(function(response) {\n                    $mdDialog.hide({device:response,update:false});\n                }).catch(function(error) {\n                    $log.debug(error);\n                    //Todo cach error\n                }).finally(function() {\n                    $rootScope.loader = false;\n                })\n            }\n\n            function update(ev) {\n                $rootScope.loader = true;\n                var device = angular.copy(vm.device);\n                $log.debug(\"Update node\",device);\n                $log.debug(\"-------------------------\");\n                $q.all([managerDeviceService.updateLocation(device),managerDeviceService.update(device)]).then(function(response){\n                    for ( var i = 0; i < vm.devices.length; i++ )\n                        {\n                            if ( vm.devices[i].id === device.id )\n                            {\n                                vm.devices[i] = angular.copy(vm.device);\n                                break;\n                            }\n                        }\n\n                    $mdDialog.hide({response:response,update:true});\n                }).catch(function(error) {\n                    $log.debug(error);\n                    //Todo cach error\n                }).finally(function() {\n                    $rootScope.loader = false;\n                })\n            }\n\n\n\n        }\n\n\n\n    }\n\n\n})();\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('app.pages.nodes')\n\t\t.controller('NodesCreateController', NodesCreateController);\n\n\t/** @ngInject */\n\tfunction NodesCreateController($log,$state,$mdDialog, Device, LoopBackAuth, uiGmapGoogleMapApi, HelperService, managerDeviceService, _) {\n\t\tvar vm = this;\n\t\tvm.sendForm = sendForm;\n\t\tvm.registerForm = {};\n\t\tvm.mapStyle = HelperService.mapStyle();\n\t\tvm.options = {\n\t\t\ticon: '/assets/images/icons/salmon.png'\n\t\t};\n\n\n\t\tuiGmapGoogleMapApi.then(function(maps) {\n\n\t\t\tvar options = {\n\t\t\t\tenableHighAccuracy: true\n\t\t\t};\n\t\t\tnavigator.geolocation.getCurrentPosition(function(pos) {\n\t\t\t\tvm.map.center = {\n\t\t\t\t\tlatitude: pos.coords.latitude,\n\t\t\t\t\tlongitude: pos.coords.longitude\n\t\t\t\t}\n\t\t\t}, function(error) {\n\t\t\t\t$log.debug('Unable to get location: ' + error.message);\n\t\t\t}, options);\n\n\n\t\t\tvm.map = {\n\t\t\t\toptions: {\n\t\t\t\t\tdisableDefaultUI: false,\n\t\t\t\t\tstyles: vm.mapStyle\n\t\t\t\t},\n\t\t\t\tcenter: {\n\t\t\t\t\tlatitude: -33.422431,\n\t\t\t\t\tlongitude: -70.614143\n\t\t\t\t},\n\t\t\t\tzoom: 10\n\n\t\t\t};\n\n\t\t});\n\n\n\n\t\n\n\t\tfunction sendForm(ev) {\n\t\t\tvar device = angular.copy(vm.registerForm);\n\t\t\tdevice.location = vm.map.center;\n\t\t\tif (_.isEmpty(device.authToken))\n\t\t\t\tdelete device.authToken;\n\t\t\t$log.debug(\"New node register\", device);\n\t\t\t$log.debug(\"-------------------------\");\n\t\t\tmanagerDeviceService.register(device).then(function(response) {\n\t\t\t\t$log.debug(\"New node register response\", response);\n\t\t\t\t$log.debug(\"-------------------------\");\n\t\t\t\tshowState(ev,response)\n\t\t\t}).catch(function(error) {\n\t\t\t\t$log.debug(error);\n\t\t\t\t//Todo cach error\n\t\t\t})\n\t\t}\n\t\tfunction showState(ev, response) {\n\t\t\t $mdDialog.show(\n\t\t      $mdDialog.alert()\n\t\t        .parent(angular.element(document.querySelector('document.body')))\n\t\t        .clickOutsideToClose(false)\n\t\t        .title('Registro de Nodo')\n\t\t        .textContent('Tu nodo se ha registrado con éxito, tu cable de autentificación es: '+response.authToken)\n\t\t        .ariaLabel('Registro de Nodo')\n\t\t        .ok('Aceptar')\n\t\t        .targetEvent(ev)\n\t\t    ).then(function() {\n\t\t    \t$state.go(\"app.pages.home\");\n\t\t    });\n\t\t}\n\n\n\n\t}\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.pages.help', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider)\n    {   \n\n\n        // State\n        $stateProvider\n            .state('app.pages_help', {\n                abstract: true,\n                url     : '/help'\n            })\n            .state('app.pages_help.units', {\n                url    : '/units',\n                views  : {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/help/help-units/help-units.html',\n                        controller : 'HelpUnitsController as vm'\n                    }\n                }\n            }).state('app.pages_help.config', {\n                url    : '/config',\n                views  : {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/help/help-config/help-config.html',\n                        controller : 'HelpConfigController as vm'\n                    }\n                }\n            });\n           \n\n\n\n      \n\n\n        msNavigationServiceProvider.saveItem('help', {\n            title : 'Ayuda',\n            icon  : 'icono-informacion2-HaibuSmart',\n            weight   : 6\n        });\n\n        msNavigationServiceProvider.saveItem('help.units', {\n            title: 'Sensores',\n            state: 'app.pages_help.units'\n        });\n\n\n        msNavigationServiceProvider.saveItem('help.config', {\n            title: 'Configuración',\n            state: 'app.pages_help.config'\n        });\n        \n    }\n})();\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('app.pages.help')\n\t\t.controller('HelpUnitsController', HelpUnitsController);\n\n\t/** @ngInject */\n\tfunction HelpUnitsController($log,UNITS) {\n\t\tvar vm = this;\n\t\tvm.sensors= UNITS;\n\t\tvm.query = {\n\t      limit: 5,\n\t      page: 1,\n\t      filter: \"\"\n\t    };\n\n\n\n\t}\n})();\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('app.pages.help')\n\t\t.controller('HelpConfigController', HelpConfigController);\n\n\t/** @ngInject */\n\tfunction HelpConfigController($log) {\n\t\tvar vm = this;\n\t\n\n\n\t}\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.pages.reports', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider)\n    {\n        // State\n        $stateProvider\n            .state('app.pages.reports', {\n                url    : '/reports',\n                views  : {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/reports/reports.html',\n                        controller : 'ReportsController as vm'\n                    }\n                }\n            });\n\n        // Translation\n        $translatePartialLoaderProvider.addPart('app/main/pages/reports');\n\n      \n\n        msNavigationServiceProvider.saveItem('reports', {\n            title    : 'Reportes',\n            icon     : 'icono-reporte2-HaibuSmart',\n            state    : 'app.pages.reports',\n            translate: 'REPORTS.TITLE_NAV',\n            weight   : 3\n        });\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.reports')\n        .controller('ReportsController', ReportsController);\n\n    /** @ngInject */\n    function ReportsController($rootScope, $log, $filter, UNITS, Devices, managerDeviceService, moment, alasql) {\n        var vm = this;\n        vm.devices = Devices;\n        vm.sensors = UNITS;\n        vm.selectDevices = selectDevices;\n        vm.getEvents = getEvents;\n        vm.exportCvs = exportCvs;\n        vm.total=50;\n\n\n\n        init();\n\n\n        function init() {\n            vm.device = vm.devices[0];\n\n\n            vm.query = {\n                limit: 5,\n                page: 1,\n                filter: \"\"\n            };\n\n            vm.filter = {\n                options: {\n                    debounce: 500\n                }\n            };\n            if( vm.device)\n             initData();\n           \n        }\n\n\n\n        function selectDevices(device) {\n            vm.device = device;\n            initData();\n        }\n\n\n        function initData() {\n             vm.isLoading = true;\n            getCount();\n            getLastEvent();\n            managerDeviceService.getReports(vm.device, vm.query.limit, (vm.query.page - 1) * vm.query.limit).then(function(response) {\n                vm.reports = response;\n            }).finally(function() {\n                vm.isLoading = false;\n            })\n        }\n\n\n      function getLastEvent() {\n            managerDeviceService.getLastEvent(vm.device).then(function(response) {\n                vm.device.event=response;\n            }).catch(function(error) {\n                $log.debug(\"sin cache\"+error);\n            });\n        }\n\n\n        function getCount() {\n            managerDeviceService.count(vm.device).then(function(count) {\n                vm.total = count;\n            }).finally(function() {\n\n            })\n        }\n\n        function getEvents() {\n             vm.isLoading = true;\n            managerDeviceService.getReports(vm.device, vm.query.limit, (vm.query.page - 1) * vm.query.limit).then(function(response) {\n                vm.reports = response;\n            }).finally(function() {\n                vm.isLoading = false;\n            })\n        };\n\n\n        function exportCvs() {\n            $rootScope.loader = true;\n            managerDeviceService.getReportsFull(vm.device).then(function(response) {\n                var reportArray = _.map(response, function(sensors) {\n                    var data = {};\n                    data.Fecha = moment(sensors.timestamp).format();\n                    for (var i = 0; i < sensors.data.length; i++) {\n                        if (_.isNumber(parseInt(sensors.data[i].value))) {\n                            sensors.data[i].value = sensors.data[i].value * 1;\n                        }\n                        data[$filter('parseUnits')(sensors.data[i].id, vm.sensors)] = sensors.data[i].value;\n                    };\n                    return data;\n                })\n\n                $log.debug(reportArray);\n                alasql('SELECT * INTO XLSX(\"reporte-haibu-smart.xlsx\",{headers:true}) FROM ?', [reportArray], function(error) {\n                    $log.debug(error);\n                })\n\n            }).finally(function() {\n                $rootScope.loader = false;\n            })\n\n\n\n        }\n\n\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.pages.profile', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider)\n    {\n        // State\n        $stateProvider\n            .state('app.pages.profile', {\n                url    : '/profile',\n                views  : {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/profile/profile.html',\n                        controller : 'ProfileController as vm'\n                    }\n                }\n            });\n\n       \n\n      \n\n      \n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.profile')\n        .controller('ProfileController', ProfileController);\n\n    /** @ngInject */\n    function ProfileController($rootScope,$scope, $mdDialog,$log, authService) {\n        var vm = this;\n         vm.profileForm = {}\n         vm.passForm = {}\n         vm.updatePassword=updatePassword;\n         vm.updateProfile=updateProfile\n         init();\n\n\n        function init() {\n            authService.getCurrentUser().then(function(response){\n                vm.profileForm=angular.copy(response);\n            })\n            \n        }\n\n\n        function updatePassword(ev) {\n        \t$rootScope.loader = true;\n            authService.changePassword(vm.passForm.oldPassword,vm.passForm.newPassword).then(function(response) {\n                showState(ev, response);\n            }).catch(function(response) {\n                 if (response.status = 400) {\n                        if (response.data) {\n                            var dataError = response.data.error;\n                            if (dataError.code = \"INVALID_PASSWORD\") {\n                                $scope.passForm['oldPassword'].$setValidity(\"INVALID_PASSWORD\", false);\n                                \n                            }\n\n\n\n                        }\n\n\n                }\n\n            }).finally(function() {\n                $rootScope.loader = false;\n            });\n        }\n\n\n        function updateProfile(ev) {\n        \t$rootScope.loader = true;\n            authService.updateProfile(vm.profileForm).then(function(response) {\n                $rootScope.$broadcast('updateProfile', response);\n                showStateProfile(ev, response);\n            }).catch(function(response) {\n                $log.debug(response);\n            }).finally(function() {\n                $rootScope.loader = false;\n            });\n        }\n\n        function showStateProfile(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Actualizar perfil')\n                .textContent('Se ha actualizado su perfil con éxito')\n                .ariaLabel('Actualizar perfil')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            );\n        }\n\n\n        function showState(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Actualizar contraseña')\n                .textContent('Se ha actualizado la contraseña con éxito')\n                .ariaLabel('Actualizar contraseña')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            );\n        }\n\n\n\n\n\n\n        \n\n\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.home', ['chart.js','nvd3'])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider) {\n        // State\n        $stateProvider\n            .state('app.pages.home', {\n                url: '/home',\n                params:{device:null},\n                views: {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/home/home.html',\n                        controller: 'HomeController as vm'\n                    }\n                },\n                bodyClass: 'home'\n            });\n\n        // Translation\n        $translatePartialLoaderProvider.addPart('app/main/pages/home');\n\n\n      \n\n        msNavigationServiceProvider.saveItem('home', {\n            title: 'Inicio',\n            icon: 'icono-casa2-HaibuSmart',\n            state: 'app.pages.home',\n            translate: 'HOME.TITLE_NAV',\n            weight: 1\n        });\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.pages.home')\n        .controller('HomeController', HomeController);\n\n    /** @ngInject */\n    function HomeController($rootScope, $scope, $q, $interval, $log, $timeout, $mdDialog, $mdSidenav, authService, uiGmapGoogleMapApi, Devices, Device, UNITS, _, HelperService, ChartService, managerDeviceService, $stateParams, ToastService, MareasService) {\n        var vm = this;\n        var nowTicker;\n        // Data\n        vm.devices = Devices;\n        vm.device={};\n        vm.sensors = UNITS;\n        vm.maps;\n\n\n\n\n        // Methods\n        \n        //////////\n\n        init();\n\n\n\n        /**\n         * Initialize\n         */\n        function init() {\n            vm.mapStyle = HelperService.mapStyle();\n            authService.getCurrentUser().then(function(response){\n                vm.user=response;\n            })\n            vm.carousel = {\n                images: [\n                  {src: 'assets/images/fotos/foto-demo.jpg'},\n                  {src: 'assets/images/fotos/foto-demo2.jpg'},\n                ],\n                templateUrl: \"app/main/pages/home/slide-template.html\",\n                currentIndex : 0,\n                autoSlide:false\n            };\n          \n\n            \n\n           \n                     \n            vm.time = {\n                now: {\n                    second: '',\n                    minute: '',\n                    hour: '',\n                    day: '',\n                    month: '',\n                    year: ''\n                },\n                fulltime: {},\n                ticker: function() {\n                    var now = moment();\n                    vm.time.fulltime = now;\n                    vm.time.now = {\n                        second: now.format('ss'),\n                        minute: now.format('mm'),\n                        hour: now.format('HH'),\n                        day: now.format('D'),\n                        weekDay: now.format('dddd'),\n                        month: now.format('MMMM'),\n                        year: now.format('YYYY')\n                    };\n                }\n            };\n            nowTicker = $interval(vm.time.ticker, 1000);\n            vm.time.ticker();\n            //Default\n            vm.historyChart= ChartService.createHistory();\n            \n            \n            \n\n\n            if(vm.devices.length){\n                 for (var i = 0; i < vm.devices.length; i++) {\n\n                        if(!vm.devices[i].lineChart ){\n                            vm.devices[i].lineChart=  ChartService.createLineChart();\n                        }\n\n                        if(!vm.devices[i].lineChartACC ){\n                            vm.devices[i].lineChartACC=  ChartService.createLineChartACC();\n                        }\n                        if(!vm.devices[i].gagueBAT){\n                           vm.devices[i].gagueBAT = ChartService.createGague(0,100,\"%\",[\n                            {\n                                min: 0,\n                                max: 20,\n                                color: '#c74048'\n                            },{\n                                min: 20,\n                                max: 50,\n                                color: '#d58d34'\n                            },{\n                                min: 50,\n                                max: 100,\n                                color: '#37af45'\n                            }]); \n                        }\n\n                        if(!vm.devices[i].gagueCHR){\n                           vm.devices[i].gagueCHR = ChartService.createGague(0,440,\"mA\",[\n                             {\n                                min: 0,\n                                max: 440,\n                                color: '#37af45'\n                            }]); \n                        }\n\n                        if(!vm.devices[i].gaguePM10){\n                           vm.devices[i].gaguePM10 = ChartService.createGague(0,100,\"μm/m3\",[\n                             {\n                                min: 0,\n                                max: 10,\n                                color: '#37af45'\n                            },{\n                                min: 10,\n                                max: 20,\n                                color: '#d58d34'\n                            },{\n                                min: 20,\n                                max: 100,\n                                color: '#c74048'\n                            }]); \n                        }\n\n                        if(!vm.devices[i].gaguePM10){\n                           vm.devices[i].gaguePM10 = ChartService.createGague(0,100,\"μm/m3\",[\n                             {\n                                min: 0,\n                                max: 10,\n                                color: '#37af45'\n                            },{\n                                min: 10,\n                                max: 20,\n                                color: '#d58d34'\n                            },{\n                                min: 20,\n                                max: 100,\n                                color: '#c74048'\n                            }]); \n                        }\n\n                         if(!vm.devices[i].gaguePM2_5){\n                           vm.devices[i].gaguePM2_5 = ChartService.createGague(0,100,\"μm/m3\",[\n                             {\n                                min: 0,\n                                max: 10,\n                                color: '#37af45'\n                            },{\n                                min: 10,\n                                max: 20,\n                                color: '#d58d34'\n                            },{\n                                min: 20,\n                                max: 100,\n                                color: '#c74048'\n                            }]); \n                        }\n\n                        if(!vm.devices[i].gagueNOISE){\n                           vm.devices[i].gagueNOISE = ChartService.createGague(0,100,\"dBa\",[\n                             {\n                                min: 0,\n                                max: 10,\n                                color: '#37af45'\n                            },{\n                                min: 10,\n                                max: 20,\n                                color: '#d58d34'\n                            },{\n                                min: 20,\n                                max: 100,\n                                color: '#c74048'\n                            }]); \n                        }\n\n                        \n                        \n                        \n            \n\n                };\n\n                if($stateParams.device){\n                    vm.device=$stateParams.device;\n                }else{\n                    vm.device=vm.devices[0];\n                }\n\n                $log.debug(\"Select device \", vm.device)\n                getLastEvent(vm.device);\n                getWeather();\n            }\n\n              \n        }\n\n\n\n        $scope.$on('$viewContentLoaded', function() {\n            $rootScope.loader = false;\n        })\n\n        $scope.$on('$destroy', function() {\n            $interval.cancel(nowTicker);\n        });\n\n        //New Data\n        $scope.$on('update', function(event, eventDevice) {\n            var device = _.find(vm.devices, function(device) {\n                return device.deviceId === eventDevice.deviceId\n            })\n\n            $timeout(function() {\n                if (device) {\n                    device.event = eventDevice;\n                    updateValues(device);\n                }\n                $log.debug(device);\n            });\n        });\n\n        function updateValues(device) {\n            var NIVEL_RIO=0;\n            var US_DEFAULT=700; \n            var newValueBAT=device.event.dataOriginal.BAT?1*device.event.dataOriginal.BAT:null;\n            var newValueCHR=device.event.dataOriginal.CHR?1*device.event.dataOriginal.CHR:null;\n            var newValueUS=device.event.dataOriginal.US?1*device.event.dataOriginal.US:null;\n            var newValueACCX=device.event.dataOriginal.ACCX?1*device.event.dataOriginal.ACCX:null;\n            var newValueACCY=device.event.dataOriginal.ACCY?1*device.event.dataOriginal.ACCY:null;\n            var newValueACCZ=device.event.dataOriginal.ACCZ?1*device.event.dataOriginal.ACCZ:null;\n          \n            var timestamp = (new Date(device.event.timestamp)).getTime();\n\n\n             if(newValueBAT){\n                 device.gagueBAT.diff=   newValueBAT -   device.gagueBAT['value'] ;\n                 device.gagueBAT['value'] = newValueBAT ;\n                 device.gagueBAT.timestamp = timestamp;\n            }\n\n\n            if(newValueACCX && newValueACCY && newValueACCZ){\n                 device.lineChartACC.data[0].values.push({fecha: timestamp, value: newValueACCX});\n                 device.lineChartACC.data[1].values.push({fecha: timestamp, value: newValueACCY});\n                 device.lineChartACC.data[2].values.push({fecha: timestamp, value: newValueACCZ});\n            }\n\n\n            if(newValueCHR){\n                 device.gagueCHR.diff=   newValueCHR -   device.gagueCHR['value'] ;\n                 device.gagueCHR['value'] = newValueCHR ;\n                 device.gagueCHR.timestamp = timestamp;\n            }\n            \n            if(newValueUS){\n                var US_GENERATE = NIVEL_RIO + (US_DEFAULT - newValueUS);\n                device.lineChart.data[0].values.push({fecha: timestamp, value: US_GENERATE});\n\n            }\n\n                  \n        }\n\n        function getLastEvent(device) {\n            $rootScope.loader = true;\n\n            managerDeviceService.getLastEvent(device).then(function(response) {\n                device.event=response;\n                updateValues(device);\n            }).finally(function() {\n                   $rootScope.loader = false;\n            }).catch(function(error) {\n                $log.debug(\"sin cache\"+error);\n            });\n        }\n       \n\n        function getAddress() {\n            $log.debug(\"Get address\");\n            if (vm.device.address)\n                return;\n\n            var geocoder = new vm.maps.Geocoder();\n            var location = new google.maps.LatLng(vm.device.location.latitude, vm.device.location.longitude); // turn coordinates into an object          \n\n            geocoder.geocode({\n                'latLng': location\n            }, function(results, status) {\n                $log.debug(results);\n                if (status == google.maps.GeocoderStatus.OK) {\n                    vm.device.address = results[0].formatted_address;\n                }\n            });\n        }\n\n        function getWeather() {\n            managerDeviceService.getWeather(vm.device).then(function(response) {\n                $rootScope.weather=response;\n            })\n        }\n\n      \n\n        uiGmapGoogleMapApi.then(function(maps) {\n            var center={};\n            vm.maps = maps;\n\n            if (vm.device &&  vm.device.location) \n                center = vm.device.location;\n            vm.map = {\n                options: {\n                    disableDefaultUI: false,\n                    styles: vm.mapStyle\n                },\n                center: {\n                    latitude: center.latitude || -41.486373,\n                    longitude: center.longitude || -72.937377\n                },\n                zoom: 9,\n                fit: true,\n                cluster: {\n                    minimumClusterSize: 4,\n                    zoomOnClick: true,\n                    styles: [{\n                        width: 32,\n                        height: 32,\n                        textColor: 'white',\n                        textSize: 14\n                    }],\n                    averageCenter: true,\n                    clusterClass: 'cluster-icon'\n                },\n                markersEvents: {\n                    click: function(marker, eventName, model, args) {\n                         if(vm.device.deviceId != model.deviceId){\n                             $log.debug('Click marker', model);\n                             $log.debug('------------------');\n                             vm.device = model;\n                             ToastService.info(\"Nodo \"+vm.device.name+\" seleccionado\");\n                             getLastEvent(vm.device);\n                         }\n                        \n                       \n                        \n\n                    }\n                }\n\n            };\n\n\n\n        });\n\n      \n\n\n\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.pages.alerts', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider)\n    {\n        // State\n        $stateProvider\n            .state('app.pages.alerts', {\n                url    : '/alerts',\n                views  : {\n                    'content@app': {\n                        templateUrl: 'app/main/pages/alerts/alerts.html',\n                        controller : 'AlertsController as vm'\n                    }\n                }\n            });\n\n        // Translation\n        $translatePartialLoaderProvider.addPart('app/main/pages/alerts');\n\n      \n\n        msNavigationServiceProvider.saveItem('alerts', {\n            title    : 'Alertas',\n            icon     : 'icono-advertencia2-HaibuSmart',\n            state    : 'app.pages.alerts',\n            translate: 'ALERTS.TITLE_NAV',\n            weight   : 5\n        });\n    }\n})();\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('app.pages.alerts')\n\t\t.controller('AlertsController', AlertsController);\n\n\t/** @ngInject */\n\tfunction AlertsController($log, Alerts) {\n\t\tvar vm = this;\n\n\t\t// Data\n\t\tvm.alerts = Alerts;\n\t\t$log.debug(vm.alerts)\n\n\n\n\t}\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.auth.reset', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider)\n    {\n        // State\n        $stateProvider.state('app.auth_reset', {\n            url      : '/reset?access_token',\n            views    : {\n                'main@'                       : {\n                    templateUrl: 'app/core/layouts/content-only.html',\n                    controller : 'MainController as vm'\n                },\n                'content@app.auth_reset': {\n                    templateUrl: 'app/main/auth/reset/reset.html',\n                    controller : 'ResetController as vm'\n                }\n            },\n             onEnter: function ($stateParams, $state, $timeout) {\n                  if (!$stateParams.access_token) {\n                    $timeout(function() {\n                        $state.go('app.auth_login')\n                    },500)\n                        \n                  }\n            },\n            bodyClass: 'reset'\n        });\n\n        // Translation\n        $translatePartialLoaderProvider.addPart('app/main/auth/reset');\n\n\n    }\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.auth.reset')\n        .controller('ResetController', ResetController);\n\n    /** @ngInject */\n    function ResetController($rootScope, $scope, $stateParams, $state, $timeout, authService, $log, $mdDialog) {\n        var vm = this;\n        vm.reset = reset;\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init() {\n\n        }\n\n\n\n        function reset(ev) {\n            $rootScope.loader = true;\n            authService.setPassword($stateParams.access_token,vm.resetForm.password).then(function(response) {\n                $log.debug(response);\n                showState(ev, response);\n            }).catch(function(response) {\n                 if (response.status = 401) {\n                        if (response.data) {\n                            var dataError = response.data.error;\n                            if (dataError.code = \"AUTHORIZATION_REQUIRED\") {\n                                $scope.resetForm['password'].$setValidity(\"AUTHORIZATION_REQUIRED\", false);\n                                \n                            }\n\n\n\n                        }\n\n\n                }\n\n            }).finally(function() {\n                $rootScope.loader = false;\n            });\n\n\n        }\n\n\n\n        function showState(ev, response) {\n            $mdDialog.show(\n                $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Reiniciar contraseña')\n                .textContent('Se ha actualizado la contraseña con éxito')\n                .ariaLabel('Reiniciar contraseña')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n                $state.go('app.auth_login');\n            });\n        }\n\n\n\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.auth.register', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider)\n    {\n        // State\n        $stateProvider.state('app.auth_register', {\n            url      : '/register',\n            views    : {\n                'main@'                       : {\n                    templateUrl: 'app/core/layouts/content-only.html',\n                    controller : 'MainController as vm'\n                },\n                'content@app.auth_register': {\n                    templateUrl: 'app/main/auth/register/register.html',\n                    controller : 'RegisterController as vm'\n                }\n            },\n            bodyClass: 'register'\n        });\n\n        // Translation\n        $translatePartialLoaderProvider.addPart('app/main/auth/register');\n\n\n    }\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.auth.register')\n        .controller('RegisterController', RegisterController);\n\n    /** @ngInject */\n    function RegisterController($rootScope, $scope,$state, $timeout, authService, uiHelper, $log,$mdDialog) {\n        var vm = this;\n        vm.register = register;\n        vm.isLoading = false;\n        vm.registerForm = {};\n\n\n        function register(ev) {\n            $rootScope.loader =true;\n            var user=angular.copy(vm.registerForm);\n            delete user.passwordConfirm;\n            vm.isLoading = true;\n            authService.register(user).then(function(response) {\n               showState(ev,response);\n            }).catch(function(response) {\n                $log.debug(response);\n                if(response.status= 442){\n                    if(response.data){\n                        var dataError= response.data.error;\n                         angular.forEach(dataError.details.codes, function(error , key) {\n                            if($scope.registerForm[key])\n                                $scope.registerForm[key].$setValidity(error[0], false);\n                        });\n                    }\n                    \n                }\n            }).finally(function () {\n                vm.isLoading=false;\n                $rootScope.loader =false;\n            });\n\n\n        }\n\n        function showState(ev, response) {\n             $mdDialog.show(\n              $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Registro ')\n                .textContent(response.firstName+' '+response.lastName+' te has registrado con éxito.')\n                .ariaLabel('Registro')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n                $state.go(\"app.auth_login\");\n            });\n        }\n\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.auth.login', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, $translatePartialLoaderProvider, msNavigationServiceProvider) {\n        // State\n        $stateProvider.state('app.auth_login', {\n            url: '/',\n            views: {\n                'main@': {\n                    templateUrl: 'app/core/layouts/content-only.html',\n                    controller: 'MainController as vm'\n                },\n                'content@app.auth_login': {\n                    templateUrl: 'app/main/auth/login/login.html',\n                    controller: 'LoginController as vm'\n                }\n            },\n            bodyClass: 'login'\n        });\n\n        // Translation\n        $translatePartialLoaderProvider.addPart('app/main/auth/login');\n\n\n    }\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.auth.login')\n        .controller('LoginController', LoginController);\n\n    /** @ngInject */\n    function LoginController($rootScope, $scope, managerDeviceService, localStorageService, $state, $timeout, authService, uiHelper, $log, MQTTUtils, $mdDialog) {\n        var vm = this;\n        vm.login = login;\n        vm.isLoading = false;\n        vm.rememberMe = false;\n        vm.loginForm = {}\n        vm.forgotPassword = forgotPassword;\n\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init() {\n            localStorageService.clearAll();\n            MQTTUtils.onStopAllWatches();\n            managerDeviceService.reset();\n        }\n\n\n\n        function login() {\n            $rootScope.loader = true;\n            authService.login(vm.loginForm, vm.rememberMe).then(function(response) {\n                    \n                    $timeout(function() {\n                        $state.go(\"app.pages.home\");\n                    }, 250);\n                })\n                .catch(function(response) {\n                    $log.debug(response);\n                    if (response.status = 401) {\n                        if (response.data) {\n                            var dataError = response.data.error;\n                            if (dataError.code = \"LOGIN_FAILED\") {\n                                $scope.loginForm['password'].$setValidity(dataError.code, false);\n                                $timeout(function() {\n                                    $scope.loginForm['password'].$setValidity(dataError.code, true);\n                                }, 2000);\n                            }\n\n\n\n                        }\n\n\n                    }\n                    $rootScope.loader = false;\n                })\n\n\n        }\n\n\n        function forgotPassword(ev) {\n            $mdDialog.show({\n                controller: forgotPasswordController,\n                controllerAs: 'vm',\n                templateUrl: 'app/main/auth/login/forgot-password.html',\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                clickOutsideToClose: true,\n                fullscreen: false\n            }).then(function(response) {\n                showState(ev, response);\n            });\n        }\n\n\n        function showState(ev, response) {\n             $mdDialog.show(\n              $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Envio de correo')\n                .textContent('Se ha enviado con éxito un correo a '+response.email)\n                .ariaLabel('Registro')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            );\n        }\n\n        function forgotPasswordController($scope, $rootScope, $log, authService) {\n            var vm = this;\n            vm.hide = hide;\n            vm.cancel = cancel;\n            vm.keypress = keypress;\n            vm.reset = reset;\n\n            function hide() {\n                $mdDialog.hide();\n            }\n\n\n            function cancel() {\n                $mdDialog.cancel();\n            }\n\n            function keypress(ev) {\n                if (event.which === 13 && !$scope.forgotForm.$invalid) {\n                    reset();\n                }\n            }\n\n            function reset() {\n                $rootScope.loader = true;\n                authService.resetPassword(vm.email).then(function(response) {\n                     $mdDialog.hide(response);\n                }).catch(function(response) {\n                    $log.debug(response);\n                    if (response.status = 404) {\n                        if (response.data) {\n                            var dataError = response.data.error;\n                            if (dataError.code = \"EMAIL_NOT_FOUND\") {\n                                $scope.forgotForm['email'].$setValidity(\"EMAIL_NOT_FOUND\", false);\n                                \n                            }\n\n\n\n                        }\n\n\n                    }\n                }).finally(function() {\n                    $rootScope.loader = false;\n                })\n            }\n\n\n        }\n\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core',\n            [\n                'ngAnimate',\n                'ngAria',\n                'ngCookies',\n                'ngMessages',\n                'ngResource',\n                'ngSanitize',\n                'ngMaterial',\n                'pascalprecht.translate',\n                'ui.router'\n            ]);\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsWidgetController', MsWidgetController)\n        .directive('msWidget', msWidgetDirective)\n        .directive('msWidgetFront', msWidgetFrontDirective)\n        .directive('msWidgetBack', msWidgetBackDirective);\n\n    /** @ngInject */\n    function MsWidgetController($scope, $element)\n    {\n        var vm = this;\n\n        // Data\n        vm.flipped = false;\n\n        // Methods\n        vm.flip = flip;\n\n        //////////\n\n        /**\n         * Flip the widget\n         */\n        function flip()\n        {\n            if ( !isFlippable() )\n            {\n                return;\n            }\n\n            // Toggle flipped status\n            vm.flipped = !vm.flipped;\n\n            // Toggle the 'flipped' class\n            $element.toggleClass('flipped', vm.flipped);\n        }\n\n        /**\n         * Check if widget is flippable\n         *\n         * @returns {boolean}\n         */\n        function isFlippable()\n        {\n            return (angular.isDefined($scope.flippable) && $scope.flippable === true);\n        }\n    }\n\n    /** @ngInject */\n    function msWidgetDirective()\n    {\n        return {\n            restrict  : 'E',\n            scope     : {\n                flippable: '=?'\n            },\n            controller: 'MsWidgetController',\n            transclude: true,\n            compile   : function (tElement)\n            {\n                tElement.addClass('ms-widget');\n\n                return function postLink(scope, iElement, iAttrs, MsWidgetCtrl, transcludeFn)\n                {\n                    // Custom transclusion\n                    transcludeFn(function (clone)\n                    {\n                        iElement.empty();\n                        iElement.append(clone);\n                    });\n\n                    //////////\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msWidgetFrontDirective()\n    {\n        return {\n            restrict  : 'E',\n            require   : '^msWidget',\n            transclude: true,\n            compile   : function (tElement)\n            {\n                tElement.addClass('ms-widget-front');\n\n                return function postLink(scope, iElement, iAttrs, MsWidgetCtrl, transcludeFn)\n                {\n                    // Custom transclusion\n                    transcludeFn(function (clone)\n                    {\n                        iElement.empty();\n                        iElement.append(clone);\n                    });\n\n                    // Methods\n                    scope.flipWidget = MsWidgetCtrl.flip;\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msWidgetBackDirective()\n    {\n        return {\n            restrict  : 'E',\n            require   : '^msWidget',\n            transclude: true,\n            compile   : function (tElement)\n            {\n                tElement.addClass('ms-widget-back');\n\n                return function postLink(scope, iElement, iAttrs, MsWidgetCtrl, transcludeFn)\n                {\n                    // Custom transclusion\n                    transcludeFn(function (clone)\n                    {\n                        iElement.empty();\n                        iElement.append(clone);\n                    });\n\n                    // Methods\n                    scope.flipWidget = MsWidgetCtrl.flip;\n                };\n            }\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsTimelineController', MsTimelineController)\n        .directive('msTimeline', msTimelineDirective)\n        .directive('msTimelineItem', msTimelineItemDirective);\n\n    /** @ngInject */\n    function MsTimelineController()\n    {\n        var vm = this;\n\n        // Data\n        vm.scrollEl = undefined;\n\n        // Methods\n        vm.setScrollEl = setScrollEl;\n        vm.getScrollEl = getScrollEl;\n\n        //////////\n\n        /**\n         * Set scroll element\n         *\n         * @param scrollEl\n         */\n        function setScrollEl(scrollEl)\n        {\n            vm.scrollEl = scrollEl;\n        }\n\n        /**\n         * Get scroll element\n         *\n         * @returns {undefined|*}\n         */\n        function getScrollEl()\n        {\n            return vm.scrollEl;\n        }\n    }\n\n    /** @ngInject */\n    function msTimelineDirective()\n    {\n        return {\n            scope     : {\n                msTimeline: '=?',\n                loadMore  : '&?msTimelineLoadMore'\n            },\n            controller: 'MsTimelineController',\n            compile   : function (tElement)\n            {\n                tElement.addClass('ms-timeline');\n\n                return function postLink(scope, iElement, iAttrs, MsTimelineCtrl)\n                {\n                    // Create an element for triggering the load more action and append it\n                    var loadMoreEl = angular.element('<div class=\"ms-timeline-loader md-accent-bg md-whiteframe-4dp\"><span class=\"spinner animate-rotate\"></span></div>');\n                    iElement.append(loadMoreEl);\n\n                    // Default config\n                    var config = {\n                        scrollEl: '#content'\n                    };\n\n                    // Extend the configuration\n                    config = angular.extend(config, scope.msTimeline, {});\n                    \n                    // Grab the scrollable element and store it in the controller for general use\n                    var scrollEl = angular.element(config.scrollEl);\n                    MsTimelineCtrl.setScrollEl(scrollEl);\n\n                    // Threshold\n                    var threshold = 144;\n\n                    // Register onScroll event for the first time\n                    registerOnScroll();\n\n                    /**\n                     * onScroll Event\n                     */\n                    function onScroll()\n                    {\n                        if ( scrollEl.scrollTop() + scrollEl.height() + threshold > loadMoreEl.position().top )\n                        {\n                            // Show the loader\n                            loadMoreEl.addClass('show');\n\n                            // Unregister scroll event to prevent triggering the function over and over again\n                            unregisterOnScroll();\n\n                            // Trigger load more event\n                            scope.loadMore().then(\n                                // Success\n                                function ()\n                                {\n                                    // Hide the loader\n                                    loadMoreEl.removeClass('show');\n\n                                    // Register the onScroll event again\n                                    registerOnScroll();\n                                },\n\n                                // Error\n                                function ()\n                                {\n                                    // Remove the loader completely\n                                    loadMoreEl.remove();\n                                }\n                            );\n                        }\n                    }\n\n                    /**\n                     * onScroll event registerer\n                     */\n                    function registerOnScroll()\n                    {\n                        scrollEl.on('scroll', onScroll);\n                    }\n\n                    /**\n                     * onScroll event unregisterer\n                     */\n                    function unregisterOnScroll()\n                    {\n                        scrollEl.off('scroll', onScroll);\n                    }\n\n                    // Cleanup\n                    scope.$on('$destroy', function ()\n                    {\n                        unregisterOnScroll();\n                    });\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msTimelineItemDirective($timeout, $q)\n    {\n        return {\n            scope  : true,\n            require: '^msTimeline',\n            compile: function (tElement)\n            {\n                tElement.addClass('ms-timeline-item').addClass('hidden');\n\n                return function postLink(scope, iElement, iAttrs, MsTimelineCtrl)\n                {\n                    var threshold = 72,\n                        itemLoaded = false,\n                        itemInViewport = false,\n                        scrollEl = MsTimelineCtrl.getScrollEl();\n\n                    //////////\n\n                    init();\n\n                    /**\n                     * Initialize\n                     */\n                    function init()\n                    {\n                        // Check if the timeline item has ms-card\n                        if ( iElement.find('ms-card') )\n                        {\n                            // If the ms-card template loaded...\n                            scope.$on('msCard::cardTemplateLoaded', function (event, args)\n                            {\n                                var cardEl = angular.element(args[0]);\n\n                                // Test the card to see if there is any image on it\n                                testForImage(cardEl).then(function ()\n                                {\n                                    $timeout(function ()\n                                    {\n                                        itemLoaded = true;\n                                    });\n                                });\n                            });\n                        }\n                        else\n                        {\n                            // Test the element to see if there is any image on it\n                            testForImage(iElement).then(function ()\n                            {\n                                $timeout(function ()\n                                {\n                                    itemLoaded = true;\n                                });\n                            });\n                        }\n\n                        // Check if the loaded element also in the viewport\n                        scrollEl.on('scroll', testForVisibility);\n\n                        // Test for visibility for the first time without waiting for the scroll event\n                        testForVisibility();\n                    }\n\n                    // Item ready watcher\n                    var itemReadyWatcher = scope.$watch(\n                        function ()\n                        {\n                            return itemLoaded && itemInViewport;\n                        },\n                        function (current, old)\n                        {\n                            if ( angular.equals(current, old) )\n                            {\n                                return;\n                            }\n\n                            if ( current )\n                            {\n                                iElement.removeClass('hidden').addClass('animate');\n\n                                // Unbind itemReadyWatcher\n                                itemReadyWatcher();\n                            }\n                        }, true);\n\n                    /**\n                     * Test the given element for image\n                     *\n                     * @param element\n                     * @returns promise\n                     */\n                    function testForImage(element)\n                    {\n                        var deferred = $q.defer(),\n                            imgEl = element.find('img');\n\n                        if ( imgEl.length > 0 )\n                        {\n                            imgEl.on('load', function ()\n                            {\n                                deferred.resolve('Image is loaded');\n                            });\n                        }\n                        else\n                        {\n                            deferred.resolve('No images');\n                        }\n\n                        return deferred.promise;\n                    }\n\n                    /**\n                     * Test the element for visibility\n                     */\n                    function testForVisibility()\n                    {\n                        if ( scrollEl.scrollTop() + scrollEl.height() > iElement.position().top + threshold )\n                        {\n                            $timeout(function ()\n                            {\n                                itemInViewport = true;\n                            });\n\n                            // Unbind the scroll event\n                            scrollEl.off('scroll', testForVisibility);\n                        }\n                    }\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsStepperController', MsStepperController)\n        .directive('msHorizontalStepper', msHorizontalStepperDirective)\n        .directive('msHorizontalStepperStep', msHorizontalStepperStepDirective)\n        .directive('msVerticalStepper', msVerticalStepperDirective)\n        .directive('msVerticalStepperStep', msVerticalStepperStepDirective);\n\n    /** @ngInject */\n    function MsStepperController($timeout)\n    {\n        var vm = this;\n\n        // Data\n        vm.mainForm = undefined;\n\n        vm.orientation = 'horizontal';\n        vm.steps = [];\n        vm.currentStep = undefined;\n        vm.currentStepNumber = 1;\n\n        // Methods\n        vm.setOrientation = setOrientation;\n        vm.registerMainForm = registerMainForm;\n        vm.registerStep = registerStep;\n        vm.setupSteps = setupSteps;\n        vm.resetForm = resetForm;\n\n        vm.setCurrentStep = setCurrentStep;\n\n        vm.gotoStep = gotoStep;\n        vm.gotoPreviousStep = gotoPreviousStep;\n        vm.gotoNextStep = gotoNextStep;\n        vm.gotoFirstStep = gotoFirstStep;\n        vm.gotoLastStep = gotoLastStep;\n\n        vm.isFirstStep = isFirstStep;\n        vm.isLastStep = isLastStep;\n\n        vm.isStepCurrent = isStepCurrent;\n        vm.isStepDisabled = isStepDisabled;\n        vm.isStepOptional = isStepOptional;\n        vm.isStepHidden = isStepHidden;\n        vm.filterHiddenStep = filterHiddenStep;\n        vm.isStepValid = isStepValid;\n        vm.isStepNumberValid = isStepNumberValid;\n\n        vm.isFormValid = isFormValid;\n\n        //////////\n\n        /**\n         * Set the orientation of the stepper\n         *\n         * @param orientation\n         */\n        function setOrientation(orientation)\n        {\n            vm.orientation = orientation || 'horizontal';\n        }\n\n        /**\n         * Register the main form\n         *\n         * @param form\n         */\n        function registerMainForm(form)\n        {\n            vm.mainForm = form;\n        }\n\n        /**\n         * Register a step\n         *\n         * @param element\n         * @param scope\n         * @param form\n         */\n        function registerStep(element, scope, form)\n        {\n            var step = {\n                element           : element,\n                scope             : scope,\n                form              : form,\n                stepNumber        : scope.step || (vm.steps.length + 1),\n                stepTitle         : scope.stepTitle,\n                stepTitleTranslate: scope.stepTitleTranslate\n            };\n\n            // Push the step into steps array\n            vm.steps.push(step);\n\n            // Sort steps by stepNumber\n            vm.steps.sort(function (a, b)\n            {\n                return a.stepNumber - b.stepNumber;\n            });\n\n            return step;\n        }\n\n        /**\n         * Setup steps for the first time\n         */\n        function setupSteps()\n        {\n            vm.setCurrentStep(vm.currentStepNumber);\n        }\n\n        /**\n         * Reset steps and the main form\n         */\n        function resetForm()\n        {\n            // Timeout is required here because we need to\n            // let form model to reset before setting the\n            // statuses\n            $timeout(function ()\n            {\n                // Reset all the steps\n                for ( var x = 0; x < vm.steps.length; x++ )\n                {\n                    vm.steps[x].form.$setPristine();\n                    vm.steps[x].form.$setUntouched();\n                }\n\n                // Reset the main form\n                vm.mainForm.$setPristine();\n                vm.mainForm.$setUntouched();\n\n                // Go to first step\n                gotoFirstStep();\n            });\n        }\n\n        /**\n         * Set current step\n         *\n         * @param stepNumber\n         */\n        function setCurrentStep(stepNumber)\n        {\n            // If the stepNumber is not a valid step number, bail...\n            if ( !isStepNumberValid(stepNumber) )\n            {\n                return;\n            }\n\n            // Update the current step number\n            vm.currentStepNumber = stepNumber;\n\n            if ( vm.orientation === 'horizontal' )\n            {\n                // Hide all steps\n                for ( var i = 0; i < vm.steps.length; i++ )\n                {\n                    vm.steps[i].element.hide();\n                }\n\n                // Show the current step\n                vm.steps[vm.currentStepNumber - 1].element.show();\n            }\n            else if ( vm.orientation === 'vertical' )\n            {\n                // Hide all step content\n                for ( var j = 0; j < vm.steps.length; j++ )\n                {\n                    vm.steps[j].element.find('.ms-stepper-step-content').hide();\n                }\n\n                // Show the current step content\n                vm.steps[vm.currentStepNumber - 1].element.find('.ms-stepper-step-content').show();\n            }\n        }\n\n        /**\n         * Go to a step\n         *\n         * @param stepNumber\n         */\n        function gotoStep(stepNumber)\n        {\n            // If the step we are about to go\n            // is hidden, bail...\n            if ( isStepHidden(stepNumber) )\n            {\n                return;\n            }\n\n            vm.setCurrentStep(stepNumber);\n        }\n\n        /**\n         * Go to the previous step\n         */\n        function gotoPreviousStep()\n        {\n            var stepNumber = vm.currentStepNumber - 1;\n\n            // Test the previous steps and make sure we\n            // will land to the one that is not hidden\n            for ( var s = stepNumber; s >= 1; s-- )\n            {\n                if ( !isStepHidden(s) )\n                {\n                    stepNumber = s;\n                    break;\n                }\n            }\n\n            vm.setCurrentStep(stepNumber);\n        }\n\n        /**\n         * Go to the next step\n         */\n        function gotoNextStep()\n        {\n            var stepNumber = vm.currentStepNumber + 1;\n\n            // Test the following steps and make sure we\n            // will land to the one that is not hidden\n            for ( var s = stepNumber; s <= vm.steps.length; s++ )\n            {\n                if ( !isStepHidden(s) )\n                {\n                    stepNumber = s;\n                    break;\n                }\n            }\n\n            vm.setCurrentStep(stepNumber);\n        }\n\n        /**\n         * Go to the first step\n         */\n        function gotoFirstStep()\n        {\n            vm.setCurrentStep(1);\n        }\n\n        /**\n         * Go to the last step\n         */\n        function gotoLastStep()\n        {\n            vm.setCurrentStep(vm.steps.length);\n        }\n\n        /**\n         * Check if the current step is the first step\n         *\n         * @returns {boolean}\n         */\n        function isFirstStep()\n        {\n            return vm.currentStepNumber === 1;\n        }\n\n        /**\n         * Check if the current step is the last step\n         *\n         * @returns {boolean}\n         */\n        function isLastStep()\n        {\n            return vm.currentStepNumber === vm.steps.length;\n        }\n\n        /**\n         * Check if the given step is the current one\n         *\n         * @param stepNumber\n         * @returns {null|boolean}\n         */\n        function isStepCurrent(stepNumber)\n        {\n            // If the stepNumber is not a valid step number, bail...\n            if ( !isStepNumberValid(stepNumber) )\n            {\n                return null;\n            }\n\n            return vm.currentStepNumber === stepNumber;\n        }\n\n        /**\n         * Check if the given step should be disabled\n         *\n         * @param stepNumber\n         * @returns {null|boolean}\n         */\n        function isStepDisabled(stepNumber)\n        {\n            // If the stepNumber is not a valid step number, bail...\n            if ( !isStepNumberValid(stepNumber) )\n            {\n                return null;\n            }\n\n            var disabled = false;\n\n            for ( var i = 1; i < stepNumber; i++ )\n            {\n                if ( !isStepValid(i) )\n                {\n                    disabled = true;\n                    break;\n                }\n            }\n\n            return disabled;\n        }\n\n        /**\n         * Check if the given step is optional\n         *\n         * @param stepNumber\n         * @returns {null|boolean}\n         */\n        function isStepOptional(stepNumber)\n        {\n            // If the stepNumber is not a valid step number, bail...\n            if ( !isStepNumberValid(stepNumber) )\n            {\n                return null;\n            }\n\n            return vm.steps[stepNumber - 1].scope.optionalStep;\n        }\n\n        /**\n         * Check if the given step is hidden\n         *\n         * @param stepNumber\n         * @returns {null|boolean}\n         */\n        function isStepHidden(stepNumber)\n        {\n            // If the stepNumber is not a valid step number, bail...\n            if ( !isStepNumberValid(stepNumber) )\n            {\n                return null;\n            }\n\n            return !!vm.steps[stepNumber - 1].scope.hideStep;\n        }\n\n        /**\n         * Check if the given step is hidden as a filter\n         *\n         * @param step\n         * @returns {boolean}\n         */\n        function filterHiddenStep(step)\n        {\n            return !isStepHidden(step.stepNumber);\n        }\n\n        /**\n         * Check if the given step is valid\n         *\n         * @param stepNumber\n         * @returns {null|boolean}\n         */\n        function isStepValid(stepNumber)\n        {\n            // If the stepNumber is not a valid step number, bail...\n            if ( !isStepNumberValid(stepNumber) )\n            {\n                return null;\n            }\n\n            // If the step is optional, always return true\n            if ( isStepOptional(stepNumber) )\n            {\n                return true;\n            }\n\n            return vm.steps[stepNumber - 1].form.$valid;\n        }\n\n        /**\n         * Check if the given step number is a valid step number\n         *\n         * @param stepNumber\n         * @returns {boolean}\n         */\n        function isStepNumberValid(stepNumber)\n        {\n            return !(angular.isUndefined(stepNumber) || stepNumber < 1 || stepNumber > vm.steps.length);\n        }\n\n        /**\n         * Check if the entire form is valid\n         *\n         * @returns {boolean}\n         */\n        function isFormValid()\n        {\n            return vm.mainForm.$valid;\n        }\n    }\n\n    /** @ngInject */\n    function msHorizontalStepperDirective()\n    {\n        return {\n            restrict        : 'A',\n            scope           : {},\n            require         : ['form', 'msHorizontalStepper'],\n            priority        : 1001,\n            controller      : 'MsStepperController as MsStepper',\n            bindToController: {\n                model: '=ngModel'\n            },\n            transclude      : true,\n            templateUrl     : 'app/core/directives/ms-stepper/templates/horizontal/horizontal.html',\n            compile         : function (tElement)\n            {\n                tElement.addClass('ms-stepper');\n\n                return function postLink(scope, iElement, iAttrs, ctrls)\n                {\n                    var FormCtrl = ctrls[0],\n                        MsStepperCtrl = ctrls[1];\n\n                    // Register the main form and setup\n                    // the steps for the first time\n                    MsStepperCtrl.setOrientation('horizontal');\n                    MsStepperCtrl.registerMainForm(FormCtrl);\n                    MsStepperCtrl.setupSteps();\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msHorizontalStepperStepDirective()\n    {\n        return {\n            restrict: 'E',\n            require : ['form', '^msHorizontalStepper'],\n            priority: 1000,\n            scope   : {\n                step              : '=?',\n                stepTitle         : '=?',\n                stepTitleTranslate: '=?',\n                optionalStep      : '=?',\n                hideStep          : '=?'\n            },\n            compile : function (tElement)\n            {\n                tElement.addClass('ms-stepper-step');\n\n                return function postLink(scope, iElement, iAttrs, ctrls)\n                {\n                    var FormCtrl = ctrls[0],\n                        MsStepperCtrl = ctrls[1];\n\n                    // Is it an optional step?\n                    scope.optionalStep = angular.isDefined(iAttrs.optionalStep);\n\n                    // Register the step\n                    MsStepperCtrl.registerStep(iElement, scope, FormCtrl);\n\n                    // Hide the step by default\n                    iElement.hide();\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msVerticalStepperDirective($timeout)\n    {\n        return {\n            restrict        : 'A',\n            scope           : {},\n            require         : ['form', 'msVerticalStepper'],\n            priority        : 1001,\n            controller      : 'MsStepperController as MsStepper',\n            bindToController: {\n                model: '=ngModel'\n            },\n            transclude      : true,\n            templateUrl     : 'app/core/directives/ms-stepper/templates/vertical/vertical.html',\n            compile         : function (tElement)\n            {\n                tElement.addClass('ms-stepper');\n\n                return function postLink(scope, iElement, iAttrs, ctrls)\n                {\n                    var FormCtrl = ctrls[0],\n                        MsStepperCtrl = ctrls[1];\n\n                    // Register the main form and setup\n                    // the steps for the first time\n\n                    // Timeout is required in vertical stepper\n                    // as we are using transclusion in steps.\n                    // We have to wait for them to be transcluded\n                    // and registered to the controller\n                    $timeout(function ()\n                    {\n                        MsStepperCtrl.setOrientation('vertical');\n                        MsStepperCtrl.registerMainForm(FormCtrl);\n                        MsStepperCtrl.setupSteps();\n                    });\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msVerticalStepperStepDirective()\n    {\n        return {\n            restrict   : 'E',\n            require    : ['form', '^msVerticalStepper'],\n            priority   : 1000,\n            scope      : {\n                step              : '=?',\n                stepTitle         : '=?',\n                stepTitleTranslate: '=?',\n                optionalStep      : '=?',\n                hideStep          : '=?'\n            },\n            transclude : true,\n            templateUrl: 'app/core/directives/ms-stepper/templates/vertical/step/vertical-step.html',\n            compile    : function (tElement)\n            {\n                tElement.addClass('ms-stepper-step');\n\n                return function postLink(scope, iElement, iAttrs, ctrls)\n                {\n                    var FormCtrl = ctrls[0],\n                        MsStepperCtrl = ctrls[1];\n\n                    // Is it an optional step?\n                    scope.optionalStep = angular.isDefined(iAttrs.optionalStep);\n\n                    // Register the step\n                    scope.stepInfo = MsStepperCtrl.registerStep(iElement, scope, FormCtrl);\n\n                    // Expose the controller to the scope\n                    scope.MsStepper = MsStepperCtrl;\n\n                    // Hide the step content by default\n                    iElement.find('.ms-stepper-step-content').hide();\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('msSplashScreen', msSplashScreenDirective);\n\n    /** @ngInject */\n    function msSplashScreenDirective($animate)\n    {\n        return {\n            restrict: 'E',\n            link    : function (scope, iElement)\n            {\n                var splashScreenRemoveEvent = scope.$on('msSplashScreen::remove', function ()\n                {\n                    $animate.leave(iElement).then(function ()\n                    {\n                        // De-register scope event\n                        splashScreenRemoveEvent();\n\n                        // Null-ify everything else\n                        scope = iElement = null;\n                    });\n                });\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('msSidenavHelper', msSidenavHelperDirective);\n\n    /** @ngInject */\n    function msSidenavHelperDirective()\n    {\n        return {\n            restrict: 'A',\n            require : '^mdSidenav',\n            link    : function (scope, iElement, iAttrs, MdSidenavCtrl)\n            {\n                // Watch md-sidenav open & locked open statuses\n                // and add class to the \".page-layout\" if only\n                // the sidenav open and NOT locked open\n                scope.$watch(function ()\n                {\n                    return MdSidenavCtrl.isOpen() && !MdSidenavCtrl.isLockedOpen();\n                }, function (current)\n                {\n                    if ( angular.isUndefined(current) )\n                    {\n                        return;\n                    }\n\n                    iElement.parent().toggleClass('full-height', current);\n                    angular.element('html').toggleClass('sidenav-open', current);\n                });\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsShortcutsController', MsShortcutsController)\n        .directive('msShortcuts', msShortcutsDirective);\n\n    /** @ngInject */\n    function MsShortcutsController($scope, $cookies, $document, $timeout, $q, msNavigationService)\n    {\n        var vm = this;\n\n        // Data\n        vm.query = '';\n        vm.queryOptions = {\n            debounce: 300\n        };\n        vm.resultsLoading = false;\n        vm.selectedResultIndex = 0;\n        vm.ignoreMouseEvents = false;\n        vm.mobileBarActive = false;\n\n        vm.results = null;\n        vm.shortcuts = [];\n\n        vm.sortableOptions = {\n            ghostClass   : 'ghost',\n            forceFallback: true,\n            fallbackClass: 'dragging',\n            onSort       : function ()\n            {\n                vm.saveShortcuts();\n            }\n        };\n\n        // Methods\n        vm.populateResults = populateResults;\n        vm.loadShortcuts = loadShortcuts;\n        vm.saveShortcuts = saveShortcuts;\n        vm.addShortcut = addShortcut;\n        vm.removeShortcut = removeShortcut;\n        vm.handleResultClick = handleResultClick;\n\n        vm.absorbEvent = absorbEvent;\n        vm.handleKeydown = handleKeydown;\n        vm.handleMouseenter = handleMouseenter;\n        vm.temporarilyIgnoreMouseEvents = temporarilyIgnoreMouseEvents;\n        vm.ensureSelectedResultIsVisible = ensureSelectedResultIsVisible;\n        vm.toggleMobileBar = toggleMobileBar;\n\n        //////////\n\n        init();\n\n        function init()\n        {\n            // Load the shortcuts\n            vm.loadShortcuts().then(\n                // Success\n                function (response)\n                {\n                    vm.shortcuts = response;\n\n                    // Add shortcuts as results by default\n                    if ( vm.shortcuts.length > 0 )\n                    {\n                        vm.results = response;\n                    }\n                }\n            );\n\n            // Watch the model changes to trigger the search\n            $scope.$watch('MsShortcuts.query', function (current, old)\n            {\n                if ( angular.isUndefined(current) )\n                {\n                    return;\n                }\n\n                if ( angular.equals(current, old) )\n                {\n                    return;\n                }\n\n                // Show the loader\n                vm.resultsLoading = true;\n\n                // Populate the results\n                vm.populateResults().then(\n                    // Success\n                    function (response)\n                    {\n                        vm.results = response;\n                    },\n                    // Error\n                    function ()\n                    {\n                        vm.results = [];\n                    }\n                ).finally(\n                    function ()\n                    {\n                        // Hide the loader\n                        vm.resultsLoading = false;\n                    }\n                );\n            });\n        }\n\n        /**\n         * Populate the results\n         */\n        function populateResults()\n        {\n            var results = [],\n                flatNavigation = msNavigationService.getFlatNavigation(),\n                deferred = $q.defer();\n\n            // Iterate through the navigation array and\n            // make sure it doesn't have any groups or\n            // none ui-sref items\n            for ( var x = 0; x < flatNavigation.length; x++ )\n            {\n                if ( flatNavigation[x].uisref )\n                {\n                    results.push(flatNavigation[x]);\n                }\n            }\n\n            // If there is a query, filter the results\n            if ( vm.query )\n            {\n                results = results.filter(function (item)\n                {\n                    if ( angular.lowercase(item.title).search(angular.lowercase(vm.query)) > -1 )\n                    {\n                        return true;\n                    }\n                });\n\n                // Iterate through one last time and\n                // add required properties to items\n                for ( var i = 0; i < results.length; i++ )\n                {\n                    // Add false to hasShortcut by default\n                    results[i].hasShortcut = false;\n\n                    // Test if the item is in the shortcuts list\n                    for ( var y = 0; y < vm.shortcuts.length; y++ )\n                    {\n                        if ( vm.shortcuts[y]._id === results[i]._id )\n                        {\n                            results[i].hasShortcut = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                // If the query is empty, that means\n                // there is nothing to search for so\n                // we will populate the results with\n                // current shortcuts if there is any\n                if ( vm.shortcuts.length > 0 )\n                {\n                    results = vm.shortcuts;\n                }\n            }\n\n            // Reset the selected result\n            vm.selectedResultIndex = 0;\n\n            // Fake the service delay\n            $timeout(function ()\n            {\n                // Resolve the promise\n                deferred.resolve(results);\n            }, 250);\n\n            // Return a promise\n            return deferred.promise;\n        }\n\n        /**\n         * Load shortcuts\n         */\n        function loadShortcuts()\n        {\n            var deferred = $q.defer();\n\n            // For the demo purposes, we will\n            // load the shortcuts from the cookies.\n            // But here you can make an API call\n            // to load them from the DB.\n            var shortcuts;\n            shortcuts = angular.fromJson($cookies.get('FUSE.shortcuts')) ||[];\n\n            // Resolve the promise\n            deferred.resolve(shortcuts);\n\n            return deferred.promise;\n        }\n\n        /**\n         * Save the shortcuts\n         */\n        function saveShortcuts()\n        {\n            var deferred = $q.defer();\n\n            // For the demo purposes, we will\n            // keep the shortcuts in the cookies.\n            // But here you can make an API call\n            // to save them to the DB.\n            $cookies.put('FUSE.shortcuts', angular.toJson(vm.shortcuts));\n\n            // Fake the service delay\n            $timeout(function ()\n            {\n                deferred.resolve({'success': true});\n            }, 250);\n\n            return deferred.promise;\n        }\n\n        /**\n         * Add item as shortcut\n         *\n         * @param item\n         */\n        function addShortcut(item)\n        {\n            // Update the hasShortcut status\n            item.hasShortcut = true;\n\n            // Add as a shortcut\n            vm.shortcuts.push(item);\n\n            // Save the shortcuts\n            vm.saveShortcuts();\n        }\n\n        /**\n         * Remove item from shortcuts\n         *\n         * @param item\n         */\n        function removeShortcut(item)\n        {\n            // Update the hasShortcut status\n            item.hasShortcut = false;\n\n            // Remove the shortcut\n            for ( var x = 0; x < vm.shortcuts.length; x++ )\n            {\n                if ( vm.shortcuts[x]._id === item._id )\n                {\n                    // Remove the x-th item from the array\n                    vm.shortcuts.splice(x, 1);\n\n                    // If we aren't searching for anything...\n                    if ( !vm.query )\n                    {\n                        // If all the shortcuts have been removed,\n                        // null-ify the results\n                        if ( vm.shortcuts.length === 0 )\n                        {\n                            vm.results = null;\n                        }\n                        // Otherwise update the selected index\n                        else\n                        {\n                            if ( x >= vm.shortcuts.length )\n                            {\n                                vm.selectedResultIndex = vm.shortcuts.length - 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Save the shortcuts\n            vm.saveShortcuts();\n        }\n\n        /**\n         * Handle the result click\n         *\n         * @param item\n         */\n        function handleResultClick(item)\n        {\n            // Add or remove the shortcut\n            if ( item.hasShortcut )\n            {\n                vm.removeShortcut(item);\n            }\n            else\n            {\n                vm.addShortcut(item);\n            }\n        }\n\n        /**\n         * Absorb the given event\n         *\n         * @param event\n         */\n        function absorbEvent(event)\n        {\n            event.preventDefault();\n        }\n\n        /**\n         * Handle keydown\n         *\n         * @param event\n         */\n        function handleKeydown(event)\n        {\n            var keyCode = event.keyCode,\n                keys = [38, 40];\n\n            // Prevent the default action if\n            // one of the keys are pressed that\n            // we are listening\n            if ( keys.indexOf(keyCode) > -1 )\n            {\n                event.preventDefault();\n            }\n\n            switch ( keyCode )\n            {\n                // Enter\n                case 13:\n\n                    // Trigger result click\n                    vm.handleResultClick(vm.results[vm.selectedResultIndex]);\n\n                    break;\n\n                // Up Arrow\n                case 38:\n\n                    // Decrease the selected result index\n                    if ( vm.selectedResultIndex - 1 >= 0 )\n                    {\n                        // Decrease the selected index\n                        vm.selectedResultIndex--;\n\n                        // Make sure the selected result is in the view\n                        vm.ensureSelectedResultIsVisible();\n                    }\n\n                    break;\n\n                // Down Arrow\n                case 40:\n\n                    // Increase the selected result index\n                    if ( vm.selectedResultIndex + 1 < vm.results.length )\n                    {\n                        // Increase the selected index\n                        vm.selectedResultIndex++;\n\n                        // Make sure the selected result is in the view\n                        vm.ensureSelectedResultIsVisible();\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Handle mouseenter\n         *\n         * @param index\n         */\n        function handleMouseenter(index)\n        {\n            if ( vm.ignoreMouseEvents )\n            {\n                return;\n            }\n\n            // Update the selected result index\n            // with the given index\n            vm.selectedResultIndex = index;\n        }\n\n        /**\n         * Set a variable for a limited time\n         * to make other functions to ignore\n         * the mouse events\n         */\n        function temporarilyIgnoreMouseEvents()\n        {\n            // Set the variable\n            vm.ignoreMouseEvents = true;\n\n            // Cancel the previous timeout\n            $timeout.cancel(vm.mouseEventIgnoreTimeout);\n\n            // Set the timeout\n            vm.mouseEventIgnoreTimeout = $timeout(function ()\n            {\n                vm.ignoreMouseEvents = false;\n            }, 250);\n        }\n\n        /**\n         * Ensure the selected result will\n         * always be visible on the results\n         * area\n         */\n        function ensureSelectedResultIsVisible()\n        {\n            var resultsEl = $document.find('#ms-shortcut-add-menu').find('.results'),\n                selectedItemEl = angular.element(resultsEl.find('.result')[vm.selectedResultIndex]);\n\n            if ( resultsEl && selectedItemEl )\n            {\n                var top = selectedItemEl.position().top - 8,\n                    bottom = selectedItemEl.position().top + selectedItemEl.outerHeight() + 8;\n\n                // Start ignoring mouse events\n                vm.temporarilyIgnoreMouseEvents();\n\n                if ( resultsEl.scrollTop() > top )\n                {\n                    resultsEl.scrollTop(top);\n                }\n\n                if ( bottom > (resultsEl.height() + resultsEl.scrollTop()) )\n                {\n                    resultsEl.scrollTop(bottom - resultsEl.height());\n                }\n            }\n        }\n\n        /**\n         * Toggle mobile bar\n         */\n        function toggleMobileBar()\n        {\n            vm.mobileBarActive = !vm.mobileBarActive;\n        }\n    }\n\n    /** @ngInject */\n    function msShortcutsDirective()\n    {\n        return {\n            restrict        : 'E',\n            scope           : {},\n            require         : 'msShortcuts',\n            controller      : 'MsShortcutsController as MsShortcuts',\n            bindToController: {},\n            templateUrl     : 'app/core/directives/ms-shortcuts/ms-shortcuts.html',\n            compile         : function (tElement)\n            {\n                // Add class\n                tElement.addClass('ms-shortcuts');\n\n                return function postLink(scope, iElement)\n                {\n                    // Data\n\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsSearchBarController', MsSearchBarController)\n        .directive('msSearchBar', msSearchBarDirective);\n\n    /** @ngInject */\n    function MsSearchBarController($scope, $element, $timeout)\n    {\n        var vm = this;\n\n        // Data\n        vm.collapsed = true;\n        vm.query = '';\n        vm.queryOptions = {\n            debounce: vm.debounce || 0\n        };\n        vm.resultsLoading = false;\n        vm.results = null;\n        vm.selectedResultIndex = 0;\n        vm.ignoreMouseEvents = false;\n\n        // Methods\n        vm.populateResults = populateResults;\n\n        vm.expand = expand;\n        vm.collapse = collapse;\n\n        vm.absorbEvent = absorbEvent;\n        vm.handleKeydown = handleKeydown;\n        vm.handleMouseenter = handleMouseenter;\n        vm.temporarilyIgnoreMouseEvents = temporarilyIgnoreMouseEvents;\n        vm.handleResultClick = handleResultClick;\n        vm.ensureSelectedResultIsVisible = ensureSelectedResultIsVisible;\n\n        //////////\n\n        init();\n\n        function init()\n        {\n            // Watch the model changes to trigger the search\n            $scope.$watch('MsSearchBar.query', function (current, old)\n            {\n                if ( angular.isUndefined(current) )\n                {\n                    return;\n                }\n\n                if ( angular.equals(current, old) )\n                {\n                    return;\n                }\n\n                if ( vm.collapsed )\n                {\n                    return;\n                }\n\n                // Evaluate the onSearch function to access the\n                // function itself\n                var onSearchEvaluated = $scope.$parent.$eval(vm.onSearch, {query: current}),\n                    isArray = angular.isArray(onSearchEvaluated),\n                    isPromise = (onSearchEvaluated && !!onSearchEvaluated.then);\n\n                if ( isArray )\n                {\n                    // Populate the results\n                    vm.populateResults(onSearchEvaluated);\n                }\n\n                if ( isPromise )\n                {\n                    // Show the loader\n                    vm.resultsLoading = true;\n\n                    onSearchEvaluated.then(\n                        // Success\n                        function (response)\n                        {\n                            // Populate the results\n                            vm.populateResults(response);\n                        },\n                        // Error\n                        function ()\n                        {\n                            // Assign an empty array to show\n                            // the no-results screen\n                            vm.populateResults([]);\n                        }\n                    ).finally(function ()\n                        {\n                            // Hide the loader\n                            vm.resultsLoading = false;\n                        }\n                    );\n                }\n            });\n        }\n\n        /**\n         * Populate the results\n         *\n         * @param results\n         */\n        function populateResults(results)\n        {\n            // Before doing anything,\n            // make sure the search bar is expanded\n            if ( vm.collapsed )\n            {\n                return;\n            }\n\n            var isArray = angular.isArray(results),\n                isNull = results === null;\n\n            // Only accept arrays and null values\n            if ( !isArray && !isNull )\n            {\n                return;\n            }\n\n            // Reset the selected result\n            vm.selectedResultIndex = 0;\n\n            // Populate the results\n            vm.results = results;\n        }\n\n        /**\n         * Expand\n         */\n        function expand()\n        {\n            // Set collapsed status\n            vm.collapsed = false;\n\n            // Call expand on scope\n            $scope.expand();\n\n            // Callback\n            if ( vm.onExpand && angular.isFunction(vm.onExpand) )\n            {\n                vm.onExpand();\n            }\n        }\n\n        /**\n         * Collapse\n         */\n        function collapse()\n        {\n            // Empty the query\n            vm.query = '';\n\n            // Empty results to hide the results view\n            vm.populateResults(null);\n\n            // Set collapsed status\n            vm.collapsed = true;\n\n            // Call collapse on scope\n            $scope.collapse();\n\n            // Callback\n            if ( vm.onCollapse && angular.isFunction(vm.onCollapse) )\n            {\n                vm.onCollapse();\n            }\n        }\n\n        /**\n         * Absorb the given event\n         *\n         * @param event\n         */\n        function absorbEvent(event)\n        {\n            event.preventDefault();\n        }\n\n        /**\n         * Handle keydown\n         *\n         * @param event\n         */\n        function handleKeydown(event)\n        {\n            var keyCode = event.keyCode,\n                keys = [27, 38, 40];\n\n            // Prevent the default action if\n            // one of the keys are pressed that\n            // we are listening\n            if ( keys.indexOf(keyCode) > -1 )\n            {\n                event.preventDefault();\n            }\n\n            switch ( keyCode )\n            {\n                // Enter\n                case 13:\n\n                    // Trigger result click\n                    vm.handleResultClick(vm.results[vm.selectedResultIndex]);\n\n                    break;\n\n                // Escape\n                case 27:\n\n                    // Collapse the search bar\n                    vm.collapse();\n\n                    break;\n\n                // Up Arrow\n                case 38:\n\n                    // Decrease the selected result index\n                    if ( vm.selectedResultIndex - 1 >= 0 )\n                    {\n                        // Decrease the selected index\n                        vm.selectedResultIndex--;\n\n                        // Make sure the selected result is in the view\n                        vm.ensureSelectedResultIsVisible();\n                    }\n\n                    break;\n\n                // Down Arrow\n                case 40:\n\n                    if ( !vm.results )\n                    {\n                        return;\n                    }\n\n                    // Increase the selected result index\n                    if ( vm.selectedResultIndex + 1 < vm.results.length )\n                    {\n                        // Increase the selected index\n                        vm.selectedResultIndex++;\n\n                        // Make sure the selected result is in the view\n                        vm.ensureSelectedResultIsVisible();\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Handle mouseenter\n         *\n         * @param index\n         */\n        function handleMouseenter(index)\n        {\n            if ( vm.ignoreMouseEvents )\n            {\n                return;\n            }\n\n            // Update the selected result index\n            // with the given index\n            vm.selectedResultIndex = index;\n        }\n\n        /**\n         * Set a variable for a limited time\n         * to make other functions to ignore\n         * the mouse events\n         */\n        function temporarilyIgnoreMouseEvents()\n        {\n            // Set the variable\n            vm.ignoreMouseEvents = true;\n\n            // Cancel the previous timeout\n            $timeout.cancel(vm.mouseEventIgnoreTimeout);\n\n            // Set the timeout\n            vm.mouseEventIgnoreTimeout = $timeout(function ()\n            {\n                vm.ignoreMouseEvents = false;\n            }, 250);\n        }\n\n        /**\n         * Handle the result click\n         *\n         * @param item\n         */\n        function handleResultClick(item)\n        {\n            if ( vm.onResultClick )\n            {\n                vm.onResultClick({item: item});\n            }\n\n            // Collapse the search bar\n            vm.collapse();\n        }\n\n        /**\n         * Ensure the selected result will\n         * always be visible on the results\n         * area\n         */\n        function ensureSelectedResultIsVisible()\n        {\n            var resultsEl = $element.find('.ms-search-bar-results'),\n                selectedItemEl = angular.element(resultsEl.find('.result')[vm.selectedResultIndex]);\n\n            if ( resultsEl && selectedItemEl )\n            {\n                var top = selectedItemEl.position().top - 8,\n                    bottom = selectedItemEl.position().top + selectedItemEl.outerHeight() + 8;\n\n                // Start ignoring mouse events\n                vm.temporarilyIgnoreMouseEvents();\n\n                if ( resultsEl.scrollTop() > top )\n                {\n                    resultsEl.scrollTop(top);\n                }\n\n                if ( bottom > (resultsEl.height() + resultsEl.scrollTop()) )\n                {\n                    resultsEl.scrollTop(bottom - resultsEl.height());\n                }\n            }\n        }\n    }\n\n    /** @ngInject */\n    function msSearchBarDirective($document)\n    {\n        return {\n            restrict        : 'E',\n            scope           : {},\n            require         : 'msSearchBar',\n            controller      : 'MsSearchBarController as MsSearchBar',\n            bindToController: {\n                debounce     : '=?',\n                onSearch     : '@',\n                onResultClick: '&?',\n                onExpand     : '&?',\n                onCollapse   : '&?'\n            },\n            templateUrl     : 'app/core/directives/ms-search-bar/ms-search-bar.html',\n            compile         : function (tElement)\n            {\n                // Add class\n                tElement.addClass('ms-search-bar');\n\n                return function postLink(scope, iElement)\n                {\n                    // Data\n                    var inputEl,\n                        bodyEl = $document.find('body');\n\n                    // Methods\n                    scope.collapse = collapse;\n                    scope.expand = expand;\n\n                    //////////\n\n                    // Initialize\n                    init();\n\n                    /**\n                     * Initialize\n                     */\n                    function init()\n                    {\n                        // Grab the input element\n                        inputEl = iElement.find('#ms-search-bar-input');\n                    }\n\n                    /**\n                     * Expand action\n                     */\n                    function expand()\n                    {\n                        // Add expanded class\n                        iElement.addClass('expanded');\n\n                        // Add helper class to the body\n                        bodyEl.addClass('ms-search-bar-expanded');\n\n                        // Focus on the input\n                        inputEl.focus();\n                    }\n\n                    /**\n                     * Collapse action\n                     */\n                    function collapse()\n                    {\n                        // Remove expanded class\n                        iElement.removeClass('expanded');\n\n                        // Remove helper class from the body\n                        bodyEl.removeClass('ms-search-bar-expanded');\n                    }\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .provider('msScrollConfig', msScrollConfigProvider)\n        .directive('msScroll', msScrollDirective);\n\n    /** @ngInject */\n    function msScrollConfigProvider()\n    {\n        // Default configuration\n        var defaultConfiguration = {\n            wheelSpeed            : 1,\n            wheelPropagation      : false,\n            swipePropagation      : true,\n            minScrollbarLength    : null,\n            maxScrollbarLength    : null,\n            useBothWheelAxes      : false,\n            useKeyboard           : true,\n            suppressScrollX       : false,\n            suppressScrollY       : false,\n            scrollXMarginOffset   : 0,\n            scrollYMarginOffset   : 0,\n            stopPropagationOnClick: true\n        };\n\n        // Methods\n        this.config = config;\n\n        //////////\n\n        /**\n         * Extend default configuration with the given one\n         *\n         * @param configuration\n         */\n        function config(configuration)\n        {\n            defaultConfiguration = angular.extend({}, defaultConfiguration, configuration);\n        }\n\n        /**\n         * Service\n         */\n        this.$get = function ()\n        {\n            var service = {\n                getConfig: getConfig\n            };\n\n            return service;\n\n            //////////\n\n            /**\n             * Return the config\n             */\n            function getConfig()\n            {\n                return defaultConfiguration;\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msScrollDirective($timeout, msScrollConfig, msUtils, fuseConfig)\n    {\n        return {\n            restrict: 'AE',\n            compile : function (tElement)\n            {\n                // Do not replace scrollbars if\n                // 'disableCustomScrollbars' config enabled\n                if ( fuseConfig.getConfig('disableCustomScrollbars') )\n                {\n                    return;\n                }\n\n                // Do not replace scrollbars on mobile devices\n                // if 'disableCustomScrollbarsOnMobile' config enabled\n                if ( fuseConfig.getConfig('disableCustomScrollbarsOnMobile') && msUtils.isMobile() )\n                {\n                    return;\n                }\n\n                // Add class\n                tElement.addClass('ms-scroll');\n\n                return function postLink(scope, iElement, iAttrs)\n                {\n                    var options = {};\n\n                    // If options supplied, evaluate the given\n                    // value. This is because we don't want to\n                    // have an isolated scope but still be able\n                    // to use scope variables.\n                    // We don't want an isolated scope because\n                    // we should be able to use this everywhere\n                    // especially with other directives\n                    if ( iAttrs.msScroll )\n                    {\n                        options = scope.$eval(iAttrs.msScroll);\n                    }\n\n                    // Extend the given config with the ones from provider\n                    options = angular.extend({}, msScrollConfig.getConfig(), options);\n\n                    // Initialize the scrollbar\n                    $timeout(function ()\n                    {\n                        PerfectScrollbar.initialize(iElement[0], options);\n                    }, 0);\n\n                    // Update the scrollbar on element mouseenter\n                    iElement.on('mouseenter', updateScrollbar);\n\n                    // Watch scrollHeight and update\n                    // the scrollbar if it changes\n                    scope.$watch(function ()\n                    {\n                        return iElement.prop('scrollHeight');\n                    }, function (current, old)\n                    {\n                        if ( angular.isUndefined(current) || angular.equals(current, old) )\n                        {\n                            return;\n                        }\n\n                        updateScrollbar();\n                    });\n\n                    // Watch scrollWidth and update\n                    // the scrollbar if it changes\n                    scope.$watch(function ()\n                    {\n                        return iElement.prop('scrollWidth');\n                    }, function (current, old)\n                    {\n                        if ( angular.isUndefined(current) || angular.equals(current, old) )\n                        {\n                            return;\n                        }\n\n                        updateScrollbar();\n                    });\n\n                    /**\n                     * Update the scrollbar\n                     */\n                    function updateScrollbar()\n                    {\n                        PerfectScrollbar.update(iElement[0]);\n                    }\n\n                    // Cleanup on destroy\n                    scope.$on('$destroy', function ()\n                    {\n                        iElement.off('mouseenter');\n                        PerfectScrollbar.destroy(iElement[0]);\n                    });\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('msResponsiveTable', msResponsiveTableDirective);\n\n    /** @ngInject */\n    function msResponsiveTableDirective()\n    {\n        return {\n            restrict: 'A',\n            link    : function (scope, iElement)\n            {\n                // Wrap the table\n                var wrapper = angular.element('<div class=\"ms-responsive-table-wrapper\"></div>');\n                iElement.after(wrapper);\n                wrapper.append(iElement);\n\n                //////////\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('msRandomClass', msRandomClassDirective);\n\n    /** @ngInject */\n    function msRandomClassDirective()\n    {\n        return {\n            restrict: 'A',\n            scope   : {\n                msRandomClass: '='\n            },\n            link    : function (scope, iElement)\n            {\n                var randomClass = scope.msRandomClass[Math.floor(Math.random() * (scope.msRandomClass.length))];\n                iElement.addClass(randomClass);\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .provider('msNavigationService', msNavigationServiceProvider)\n        .controller('MsNavigationController', MsNavigationController)\n        // Vertical\n        .directive('msNavigation', msNavigationDirective)\n        .controller('MsNavigationNodeController', MsNavigationNodeController)\n        .directive('msNavigationNode', msNavigationNodeDirective)\n        .directive('msNavigationItem', msNavigationItemDirective)\n        //Horizontal\n        .directive('msNavigationHorizontal', msNavigationHorizontalDirective)\n        .controller('MsNavigationHorizontalNodeController', MsNavigationHorizontalNodeController)\n        .directive('msNavigationHorizontalNode', msNavigationHorizontalNodeDirective)\n        .directive('msNavigationHorizontalItem', msNavigationHorizontalItemDirective);\n\n    /** @ngInject */\n    function msNavigationServiceProvider()\n    {\n        // Inject $log service\n        var $log = angular.injector(['ng']).get('$log');\n\n        // Navigation array\n        var navigation = [];\n\n        var service = this;\n\n        // Methods\n        service.saveItem = saveItem;\n        service.deleteItem = deleteItem;\n        service.sortByWeight = sortByWeight;\n\n        //////////\n\n        /**\n         * Create or update the navigation item\n         *\n         * @param path\n         * @param item\n         */\n        function saveItem(path, item)\n        {\n            if ( !angular.isString(path) )\n            {\n                $log.error('path must be a string (eg. `dashboard.project`)');\n                return;\n            }\n\n            var parts = path.split('.');\n\n            // Generate the object id from the parts\n            var id = parts[parts.length - 1];\n\n            // Get the parent item from the parts\n            var parent = _findOrCreateParent(parts);\n\n            // Decide if we are going to update or create\n            var updateItem = false;\n\n            for ( var i = 0; i < parent.length; i++ )\n            {\n                if ( parent[i]._id === id )\n                {\n                    updateItem = parent[i];\n\n                    break;\n                }\n            }\n\n            // Update\n            if ( updateItem )\n            {\n                angular.extend(updateItem, item);\n\n                // Add proper ui-sref\n                updateItem.uisref = _getUiSref(updateItem);\n            }\n            // Create\n            else\n            {\n                // Create an empty children array in the item\n                item.children = [];\n\n                // Add the default weight if not provided or if it's not a number\n                if ( angular.isUndefined(item.weight) || !angular.isNumber(item.weight) )\n                {\n                    item.weight = 1;\n                }\n\n                // Add the item id\n                item._id = id;\n\n                // Add the item path\n                item._path = path;\n\n                // Add proper ui-sref\n                item.uisref = _getUiSref(item);\n\n                // Push the item into the array\n                parent.push(item);\n            }\n        }\n\n        /**\n         * Delete navigation item\n         *\n         * @param path\n         */\n        function deleteItem(path)\n        {\n            if ( !angular.isString(path) )\n            {\n                $log.error('path must be a string (eg. `dashboard.project`)');\n                return;\n            }\n\n            // Locate the item by using given path\n            var item = navigation,\n                parts = path.split('.');\n\n            for ( var p = 0; p < parts.length; p++ )\n            {\n                var id = parts[p];\n\n                for ( var i = 0; i < item.length; i++ )\n                {\n                    if ( item[i]._id === id )\n                    {\n                        // If we have a matching path,\n                        // we have found our object:\n                        // remove it.\n                        if ( item[i]._path === path )\n                        {\n                            item.splice(i, 1);\n                            return true;\n                        }\n\n                        // Otherwise grab the children of\n                        // the current item and continue\n                        item = item[i].children;\n                        break;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Sort the navigation items by their weights\n         *\n         * @param parent\n         */\n        function sortByWeight(parent)\n        {\n            // If parent not provided, sort the root items\n            if ( !parent )\n            {\n                parent = navigation;\n                parent.sort(_byWeight);\n            }\n\n            // Sort the children\n            for ( var i = 0; i < parent.length; i++ )\n            {\n                var children = parent[i].children;\n\n                if ( children.length > 1 )\n                {\n                    children.sort(_byWeight);\n                }\n\n                if ( children.length > 0 )\n                {\n                    sortByWeight(children);\n                }\n            }\n        }\n\n        /* ----------------- */\n        /* Private Functions */\n        /* ----------------- */\n\n        /**\n         * Find or create parent\n         *\n         * @param parts\n         * @returns {Array|Boolean}\n         * @private\n         */\n        function _findOrCreateParent(parts)\n        {\n            // Store the main navigation\n            var parent = navigation;\n\n            // If it's going to be a root item\n            // return the navigation itself\n            if ( parts.length === 1 )\n            {\n                return parent;\n            }\n\n            // Remove the last element from the parts as\n            // we don't need that to figure out the parent\n            parts.pop();\n\n            // Find and return the parent\n            for ( var i = 0; i < parts.length; i++ )\n            {\n                var _id = parts[i],\n                    createParent = true;\n\n                for ( var p = 0; p < parent.length; p++ )\n                {\n                    if ( parent[p]._id === _id )\n                    {\n                        parent = parent[p].children;\n                        createParent = false;\n\n                        break;\n                    }\n                }\n\n                // If there is no parent found, create one, push\n                // it into the current parent and assign it as a\n                // new parent\n                if ( createParent )\n                {\n                    var item = {\n                        _id     : _id,\n                        _path   : parts.join('.'),\n                        title   : _id,\n                        weight  : 1,\n                        children: []\n                    };\n\n                    parent.push(item);\n                    parent = item.children;\n                }\n            }\n\n            return parent;\n        }\n\n        /**\n         * Sort by weight\n         *\n         * @param x\n         * @param y\n         * @returns {number}\n         * @private\n         */\n        function _byWeight(x, y)\n        {\n            return parseInt(x.weight) - parseInt(y.weight);\n        }\n\n        /**\n         * Setup the ui-sref using state & state parameters\n         *\n         * @param item\n         * @returns {string}\n         * @private\n         */\n        function _getUiSref(item)\n        {\n            var uisref = '';\n\n            if ( angular.isDefined(item.state) )\n            {\n                uisref = item.state;\n\n                if ( angular.isDefined(item.stateParams) && angular.isObject(item.stateParams) )\n                {\n                    uisref = uisref + '(' + angular.toJson(item.stateParams) + ')';\n                }\n            }\n\n            return uisref;\n        }\n\n        /* ----------------- */\n        /* Service           */\n        /* ----------------- */\n\n        this.$get = function ()\n        {\n            var activeItem = null,\n                navigationScope = null,\n                folded = null,\n                foldedOpen = null;\n\n            var service = {\n                saveItem          : saveItem,\n                deleteItem        : deleteItem,\n                sort              : sortByWeight,\n                clearNavigation   : clearNavigation,\n                setActiveItem     : setActiveItem,\n                getActiveItem     : getActiveItem,\n                getNavigation     : getNavigation,\n                getFlatNavigation : getFlatNavigation,\n                setNavigationScope: setNavigationScope,\n                setFolded         : setFolded,\n                getFolded         : getFolded,\n                setFoldedOpen     : setFoldedOpen,\n                getFoldedOpen     : getFoldedOpen,\n                toggleFolded      : toggleFolded\n            };\n\n            return service;\n\n            //////////\n\n            /**\n             * Clear the entire navigation\n             */\n            function clearNavigation()\n            {\n                // Clear the navigation array\n                navigation = [];\n\n                // Clear the vm.navigation from main controller\n                if ( navigationScope )\n                {\n                    navigationScope.vm.navigation = navigation;\n                }\n            }\n\n            /**\n             * Set active item\n             *\n             * @param node\n             * @param scope\n             */\n            function setActiveItem(node, scope)\n            {\n                activeItem = {\n                    node : node,\n                    scope: scope\n                };\n            }\n\n            /**\n             * Return active item\n             */\n            function getActiveItem()\n            {\n                return activeItem;\n            }\n\n            /**\n             * Return navigation array\n             *\n             * @param root\n             * @returns Array\n             */\n            function getNavigation(root)\n            {\n                if ( root )\n                {\n                    for ( var i = 0; i < navigation.length; i++ )\n                    {\n                        if ( navigation[i]._id === root )\n                        {\n                            return [navigation[i]];\n                        }\n                    }\n\n                    return null;\n                }\n\n                return navigation;\n            }\n\n            /**\n             * Return flat navigation array\n             *\n             * @param root\n             * @returns Array\n             */\n            function getFlatNavigation(root)\n            {\n                // Get the correct navigation array\n                var navigation = getNavigation(root);\n\n                // Flatten the navigation object\n                return _flattenNavigation(navigation);\n            }\n\n            /**\n             * Store navigation's scope for later use\n             *\n             * @param scope\n             */\n            function setNavigationScope(scope)\n            {\n                navigationScope = scope;\n            }\n\n            /**\n             * Set folded status\n             *\n             * @param status\n             */\n            function setFolded(status)\n            {\n                folded = status;\n            }\n\n            /**\n             * Return folded status\n             *\n             * @returns {*}\n             */\n            function getFolded()\n            {\n                return folded;\n            }\n\n            /**\n             * Set folded open status\n             *\n             * @param status\n             */\n            function setFoldedOpen(status)\n            {\n                foldedOpen = status;\n            }\n\n            /**\n             * Return folded open status\n             *\n             * @returns {*}\n             */\n            function getFoldedOpen()\n            {\n                return foldedOpen;\n            }\n\n\n            /**\n             * Toggle fold on stored navigation's scope\n             */\n            function toggleFolded()\n            {\n                navigationScope.toggleFolded();\n            }\n\n            /**\n             * Flatten the given navigation\n             *\n             * @param navigation\n             * @private\n             */\n            function _flattenNavigation(navigation)\n            {\n                var flatNav = [];\n\n                for ( var x = 0; x < navigation.length; x++ )\n                {\n                    // Copy and clear the children of the\n                    // navigation that we want to push\n                    var navToPush = angular.copy(navigation[x]);\n                    navToPush.children = [];\n\n                    // Push the item\n                    flatNav.push(navToPush);\n\n                    // If there are child items in this navigation,\n                    // do some nested function magic\n                    if ( navigation[x].children.length > 0 )\n                    {\n                        flatNav = flatNav.concat(_flattenNavigation(navigation[x].children));\n                    }\n                }\n\n                return flatNav;\n            }\n        };\n    }\n\n    /** @ngInject */\n    function MsNavigationController($scope, msNavigationService)\n    {\n        var vm = this;\n\n        // Data\n        if ( $scope.root )\n        {\n            vm.navigation = msNavigationService.getNavigation($scope.root);\n        }\n        else\n        {\n            vm.navigation = msNavigationService.getNavigation();\n        }\n\n        // Methods\n        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init()\n        {\n            // Sort the navigation before doing anything else\n            msNavigationService.sort();\n        }\n\n        /**\n         * Toggle horizontal mobile menu\n         */\n        function toggleHorizontalMobileMenu()\n        {\n            angular.element('body').toggleClass('ms-navigation-horizontal-mobile-menu-active');\n        }\n    }\n\n    /** @ngInject */\n    function msNavigationDirective($rootScope, $timeout, $mdSidenav, msNavigationService)\n    {\n        return {\n            restrict   : 'E',\n            scope      : {\n                folded: '=',\n                root  : '@'\n            },\n            controller : 'MsNavigationController as vm',\n            templateUrl: 'app/core/directives/ms-navigation/templates/vertical.html',\n            transclude : true,\n            compile    : function (tElement)\n            {\n                tElement.addClass('ms-navigation');\n\n                return function postLink(scope, iElement)\n                {\n                    var bodyEl = angular.element('body'),\n                        foldExpanderEl = angular.element('<div id=\"ms-navigation-fold-expander\"></div>'),\n                        foldCollapserEl = angular.element('<div id=\"ms-navigation-fold-collapser\"></div>'),\n                        sidenav = $mdSidenav('navigation');\n\n                    // Store the navigation in the service for public access\n                    msNavigationService.setNavigationScope(scope);\n\n                    // Initialize\n                    init();\n\n                    /**\n                     * Initialize\n                     */\n                    function init()\n                    {\n                        // Set the folded status for the first time.\n                        // First, we have to check if we have a folded\n                        // status available in the service already. This\n                        // will prevent navigation to act weird if we already\n                        // set the fold status, remove the navigation and\n                        // then re-initialize it, which happens if we\n                        // change to a view without a navigation and then\n                        // come back with history.back() function.\n\n                        // If the service didn't initialize before, set\n                        // the folded status from scope, otherwise we\n                        // won't touch anything because the folded status\n                        // already set in the service...\n                        if ( msNavigationService.getFolded() === null )\n                        {\n                            msNavigationService.setFolded(scope.folded);\n                        }\n\n                        if ( msNavigationService.getFolded() )\n                        {\n                            // Collapse everything.\n                            // This must be inside a $timeout because by the\n                            // time we call this, the 'msNavigation::collapse'\n                            // event listener is not registered yet. $timeout\n                            // will ensure that it will be called after it is\n                            // registered.\n                            $timeout(function ()\n                            {\n                                $rootScope.$broadcast('msNavigation::collapse');\n                            });\n\n                            // Add class to the body\n                            bodyEl.addClass('ms-navigation-folded');\n\n                            // Set fold expander\n                            setFoldExpander();\n                        }\n                    }\n\n                    // Sidenav locked open status watcher\n                    scope.$watch(function ()\n                    {\n                        return sidenav.isLockedOpen();\n                    }, function (current, old)\n                    {\n                        if ( angular.isUndefined(current) || angular.equals(current, old) )\n                        {\n                            return;\n                        }\n\n                        var folded = msNavigationService.getFolded();\n\n                        if ( folded )\n                        {\n                            if ( current )\n                            {\n                                // Collapse everything\n                                $rootScope.$broadcast('msNavigation::collapse');\n                            }\n                            else\n                            {\n                                // Expand the active one and its parents\n                                var activeItem = msNavigationService.getActiveItem();\n                                if ( activeItem )\n                                {\n                                    activeItem.scope.$emit('msNavigation::stateMatched');\n                                }\n                            }\n                        }\n                    });\n\n                    // Folded status watcher\n                    scope.$watch('folded', function (current, old)\n                    {\n                        if ( angular.isUndefined(current) || angular.equals(current, old) )\n                        {\n                            return;\n                        }\n\n                        setFolded(current);\n                    });\n\n                    /**\n                     * Set folded status\n                     *\n                     * @param folded\n                     */\n                    function setFolded(folded)\n                    {\n                        // Store folded status on the service for global access\n                        msNavigationService.setFolded(folded);\n\n                        if ( folded )\n                        {\n                            // Collapse everything\n                            $rootScope.$broadcast('msNavigation::collapse');\n\n                            // Add class to the body\n                            bodyEl.addClass('ms-navigation-folded');\n\n                            // Set fold expander\n                            setFoldExpander();\n                        }\n                        else\n                        {\n                            // Expand the active one and its parents\n                            var activeItem = msNavigationService.getActiveItem();\n                            if ( activeItem )\n                            {\n                                activeItem.scope.$emit('msNavigation::stateMatched');\n                            }\n\n                            // Remove body class\n                            bodyEl.removeClass('ms-navigation-folded ms-navigation-folded-open');\n\n                            // Remove fold collapser\n                            removeFoldCollapser();\n                        }\n                    }\n\n                    /**\n                     * Set fold expander\n                     */\n                    function setFoldExpander()\n                    {\n                        iElement.parent().append(foldExpanderEl);\n\n                        // Let everything settle for a moment\n                        // before registering the event listener\n                        $timeout(function ()\n                        {\n                            foldExpanderEl.on('mouseenter touchstart', onFoldExpanderHover);\n                        });\n                    }\n\n                    /**\n                     * Set fold collapser\n                     */\n                    function setFoldCollapser()\n                    {\n                        bodyEl.find('#main').append(foldCollapserEl);\n                        foldCollapserEl.on('mouseenter touchstart', onFoldCollapserHover);\n                    }\n\n                    /**\n                     * Remove fold collapser\n                     */\n                    function removeFoldCollapser()\n                    {\n                        foldCollapserEl.remove();\n                    }\n\n                    /**\n                     * onHover event of foldExpander\n                     */\n                    function onFoldExpanderHover(event)\n                    {\n                        if ( event )\n                        {\n                            event.preventDefault();\n                        }\n\n                        // Set folded open status\n                        msNavigationService.setFoldedOpen(true);\n\n                        // Expand the active one and its parents\n                        var activeItem = msNavigationService.getActiveItem();\n                        if ( activeItem )\n                        {\n                            activeItem.scope.$emit('msNavigation::stateMatched');\n                        }\n\n                        // Add class to the body\n                        bodyEl.addClass('ms-navigation-folded-open');\n\n                        // Remove the fold opener\n                        foldExpanderEl.remove();\n\n                        // Set fold collapser\n                        setFoldCollapser();\n                    }\n\n                    /**\n                     * onHover event of foldCollapser\n                     */\n                    function onFoldCollapserHover(event)\n                    {\n                        if ( event )\n                        {\n                            event.preventDefault();\n                        }\n\n                        // Set folded open status\n                        msNavigationService.setFoldedOpen(false);\n\n                        // Collapse everything\n                        $rootScope.$broadcast('msNavigation::collapse');\n\n                        // Remove body class\n                        bodyEl.removeClass('ms-navigation-folded-open');\n\n                        // Remove the fold collapser\n                        foldCollapserEl.remove();\n\n                        // Set fold expander\n                        setFoldExpander();\n                    }\n\n                    /**\n                     * Public access for toggling folded status externally\n                     */\n                    scope.toggleFolded = function ()\n                    {\n                        var folded = msNavigationService.getFolded();\n\n                        setFolded(!folded);\n                    };\n\n                    /**\n                     * On $stateChangeStart\n                     */\n                    scope.$on('$stateChangeStart', function ()\n                    {\n                        // Close the sidenav\n                        sidenav.close();\n                    });\n\n                    // Cleanup\n                    scope.$on('$destroy', function ()\n                    {\n                        foldCollapserEl.off('mouseenter touchstart');\n                        foldExpanderEl.off('mouseenter touchstart');\n                    });\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function MsNavigationNodeController($scope, $element, $rootScope, $animate, $state, msNavigationService)\n    {\n        var vm = this;\n\n        // Data\n        vm.element = $element;\n        vm.node = $scope.node;\n        vm.hasChildren = undefined;\n        vm.collapsed = undefined;\n        vm.collapsable = undefined;\n        vm.group = undefined;\n        vm.animateHeightClass = 'animate-height';\n\n        // Methods\n        vm.toggleCollapsed = toggleCollapsed;\n        vm.collapse = collapse;\n        vm.expand = expand;\n        vm.getClass = getClass;\n        vm.isHidden = isHidden;\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init()\n        {\n            // Setup the initial values\n\n            // Has children?\n            vm.hasChildren = vm.node.children.length > 0;\n\n            // Is group?\n            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);\n\n            // Is collapsable?\n            if ( !vm.hasChildren || vm.group )\n            {\n                vm.collapsable = false;\n            }\n            else\n            {\n                vm.collapsable = !!(angular.isUndefined(vm.node.collapsable) || typeof vm.node.collapsable !== 'boolean' || vm.node.collapsable === true);\n            }\n\n            // Is collapsed?\n            if ( !vm.collapsable )\n            {\n                vm.collapsed = false;\n            }\n            else\n            {\n                vm.collapsed = !!(angular.isUndefined(vm.node.collapsed) || typeof vm.node.collapsed !== 'boolean' || vm.node.collapsed === true);\n            }\n\n            // Expand all parents if we have a matching state or\n            // the current state is a child of the node's state\n            if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )\n            {\n                // If state params are defined, make sure they are\n                // equal, otherwise do not set the active item\n                if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )\n                {\n                    return;\n                }\n\n                $scope.$emit('msNavigation::stateMatched');\n\n                // Also store the current active menu item\n                msNavigationService.setActiveItem(vm.node, $scope);\n            }\n\n            $scope.$on('msNavigation::stateMatched', function ()\n            {\n                // Expand if the current scope is collapsable and is collapsed\n                if ( vm.collapsable && vm.collapsed )\n                {\n                    $scope.$evalAsync(function ()\n                    {\n                        vm.collapsed = false;\n                    });\n                }\n            });\n\n            // Listen for collapse event\n            $scope.$on('msNavigation::collapse', function (event, path)\n            {\n                if ( vm.collapsed || !vm.collapsable )\n                {\n                    return;\n                }\n\n                // If there is no path defined, collapse\n                if ( angular.isUndefined(path) )\n                {\n                    vm.collapse();\n                }\n                // If there is a path defined, do not collapse\n                // the items that are inside that path. This will\n                // prevent parent items from collapsing\n                else\n                {\n                    var givenPathParts = path.split('.'),\n                        activePathParts = [];\n\n                    var activeItem = msNavigationService.getActiveItem();\n                    if ( activeItem )\n                    {\n                        activePathParts = activeItem.node._path.split('.');\n                    }\n\n                    // Test for given path\n                    if ( givenPathParts.indexOf(vm.node._id) > -1 )\n                    {\n                        return;\n                    }\n\n                    // Test for active path\n                    if ( activePathParts.indexOf(vm.node._id) > -1 )\n                    {\n                        return;\n                    }\n\n                    vm.collapse();\n                }\n            });\n\n            // Listen for $stateChangeSuccess event\n            $scope.$on('$stateChangeSuccess', function ()\n            {\n                if ( vm.node.state === $state.current.name )\n                {\n                    // If state params are defined, make sure they are\n                    // equal, otherwise do not set the active item\n                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )\n                    {\n                        return;\n                    }\n\n                    // Update active item on state change\n                    msNavigationService.setActiveItem(vm.node, $scope);\n\n                    // Collapse everything except the one we're using\n                    $rootScope.$broadcast('msNavigation::collapse', vm.node._path);\n                }\n\n                // Expand the parents if we the current\n                // state is a child of the node's state\n                if ( $state.includes(vm.node.state) )\n                {\n                    // If state params are defined, make sure they are\n                    // equal, otherwise do not set the active item\n                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )\n                    {\n                        return;\n                    }\n\n                    // Emit the stateMatched\n                    $scope.$emit('msNavigation::stateMatched');\n                }\n            });\n        }\n\n        /**\n         * Toggle collapsed\n         */\n        function toggleCollapsed()\n        {\n            if ( vm.collapsed )\n            {\n                vm.expand();\n            }\n            else\n            {\n                vm.collapse();\n            }\n        }\n\n        /**\n         * Collapse\n         */\n        function collapse()\n        {\n            // Grab the element that we are going to collapse\n            var collapseEl = vm.element.children('ul');\n\n            // Grab the height\n            var height = collapseEl[0].offsetHeight;\n\n            $scope.$evalAsync(function ()\n            {\n                // Set collapsed status\n                vm.collapsed = true;\n\n                // Add collapsing class to the node\n                vm.element.addClass('collapsing');\n\n                // Animate the height\n                $animate.animate(collapseEl,\n                    {\n                        'display': 'block',\n                        'height' : height + 'px'\n                    },\n                    {\n                        'height': '0px'\n                    },\n                    vm.animateHeightClass\n                ).then(\n                    function ()\n                    {\n                        // Clear the inline styles after animation done\n                        collapseEl.css({\n                            'display': '',\n                            'height' : ''\n                        });\n\n                        // Clear collapsing class from the node\n                        vm.element.removeClass('collapsing');\n                    }\n                );\n\n                // Broadcast the collapse event so child items can also be collapsed\n                $scope.$broadcast('msNavigation::collapse');\n            });\n        }\n\n        /**\n         * Expand\n         */\n        function expand()\n        {\n            // Grab the element that we are going to expand\n            var expandEl = vm.element.children('ul');\n\n            // Move the element out of the dom flow and\n            // make it block so we can get its height\n            expandEl.css({\n                'position'  : 'absolute',\n                'visibility': 'hidden',\n                'display'   : 'block',\n                'height'    : 'auto'\n            });\n\n            // Grab the height\n            var height = expandEl[0].offsetHeight;\n\n            // Reset the style modifications\n            expandEl.css({\n                'position'  : '',\n                'visibility': '',\n                'display'   : '',\n                'height'    : ''\n            });\n\n            $scope.$evalAsync(function ()\n            {\n                // Set collapsed status\n                vm.collapsed = false;\n\n                // Add expanding class to the node\n                vm.element.addClass('expanding');\n\n                // Animate the height\n                $animate.animate(expandEl,\n                    {\n                        'display': 'block',\n                        'height' : '0px'\n                    },\n                    {\n                        'height': height + 'px'\n                    },\n                    vm.animateHeightClass\n                ).then(\n                    function ()\n                    {\n                        // Clear the inline styles after animation done\n                        expandEl.css({\n                            'height': ''\n                        });\n\n                        // Clear expanding class from the node\n                        vm.element.removeClass('expanding');\n                    }\n                );\n\n                // If item expanded, broadcast the collapse event from rootScope so that the other expanded items\n                // can be collapsed. This is necessary for keeping only one parent expanded at any time\n                $rootScope.$broadcast('msNavigation::collapse', vm.node._path);\n            });\n        }\n\n        /**\n         * Return the class\n         *\n         * @returns {*}\n         */\n        function getClass()\n        {\n            return vm.node.class;\n        }\n\n        /**\n         * Check if node should be hidden\n         *\n         * @returns {boolean}\n         */\n        function isHidden()\n        {\n            if ( angular.isDefined(vm.node.hidden) && angular.isFunction(vm.node.hidden) )\n            {\n                return vm.node.hidden();\n            }\n\n            return false;\n        }\n    }\n\n    /** @ngInject */\n    function msNavigationNodeDirective()\n    {\n        return {\n            restrict        : 'A',\n            bindToController: {\n                node: '=msNavigationNode'\n            },\n            controller      : 'MsNavigationNodeController as vm',\n            compile         : function (tElement)\n            {\n                tElement.addClass('ms-navigation-node');\n\n                return function postLink(scope, iElement, iAttrs, MsNavigationNodeCtrl)\n                {\n                    // Add custom classes\n                    iElement.addClass(MsNavigationNodeCtrl.getClass());\n\n                    // Add group class if it's a group\n                    if ( MsNavigationNodeCtrl.group )\n                    {\n                        iElement.addClass('group');\n                    }\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msNavigationItemDirective()\n    {\n        return {\n            restrict: 'A',\n            require : '^msNavigationNode',\n            compile : function (tElement)\n            {\n                tElement.addClass('ms-navigation-item');\n\n                return function postLink(scope, iElement, iAttrs, MsNavigationNodeCtrl)\n                {\n                    // If the item is collapsable...\n                    if ( MsNavigationNodeCtrl.collapsable )\n                    {\n                        iElement.on('click', MsNavigationNodeCtrl.toggleCollapsed);\n                    }\n\n                    // Cleanup\n                    scope.$on('$destroy', function ()\n                    {\n                        iElement.off('click');\n                    });\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msNavigationHorizontalDirective(msNavigationService)\n    {\n        return {\n            restrict   : 'E',\n            scope      : {\n                root: '@'\n            },\n            controller : 'MsNavigationController as vm',\n            templateUrl: 'app/core/directives/ms-navigation/templates/horizontal.html',\n            transclude : true,\n            compile    : function (tElement)\n            {\n                tElement.addClass('ms-navigation-horizontal');\n\n                return function postLink(scope)\n                {\n                    // Store the navigation in the service for public access\n                    msNavigationService.setNavigationScope(scope);\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function MsNavigationHorizontalNodeController($scope, $element, $rootScope, $state, msNavigationService)\n    {\n        var vm = this;\n\n        // Data\n        vm.element = $element;\n        vm.node = $scope.node;\n        vm.hasChildren = undefined;\n        vm.group = undefined;\n\n        // Methods\n        vm.getClass = getClass;\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init()\n        {\n            // Setup the initial values\n\n            // Is active\n            vm.isActive = false;\n\n            // Has children?\n            vm.hasChildren = vm.node.children.length > 0;\n\n            // Is group?\n            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);\n\n            // Mark all parents as active if we have a matching state\n            // or the current state is a child of the node's state\n            if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )\n            {\n                // If state params are defined, make sure they are\n                // equal, otherwise do not set the active item\n                if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )\n                {\n                    return;\n                }\n\n                $scope.$emit('msNavigation::stateMatched');\n\n                // Also store the current active menu item\n                msNavigationService.setActiveItem(vm.node, $scope);\n            }\n\n            $scope.$on('msNavigation::stateMatched', function ()\n            {\n                // Mark as active if has children\n                if ( vm.hasChildren )\n                {\n                    $scope.$evalAsync(function ()\n                    {\n                        vm.isActive = true;\n                    });\n                }\n            });\n\n            // Listen for clearActive event\n            $scope.$on('msNavigation::clearActive', function ()\n            {\n                if ( !vm.hasChildren )\n                {\n                    return;\n                }\n\n                var activePathParts = [];\n\n                var activeItem = msNavigationService.getActiveItem();\n                if ( activeItem )\n                {\n                    activePathParts = activeItem.node._path.split('.');\n                }\n\n                // Test for active path\n                if ( activePathParts.indexOf(vm.node._id) > -1 )\n                {\n                    $scope.$evalAsync(function ()\n                    {\n                        vm.isActive = true;\n                    });\n                }\n                else\n                {\n                    $scope.$evalAsync(function ()\n                    {\n                        vm.isActive = false;\n                    });\n                }\n\n            });\n\n            // Listen for $stateChangeSuccess event\n            $scope.$on('$stateChangeSuccess', function ()\n            {\n                if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )\n                {\n                    // If state params are defined, make sure they are\n                    // equal, otherwise do not set the active item\n                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )\n                    {\n                        return;\n                    }\n\n                    // Update active item on state change\n                    msNavigationService.setActiveItem(vm.node, $scope);\n\n                    // Clear all active states except the one we're using\n                    $rootScope.$broadcast('msNavigation::clearActive');\n                }\n            });\n        }\n\n        /**\n         * Return the class\n         *\n         * @returns {*}\n         */\n        function getClass()\n        {\n            return vm.node.class;\n        }\n    }\n\n    /** @ngInject */\n    function msNavigationHorizontalNodeDirective()\n    {\n        return {\n            restrict        : 'A',\n            bindToController: {\n                node: '=msNavigationHorizontalNode'\n            },\n            controller      : 'MsNavigationHorizontalNodeController as vm',\n            compile         : function (tElement)\n            {\n                tElement.addClass('ms-navigation-horizontal-node');\n\n                return function postLink(scope, iElement, iAttrs, MsNavigationHorizontalNodeCtrl)\n                {\n                    // Add custom classes\n                    iElement.addClass(MsNavigationHorizontalNodeCtrl.getClass());\n\n                    // Add group class if it's a group\n                    if ( MsNavigationHorizontalNodeCtrl.group )\n                    {\n                        iElement.addClass('group');\n                    }\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msNavigationHorizontalItemDirective($mdMedia)\n    {\n        return {\n            restrict: 'A',\n            require : '^msNavigationHorizontalNode',\n            compile : function (tElement)\n            {\n                tElement.addClass('ms-navigation-horizontal-item');\n\n                return function postLink(scope, iElement, iAttrs, MsNavigationHorizontalNodeCtrl)\n                {\n                    iElement.on('click', onClick);\n\n                    function onClick()\n                    {\n                        if ( !MsNavigationHorizontalNodeCtrl.hasChildren || $mdMedia('gt-md') )\n                        {\n                            return;\n                        }\n\n                        iElement.toggleClass('expanded');\n                    }\n\n                    // Cleanup\n                    scope.$on('$destroy', function ()\n                    {\n                        iElement.off('click');\n                    });\n                };\n            }\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .factory('msNavFoldService', msNavFoldService)\n        .directive('msNavIsFolded', msNavIsFoldedDirective)\n        .controller('MsNavController', MsNavController)\n        .directive('msNav', msNavDirective)\n        .directive('msNavTitle', msNavTitleDirective)\n        .directive('msNavButton', msNavButtonDirective)\n        .directive('msNavToggle', msNavToggleDirective);\n\n    /** @ngInject */\n    function msNavFoldService()\n    {\n        var foldable = {};\n\n        var service = {\n            setFoldable    : setFoldable,\n            isNavFoldedOpen: isNavFoldedOpen,\n            toggleFold     : toggleFold,\n            openFolded     : openFolded,\n            closeFolded    : closeFolded\n        };\n\n        return service;\n\n        //////////\n\n        /**\n         * Set the foldable\n         *\n         * @param scope\n         * @param element\n         */\n        function setFoldable(scope, element)\n        {\n            foldable = {\n                'scope'  : scope,\n                'element': element\n            };\n        }\n\n        /**\n         * Is folded open\n         */\n        function isNavFoldedOpen()\n        {\n            return foldable.scope.isNavFoldedOpen();\n        }\n\n        /**\n         * Toggle fold\n         */\n        function toggleFold()\n        {\n            foldable.scope.toggleFold();\n        }\n\n        /**\n         * Open folded navigation\n         */\n        function openFolded()\n        {\n            foldable.scope.openFolded();\n        }\n\n        /**\n         * Close folded navigation\n         */\n        function closeFolded()\n        {\n            foldable.scope.closeFolded();\n        }\n    }\n\n    /** @ngInject */\n    function msNavIsFoldedDirective($document, $rootScope, msNavFoldService)\n    {\n        return {\n            restrict: 'A',\n            link    : function (scope, iElement, iAttrs)\n            {\n                var isFolded = (iAttrs.msNavIsFolded === 'true'),\n                    isFoldedOpen = false,\n                    body = angular.element($document[0].body),\n                    openOverlay = angular.element('<div id=\"ms-nav-fold-open-overlay\"></div>'),\n                    closeOverlay = angular.element('<div id=\"ms-nav-fold-close-overlay\"></div>'),\n                    sidenavEl = iElement.parent();\n\n                // Initialize the service\n                msNavFoldService.setFoldable(scope, iElement, isFolded);\n\n                // Set the fold status for the first time\n                if ( isFolded )\n                {\n                    fold();\n                }\n                else\n                {\n                    unfold();\n                }\n\n                /**\n                 * Is nav folded open\n                 */\n                function isNavFoldedOpen()\n                {\n                    return isFoldedOpen;\n                }\n\n                /**\n                 * Toggle fold\n                 */\n                function toggleFold()\n                {\n                    isFolded = !isFolded;\n\n                    if ( isFolded )\n                    {\n                        fold();\n                    }\n                    else\n                    {\n                        unfold();\n                    }\n                }\n\n                /**\n                 * Fold the navigation\n                 */\n                function fold()\n                {\n                    // Add classes\n                    body.addClass('ms-nav-folded');\n\n                    // Collapse everything and scroll to the top\n                    $rootScope.$broadcast('msNav::forceCollapse');\n                    iElement.scrollTop(0);\n\n                    // Append the openOverlay to the element\n                    sidenavEl.append(openOverlay);\n\n                    // Event listeners\n                    openOverlay.on('mouseenter touchstart', function (event)\n                    {\n                        openFolded(event);\n                        isFoldedOpen = true;\n                    });\n                }\n\n                /**\n                 * Open folded navigation\n                 */\n                function openFolded(event)\n                {\n                    if ( angular.isDefined(event) )\n                    {\n                        event.preventDefault();\n                    }\n\n                    body.addClass('ms-nav-folded-open');\n\n                    // Update the location\n                    $rootScope.$broadcast('msNav::expandMatchingToggles');\n\n                    // Remove open overlay\n                    sidenavEl.find(openOverlay).remove();\n\n                    // Append close overlay and bind its events\n                    sidenavEl.parent().append(closeOverlay);\n                    closeOverlay.on('mouseenter touchstart', function (event)\n                    {\n                        closeFolded(event);\n                        isFoldedOpen = false;\n                    });\n                }\n\n                /**\n                 * Close folded navigation\n                 */\n                function closeFolded(event)\n                {\n                    if ( angular.isDefined(event) )\n                    {\n                        event.preventDefault();\n                    }\n\n                    // Collapse everything and scroll to the top\n                    $rootScope.$broadcast('msNav::forceCollapse');\n                    iElement.scrollTop(0);\n\n                    body.removeClass('ms-nav-folded-open');\n\n                    // Remove close overlay\n                    sidenavEl.parent().find(closeOverlay).remove();\n\n                    // Append open overlay and bind its events\n                    sidenavEl.append(openOverlay);\n                    openOverlay.on('mouseenter touchstart', function (event)\n                    {\n                        openFolded(event);\n                        isFoldedOpen = true;\n                    });\n                }\n\n                /**\n                 * Unfold the navigation\n                 */\n                function unfold()\n                {\n                    body.removeClass('ms-nav-folded ms-nav-folded-open');\n\n                    // Update the location\n                    $rootScope.$broadcast('msNav::expandMatchingToggles');\n\n                    iElement.off('mouseenter mouseleave');\n                }\n\n                // Expose functions to the scope\n                scope.toggleFold = toggleFold;\n                scope.openFolded = openFolded;\n                scope.closeFolded = closeFolded;\n                scope.isNavFoldedOpen = isNavFoldedOpen;\n\n                // Cleanup\n                scope.$on('$destroy', function ()\n                {\n                    openOverlay.off('mouseenter touchstart');\n                    closeOverlay.off('mouseenter touchstart');\n                    iElement.off('mouseenter mouseleave');\n                });\n            }\n        };\n    }\n\n\n    /** @ngInject */\n    function MsNavController()\n    {\n        var vm = this,\n            disabled = false,\n            toggleItems = [],\n            lockedItems = [];\n\n        // Data\n\n        // Methods\n        vm.isDisabled = isDisabled;\n        vm.enable = enable;\n        vm.disable = disable;\n        vm.setToggleItem = setToggleItem;\n        vm.getLockedItems = getLockedItems;\n        vm.setLockedItem = setLockedItem;\n        vm.clearLockedItems = clearLockedItems;\n\n        //////////\n\n        /**\n         * Is navigation disabled\n         *\n         * @returns {boolean}\n         */\n        function isDisabled()\n        {\n            return disabled;\n        }\n\n        /**\n         * Disable the navigation\n         */\n        function disable()\n        {\n            disabled = true;\n        }\n\n        /**\n         * Enable the navigation\n         */\n        function enable()\n        {\n            disabled = false;\n        }\n\n        /**\n         * Set toggle item\n         *\n         * @param element\n         * @param scope\n         */\n        function setToggleItem(element, scope)\n        {\n            toggleItems.push({\n                'element': element,\n                'scope'  : scope\n            });\n        }\n\n        /**\n         * Get locked items\n         *\n         * @returns {Array}\n         */\n        function getLockedItems()\n        {\n            return lockedItems;\n        }\n\n        /**\n         * Set locked item\n         *\n         * @param element\n         * @param scope\n         */\n        function setLockedItem(element, scope)\n        {\n            lockedItems.push({\n                'element': element,\n                'scope'  : scope\n            });\n        }\n\n        /**\n         * Clear locked items list\n         */\n        function clearLockedItems()\n        {\n            lockedItems = [];\n        }\n    }\n\n    /** @ngInject */\n    function msNavDirective($rootScope, $mdComponentRegistry, msNavFoldService)\n    {\n        return {\n            restrict  : 'E',\n            scope     : {},\n            controller: 'MsNavController',\n            compile   : function (tElement)\n            {\n                tElement.addClass('ms-nav');\n\n                return function postLink(scope)\n                {\n                    // Update toggle status according to the ui-router current state\n                    $rootScope.$broadcast('msNav::expandMatchingToggles');\n\n                    // Update toggles on state changes\n                    var stateChangeSuccessEvent = $rootScope.$on('$stateChangeSuccess', function ()\n                    {\n                        $rootScope.$broadcast('msNav::expandMatchingToggles');\n\n                        // Close navigation sidenav on stateChangeSuccess\n                        $mdComponentRegistry.when('navigation').then(function (navigation)\n                        {\n                            navigation.close();\n\n                            if ( msNavFoldService.isNavFoldedOpen() )\n                            {\n                                msNavFoldService.closeFolded();\n                            }\n                        });\n                    });\n\n                    // Cleanup\n                    scope.$on('$destroy', function ()\n                    {\n                        stateChangeSuccessEvent();\n                    });\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msNavTitleDirective()\n    {\n        return {\n            restrict: 'A',\n            compile : function (tElement)\n            {\n                tElement.addClass('ms-nav-title');\n\n                return function postLink()\n                {\n\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msNavButtonDirective()\n    {\n        return {\n            restrict: 'AE',\n            compile : function (tElement)\n            {\n                tElement.addClass('ms-nav-button');\n\n                return function postLink()\n                {\n\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msNavToggleDirective($rootScope, $q, $animate, $state)\n    {\n        return {\n            restrict: 'A',\n            require : '^msNav',\n            scope   : true,\n            compile : function (tElement, tAttrs)\n            {\n                tElement.addClass('ms-nav-toggle');\n\n                // Add collapsed attr\n                if ( angular.isUndefined(tAttrs.collapsed) )\n                {\n                    tAttrs.collapsed = true;\n                }\n\n                tElement.attr('collapsed', tAttrs.collapsed);\n\n                return function postLink(scope, iElement, iAttrs, MsNavCtrl)\n                {\n                    var classes = {\n                        expanded         : 'expanded',\n                        expandAnimation  : 'expand-animation',\n                        collapseAnimation: 'collapse-animation'\n                    };\n\n                    // Store all related states\n                    var links = iElement.find('a');\n                    var states = [];\n                    var regExp = /\\(.*\\)/g;\n\n                    angular.forEach(links, function (link)\n                    {\n                        var state = angular.element(link).attr('ui-sref');\n\n                        if ( angular.isUndefined(state) )\n                        {\n                            return;\n                        }\n\n                        // Remove any parameter definition from the state name before storing it\n                        state = state.replace(regExp, '');\n\n                        states.push(state);\n                    });\n\n                    // Store toggle-able element and its scope in the main nav controller\n                    MsNavCtrl.setToggleItem(iElement, scope);\n\n                    // Click handler\n                    iElement.children('.ms-nav-button').on('click', toggle);\n\n                    // Toggle function\n                    function toggle()\n                    {\n                        // If navigation is disabled, do nothing...\n                        if ( MsNavCtrl.isDisabled() )\n                        {\n                            return;\n                        }\n\n                        // Disable the entire navigation to prevent spamming\n                        MsNavCtrl.disable();\n\n                        if ( isCollapsed() )\n                        {\n                            // Clear the locked items list\n                            MsNavCtrl.clearLockedItems();\n\n                            // Emit pushToLockedList event\n                            scope.$emit('msNav::pushToLockedList');\n\n                            // Collapse everything but locked items\n                            $rootScope.$broadcast('msNav::collapse');\n\n                            // Expand and then...\n                            expand().then(function ()\n                            {\n                                // Enable the entire navigation after animations completed\n                                MsNavCtrl.enable();\n                            });\n                        }\n                        else\n                        {\n                            // Collapse with all children\n                            scope.$broadcast('msNav::forceCollapse');\n                        }\n                    }\n\n                    // Cleanup\n                    scope.$on('$destroy', function ()\n                    {\n                        iElement.children('.ms-nav-button').off('click');\n                    });\n\n                    /*---------------------*/\n                    /* Scope Events        */\n                    /*---------------------*/\n\n                    /**\n                     * Collapse everything but locked items\n                     */\n                    scope.$on('msNav::collapse', function ()\n                    {\n                        // Only collapse toggles that are not locked\n                        var lockedItems = MsNavCtrl.getLockedItems();\n                        var locked = false;\n\n                        angular.forEach(lockedItems, function (lockedItem)\n                        {\n                            if ( angular.equals(lockedItem.scope, scope) )\n                            {\n                                locked = true;\n                            }\n                        });\n\n                        if ( locked )\n                        {\n                            return;\n                        }\n\n                        // Collapse and then...\n                        collapse().then(function ()\n                        {\n                            // Enable the entire navigation after animations completed\n                            MsNavCtrl.enable();\n                        });\n                    });\n\n                    /**\n                     * Collapse everything\n                     */\n                    scope.$on('msNav::forceCollapse', function ()\n                    {\n                        // Collapse and then...\n                        collapse().then(function ()\n                        {\n                            // Enable the entire navigation after animations completed\n                            MsNavCtrl.enable();\n                        });\n                    });\n\n                    /**\n                     * Expand toggles that match with the current states\n                     */\n                    scope.$on('msNav::expandMatchingToggles', function ()\n                    {\n                        var currentState = $state.current.name;\n                        var shouldExpand = false;\n\n                        angular.forEach(states, function (state)\n                        {\n                            if ( currentState === state )\n                            {\n                                shouldExpand = true;\n                            }\n                        });\n\n                        if ( shouldExpand )\n                        {\n                            expand();\n                        }\n                        else\n                        {\n                            collapse();\n                        }\n                    });\n\n                    /**\n                     * Add toggle to the locked list\n                     */\n                    scope.$on('msNav::pushToLockedList', function ()\n                    {\n                        // Set expanded item on main nav controller\n                        MsNavCtrl.setLockedItem(iElement, scope);\n                    });\n\n                    /*---------------------*/\n                    /* Internal functions  */\n                    /*---------------------*/\n\n                    /**\n                     * Is element collapsed\n                     *\n                     * @returns {bool}\n                     */\n                    function isCollapsed()\n                    {\n                        return iElement.attr('collapsed') === 'true';\n                    }\n\n                    /**\n                     * Is element expanded\n                     *\n                     * @returns {bool}\n                     */\n                    function isExpanded()\n                    {\n                        return !isCollapsed();\n                    }\n\n                    /**\n                     * Expand the toggle\n                     *\n                     * @returns $promise\n                     */\n                    function expand()\n                    {\n                        // Create a new deferred object\n                        var deferred = $q.defer();\n\n                        // If the menu item is already expanded, do nothing..\n                        if ( isExpanded() )\n                        {\n                            // Reject the deferred object\n                            deferred.reject({'error': true});\n\n                            // Return the promise\n                            return deferred.promise;\n                        }\n\n                        // Set element attr\n                        iElement.attr('collapsed', false);\n\n                        // Grab the element to expand\n                        var elementToExpand = angular.element(iElement.find('ms-nav-toggle-items')[0]);\n\n                        // Move the element out of the dom flow and\n                        // make it block so we can get its height\n                        elementToExpand.css({\n                            'position'  : 'absolute',\n                            'visibility': 'hidden',\n                            'display'   : 'block',\n                            'height'    : 'auto'\n                        });\n\n                        // Grab the height\n                        var height = elementToExpand[0].offsetHeight;\n\n                        // Reset the style modifications\n                        elementToExpand.css({\n                            'position'  : '',\n                            'visibility': '',\n                            'display'   : '',\n                            'height'    : ''\n                        });\n\n                        // Animate the height\n                        scope.$evalAsync(function ()\n                        {\n                            $animate.animate(elementToExpand,\n                                {\n                                    'display': 'block',\n                                    'height' : '0px'\n                                },\n                                {\n                                    'height': height + 'px'\n                                },\n                                classes.expandAnimation\n                            ).then(\n                                function ()\n                                {\n                                    // Add expanded class\n                                    elementToExpand.addClass(classes.expanded);\n\n                                    // Clear the inline styles after animation done\n                                    elementToExpand.css({'height': ''});\n\n                                    // Resolve the deferred object\n                                    deferred.resolve({'success': true});\n                                }\n                            );\n                        });\n\n                        // Return the promise\n                        return deferred.promise;\n                    }\n\n                    /**\n                     * Collapse the toggle\n                     *\n                     * @returns $promise\n                     */\n                    function collapse()\n                    {\n                        // Create a new deferred object\n                        var deferred = $q.defer();\n\n                        // If the menu item is already collapsed, do nothing..\n                        if ( isCollapsed() )\n                        {\n                            // Reject the deferred object\n                            deferred.reject({'error': true});\n\n                            // Return the promise\n                            return deferred.promise;\n                        }\n\n                        // Set element attr\n                        iElement.attr('collapsed', true);\n\n                        // Grab the element to collapse\n                        var elementToCollapse = angular.element(iElement.find('ms-nav-toggle-items')[0]);\n\n                        // Grab the height\n                        var height = elementToCollapse[0].offsetHeight;\n\n                        // Animate the height\n                        scope.$evalAsync(function ()\n                        {\n                            $animate.animate(elementToCollapse,\n                                {\n                                    'height': height + 'px'\n                                },\n                                {\n                                    'height': '0px'\n                                },\n                                classes.collapseAnimation\n                            ).then(\n                                function ()\n                                {\n                                    // Remove expanded class\n                                    elementToCollapse.removeClass(classes.expanded);\n\n                                    // Clear the inline styles after animation done\n                                    elementToCollapse.css({\n                                        'display': '',\n                                        'height' : ''\n                                    });\n\n                                    // Resolve the deferred object\n                                    deferred.resolve({'success': true});\n                                }\n                            );\n                        });\n\n                        // Return the promise\n                        return deferred.promise;\n                    }\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('msMaterialColorPickerController', msMaterialColorPickerController)\n        .directive('msMaterialColorPicker', msMaterialColorPicker);\n\n    /** @ngInject */\n    function msMaterialColorPickerController($scope, $mdColorPalette, $mdMenu, fuseGenerator)\n    {\n        var vm = this;\n        vm.palettes = $mdColorPalette; // Material Color Palette\n        vm.selectedPalette = false;\n        vm.selectedHues = false;\n        $scope.$selectedColor = {};\n\n        // Methods\n        vm.activateHueSelection = activateHueSelection;\n        vm.selectColor = selectColor;\n        vm.removeColor = removeColor;\n\n        /**\n         * Initialize / Watch model changes\n         */\n        $scope.$watch('ngModel', setSelectedColor);\n\n        /**\n         * Activate Hue Selection\n         * @param palette\n         * @param hues\n         */\n        function activateHueSelection(palette, hues)\n        {\n            vm.selectedPalette = palette;\n            vm.selectedHues = hues;\n        }\n\n        /**\n         * Select Color\n         * @type {selectColor}\n         */\n        function selectColor(palette, hue)\n        {\n            // Update Selected Color\n            updateSelectedColor(palette, hue);\n\n            // Update Model Value\n            updateModel();\n\n            // Hide The picker\n            $mdMenu.hide();\n        }\n\n        function removeColor()\n        {\n            vm.selectedColor = {\n                palette: '',\n                hue    : '',\n                class  : ''\n            };\n\n            activateHueSelection(false, false);\n\n            updateModel();\n        }\n\n        /**\n         * Set SelectedColor by model type\n         */\n        function setSelectedColor()\n        {\n            if ( !vm.modelCtrl.$viewValue || vm.modelCtrl.$viewValue === '' )\n            {\n                removeColor();\n                return;\n            }\n\n            var palette, hue;\n\n            // If ModelType Class\n            if ( vm.msModelType === 'class' )\n            {\n                var color = vm.modelCtrl.$viewValue.split('-');\n                if ( color.length >= 5 )\n                {\n                    palette = color[1] + '-' + color[2];\n                    hue = color[3];\n                }\n                else\n                {\n                    palette = color[1];\n                    hue = color[2];\n                }\n            }\n\n            // If ModelType Object\n            else if ( vm.msModelType === 'obj' )\n            {\n                palette = vm.modelCtrl.$viewValue.palette;\n                hue = vm.modelCtrl.$viewValue.hue || 500;\n            }\n\n            // Update Selected Color\n            updateSelectedColor(palette, hue);\n        }\n\n        /**\n         * Update Selected Color\n         * @param palette\n         * @param hue\n         */\n        function updateSelectedColor(palette, hue)\n        {\n            vm.selectedColor = {\n                palette     : palette,\n                hue         : hue,\n                class       : 'md-' + palette + '-' + hue + '-bg',\n                bgColorValue: fuseGenerator.rgba(vm.palettes[palette][hue].value),\n                fgColorValue: fuseGenerator.rgba(vm.palettes[palette][hue].contrast)\n            };\n\n            // If Model object not Equals the selectedColor update it\n            // it can be happen when the model only have pallete and hue values\n            if ( vm.msModelType === 'obj' && !angular.equals(vm.selectedColor, vm.modelCtrl.$viewValue) )\n            {\n                // Update Model Value\n                updateModel();\n            }\n\n            activateHueSelection(palette, vm.palettes[palette]);\n\n            $scope.$selectedColor = vm.selectedColor;\n        }\n\n        /**\n         * Update Model Value by model type\n         */\n        function updateModel()\n        {\n            if ( vm.msModelType === 'class' )\n            {\n                vm.modelCtrl.$setViewValue(vm.selectedColor.class);\n            }\n            else if ( vm.msModelType === 'obj' )\n            {\n                vm.modelCtrl.$setViewValue(vm.selectedColor);\n            }\n        }\n    }\n\n    /** @ngInject */\n    function msMaterialColorPicker()\n    {\n        return {\n            require    : ['msMaterialColorPicker', 'ngModel'],\n            restrict   : 'E',\n            scope      : {\n                ngModel    : '=',\n                msModelType: '@?'\n            },\n            controller : 'msMaterialColorPickerController as vm',\n            transclude : true,\n            templateUrl: 'app/core/directives/ms-material-color-picker/ms-material-color-picker.html',\n            link       : function (scope, element, attrs, controllers, transclude)\n            {\n                var ctrl = controllers[0];\n\n                /**\n                 *  Pass model controller to directive controller\n                 */\n                ctrl.modelCtrl = controllers[1];\n\n                /**\n                 * ModelType: 'obj', 'class'(default)\n                 * @type {string|string}\n                 */\n                ctrl.msModelType = scope.msModelType || 'class';\n\n                transclude(scope, function (clone)\n                {\n                    clone = clone.filter(function (i, el)\n                    {\n                        return ( el.nodeType === 1 ) ? true : false;\n                    });\n\n                    if ( clone.length )\n                    {\n                        element.find('ms-color-picker-button').replaceWith(clone);\n                    }\n                });\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('msMasonryController', msMasonryController)\n        .directive('msMasonry', msMasonry)\n        .directive('msMasonryItem', msMasonryItem);\n\n    /** @ngInject */\n    function msMasonryController($scope, $window, $mdMedia, $timeout)\n    {\n        var vm = this,\n            defaultOpts = {\n                columnCount     : 5,\n                respectItemOrder: false,\n                reLayoutDebounce: 400,\n                responsive      : {\n                    md: 3,\n                    sm: 2,\n                    xs: 1\n                }\n            },\n            reLayoutTimeout = true;\n\n        vm.options = null;\n        vm.container = [];\n        vm.containerPos = '';\n        vm.columnWidth = '';\n        vm.items = [];\n\n        // Methods\n        vm.reLayout = reLayout;\n        vm.initialize = initialize;\n        vm.waitImagesLoaded = waitImagesLoaded;\n\n        function initialize()\n        {\n            vm.options = !vm.options ? defaultOpts : angular.extend(defaultOpts, vm.options);\n\n\n            watchContainerResize();\n        }\n\n        $scope.$on('msMasonry:relayout', function ()\n        {\n            reLayout();\n        });\n\n        function waitImagesLoaded(element, callback)\n        {\n            if ( typeof imagesLoaded !== 'undefined' )\n            {\n                var imgLoad = $window.imagesLoaded(element);\n\n                imgLoad.on('done', function ()\n                {\n                    callback();\n                });\n            }\n            else\n            {\n                callback();\n            }\n        }\n\n        function watchContainerResize()\n        {\n            $scope.$watch(\n                function ()\n                {\n                    return vm.container.width();\n                },\n                function (newValue, oldValue)\n                {\n                    if ( newValue !== oldValue )\n                    {\n                        reLayout();\n                    }\n                }\n            );\n        }\n\n        function reLayout()\n        {\n            // Debounce for relayout\n            if ( reLayoutTimeout )\n            {\n                $timeout.cancel(reLayoutTimeout);\n            }\n\n            reLayoutTimeout = $timeout(function ()\n            {\n                start();\n\n                $scope.$broadcast('msMasonry:relayoutFinished');\n\n            }, vm.options.reLayoutDebounce);\n\n            // Start relayout\n            function start()\n            {\n                vm.containerPos = vm.container[0].getBoundingClientRect();\n\n                updateColumnOptions();\n\n                $scope.$broadcast('msMasonry:relayoutStarted');\n\n                vm.items = vm.container.find('ms-masonry-item');\n\n                //initialize lastRowBottomArr\n                var referenceArr = Array.apply(null, new Array(vm.columnCount)).map(function ()\n                {\n                    return 0;\n                });\n\n                // set item positions\n                for ( var i = 0; i < vm.items.length; i++ )\n                {\n                    var item = vm.items[i],\n                        xPos, yPos, column, refTop;\n\n                    item = angular.element(item);\n\n                    if ( item.scope() )\n                    {\n                        item.scope().$broadcast('msMasonryItem:startReLayout');\n                    }\n\n                    item.css({'width': vm.columnWidth});\n\n                    if ( vm.options.respectItemOrder )\n                    {\n                        column = i % vm.columnCount;\n                        refTop = referenceArr[column];\n                    }\n                    else\n                    {\n                        refTop = Math.min.apply(Math, referenceArr);\n                        column = referenceArr.indexOf(refTop);\n                    }\n\n                    referenceArr[column] = refTop + item[0].getBoundingClientRect().height;\n\n                    xPos = Math.round(column * vm.columnWidth);\n                    yPos = refTop;\n\n                    item.css({'transform': 'translate3d(' + xPos + 'px,' + yPos + 'px,0px)'});\n                    item.addClass('placed');\n\n                    if ( item.scope() )\n                    {\n                        item.scope().$broadcast('msMasonryItem:finishReLayout');\n                    }\n                }\n            }\n        }\n\n        function updateColumnOptions()\n        {\n            vm.columnCount = vm.options.columnCount;\n\n            if ( $mdMedia('gt-md') )\n            {\n                vm.columnCount = vm.options.columnCount;\n            }\n            else if ( $mdMedia('md') )\n            {\n                vm.columnCount = (vm.columnCount > vm.options.responsive.md ? vm.options.responsive.md : vm.columnCount);\n            }\n            else if ( $mdMedia('sm') )\n            {\n                vm.columnCount = (vm.columnCount > vm.options.responsive.sm ? vm.options.responsive.sm : vm.columnCount);\n            }\n            else\n            {\n                vm.columnCount = vm.options.responsive.xs;\n            }\n\n            vm.columnWidth = vm.containerPos.width / vm.columnCount;\n\n        }\n    }\n\n    /** @ngInject */\n    function msMasonry($timeout)\n    {\n        return {\n            restrict  : 'AEC',\n            controller: 'msMasonryController',\n            compile   : compile\n        };\n        function compile(element, attributes)\n        {\n            return {\n                pre : function preLink(scope, iElement, iAttrs, controller)\n                {\n                    controller.options = angular.fromJson(attributes.options || '{}');\n                    controller.container = element;\n                },\n                post: function postLink(scope, iElement, iAttrs, controller)\n                {\n                    $timeout(function ()\n                    {\n                        controller.initialize();\n                    });\n                }\n            };\n        }\n    }\n\n    /** @ngInject */\n    function msMasonryItem()\n    {\n        return {\n            restrict: 'AEC',\n            require : '^msMasonry',\n            priority: 1,\n            link    : link\n        };\n\n        function link(scope, element, attributes, controller)\n        {\n            controller.waitImagesLoaded(element, function ()\n            {\n                controller.reLayout();\n\n            });\n\n            scope.$on('msMasonryItem:finishReLayout', function ()\n            {\n                scope.$watch(function ()\n                {\n                    return element.height();\n                }, function (newVal, oldVal)\n                {\n                    if ( newVal !== oldVal )\n                    {\n                        controller.reLayout();\n                    }\n                });\n            });\n\n            element.on('$destroy', function ()\n            {\n                controller.reLayout();\n            });\n        }\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('msInfoBar', msInfoBarDirective);\n\n    /** @ngInject */\n    function msInfoBarDirective($document)\n    {\n        return {\n            restrict   : 'E',\n            scope      : {},\n            transclude : true,\n            templateUrl: 'app/core/directives/ms-info-bar/ms-info-bar.html',\n            link       : function (scope, iElement)\n            {\n                var body = $document.find('body'),\n                    bodyClass = 'ms-info-bar-active';\n\n                // Add body class\n                body.addClass(bodyClass);\n\n                /**\n                 * Remove the info bar\n                 */\n                function removeInfoBar()\n                {\n                    body.removeClass(bodyClass);\n                    iElement.remove();\n                    scope.$destroy();\n                }\n\n                // Expose functions\n                scope.removeInfoBar = removeInfoBar;\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsFormWizardController', MsFormWizardController)\n        .directive('msFormWizard', msFormWizardDirective)\n        .directive('msFormWizardForm', msFormWizardFormDirective);\n\n    /** @ngInject */\n    function MsFormWizardController()\n    {\n        var vm = this;\n\n        // Data\n        vm.forms = [];\n        vm.selectedIndex = 0;\n\n        // Methods\n        vm.registerForm = registerForm;\n\n        vm.previousStep = previousStep;\n        vm.nextStep = nextStep;\n        vm.firstStep = firstStep;\n        vm.lastStep = lastStep;\n\n        vm.totalSteps = totalSteps;\n        vm.isFirstStep = isFirstStep;\n        vm.isLastStep = isLastStep;\n\n        vm.currentStepInvalid = currentStepInvalid;\n        vm.previousStepInvalid = previousStepInvalid;\n        vm.formsIncomplete = formsIncomplete;\n        vm.resetForm = resetForm;\n\n        //////////\n\n        /**\n         * Register form\n         *\n         * @param form\n         */\n        function registerForm(form)\n        {\n            vm.forms.push(form);\n        }\n\n        /**\n         * Go to previous step\n         */\n        function previousStep()\n        {\n            if ( isFirstStep() )\n            {\n                return;\n            }\n\n            vm.selectedIndex--;\n        }\n\n        /**\n         * Go to next step\n         */\n        function nextStep()\n        {\n            if ( isLastStep() )\n            {\n                return;\n            }\n\n            vm.selectedIndex++;\n        }\n\n        /**\n         * Go to first step\n         */\n        function firstStep()\n        {\n            vm.selectedIndex = 0;\n        }\n\n        /**\n         * Go to last step\n         */\n        function lastStep()\n        {\n            vm.selectedIndex = totalSteps() - 1;\n        }\n\n        /**\n         * Return total steps\n         *\n         * @returns {int}\n         */\n        function totalSteps()\n        {\n            return vm.forms.length;\n        }\n\n        /**\n         * Is first step?\n         *\n         * @returns {boolean}\n         */\n        function isFirstStep()\n        {\n            return vm.selectedIndex === 0;\n        }\n\n        /**\n         * Is last step?\n         *\n         * @returns {boolean}\n         */\n        function isLastStep()\n        {\n            return vm.selectedIndex === totalSteps() - 1;\n        }\n\n        /**\n         * Is current step invalid?\n         *\n         * @returns {boolean}\n         */\n        function currentStepInvalid()\n        {\n            return angular.isDefined(vm.forms[vm.selectedIndex]) && vm.forms[vm.selectedIndex].$invalid;\n        }\n\n        /**\n         * Is previous step invalid?\n         *\n         * @returns {boolean}\n         */\n        function previousStepInvalid()\n        {\n            return vm.selectedIndex > 0 && angular.isDefined(vm.forms[vm.selectedIndex - 1]) && vm.forms[vm.selectedIndex - 1].$invalid;\n        }\n\n        /**\n         * Check if there is any incomplete forms\n         *\n         * @returns {boolean}\n         */\n        function formsIncomplete()\n        {\n            for ( var x = 0; x < vm.forms.length; x++ )\n            {\n                if ( vm.forms[x].$invalid )\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Reset form\n         */\n        function resetForm()\n        {\n            // Go back to the first step\n            vm.selectedIndex = 0;\n\n            // Make sure all the forms are back in the $pristine & $untouched status\n            for ( var x = 0; x < vm.forms.length; x++ )\n            {\n                vm.forms[x].$setPristine();\n                vm.forms[x].$setUntouched();\n            }\n        }\n    }\n\n    /** @ngInject */\n    function msFormWizardDirective()\n    {\n        return {\n            restrict  : 'E',\n            scope     : true,\n            controller: 'MsFormWizardController as msWizard',\n            compile   : function (tElement)\n            {\n                tElement.addClass('ms-form-wizard');\n\n                return function postLink()\n                {\n\n                };\n            }\n        };\n    }\n\n    /** @ngInject */\n    function msFormWizardFormDirective()\n    {\n        return {\n            restrict: 'A',\n            require : ['form', '^msFormWizard'],\n            compile : function (tElement)\n            {\n                tElement.addClass('ms-form-wizard-form');\n\n                return function postLink(scope, iElement, iAttrs, ctrls)\n                {\n                    var formCtrl = ctrls[0],\n                        MsFormWizardCtrl = ctrls[1];\n\n                    MsFormWizardCtrl.registerForm(formCtrl);\n                };\n            }\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .provider('msDatepickerFixConfig', msDatepickerFixConfigProvider)\n        .directive('msDatepickerFix', msDatepickerFix);\n\n    /** @ngInject */\n    function msDatepickerFixConfigProvider()\n    {\n        var service = this;\n\n        // Default configuration\n        var defaultConfig = {\n            // To view\n            formatter: function (val)\n            {\n                if ( !val )\n                {\n                    return '';\n                }\n\n                return val === '' ? val : new Date(val);\n            },\n            // To model\n            parser   : function (val)\n            {\n                if ( !val )\n                {\n                    return '';\n                }\n\n                return moment(val).add(moment(val).utcOffset(), 'm').toDate();\n            }\n        };\n\n        // Methods\n        service.config = config;\n\n        //////////\n\n        /**\n         * Extend default configuration with the given one\n         *\n         * @param configuration\n         */\n        function config(configuration)\n        {\n            defaultConfig = angular.extend({}, defaultConfig, configuration);\n        }\n\n        /**\n         * Service\n         */\n        service.$get = function ()\n        {\n            return defaultConfig;\n        };\n    }\n\n    /** @ngInject */\n    function msDatepickerFix(msDatepickerFixConfig)\n    {\n        return {\n            require : 'ngModel',\n            priority: 1,\n            link    : function (scope, elem, attrs, ngModel)\n            {\n                ngModel.$formatters.push(msDatepickerFixConfig.formatter); // to view\n                ngModel.$parsers.push(msDatepickerFixConfig.parser); // to model\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('msCard', msCardDirective);\n\n    /** @ngInject */\n    function msCardDirective()\n    {\n        return {\n            restrict: 'E',\n            scope   : {\n                templatePath: '=template',\n                card        : '=ngModel',\n                vm          : '=viewModel'\n            },\n            template: '<div class=\"ms-card-content-wrapper\" ng-include=\"templatePath\" onload=\"cardTemplateLoaded()\"></div>',\n            compile : function (tElement)\n            {\n                // Add class\n                tElement.addClass('ms-card');\n\n                return function postLink(scope, iElement)\n                {\n                    // Methods\n                    scope.cardTemplateLoaded = cardTemplateLoaded;\n\n                    //////////\n\n                    /**\n                     * Emit cardTemplateLoaded event\n                     */\n                    function cardTemplateLoaded()\n                    {\n                        scope.$emit('msCard::cardTemplateLoaded', iElement);\n                    }\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .service('fuseTheming', fuseThemingService);\n\n    /** @ngInject */\n    function fuseThemingService($cookies, $log, $mdTheming)\n    {\n        var service = {\n            getRegisteredPalettes: getRegisteredPalettes,\n            getRegisteredThemes  : getRegisteredThemes,\n            setActiveTheme       : setActiveTheme,\n            setThemesList        : setThemesList,\n            themes               : {\n                list  : {},\n                active: {\n                    'name' : '',\n                    'theme': {}\n                }\n            }\n        };\n\n        return service;\n\n        //////////\n\n        /**\n         * Get registered palettes\n         *\n         * @returns {*}\n         */\n        function getRegisteredPalettes()\n        {\n            return $mdTheming.PALETTES;\n        }\n\n        /**\n         * Get registered themes\n         *\n         * @returns {*}\n         */\n        function getRegisteredThemes()\n        {\n            return $mdTheming.THEMES;\n        }\n\n        /**\n         * Set active theme\n         *\n         * @param themeName\n         */\n        function setActiveTheme(themeName)\n        {\n            // If theme does not exist, fallback to the default theme\n            if ( angular.isUndefined(service.themes.list[themeName]) )\n            {\n                // If there is no theme called \"default\"...\n                if ( angular.isUndefined(service.themes.list.default) )\n                {\n                    $log.error('You must have at least one theme named \"default\"');\n                    return;\n                }\n\n                $log.warn('The theme \"' + themeName + '\" does not exist! Falling back to the \"default\" theme.');\n\n                // Otherwise set theme to default theme\n                service.themes.active.name = 'default';\n                service.themes.active.theme = service.themes.list.default;\n                $cookies.put('selectedTheme', service.themes.active.name);\n\n                return;\n            }\n\n            service.themes.active.name = themeName;\n            service.themes.active.theme = service.themes.list[themeName];\n            $cookies.put('selectedTheme', themeName);\n        }\n\n        /**\n         * Set available themes list\n         *\n         * @param themeList\n         */\n        function setThemesList(themeList)\n        {\n            service.themes.list = themeList;\n        }\n    }\n})();\n\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .config(config);\n\n    /** @ngInject */\n    function config($mdThemingProvider, fusePalettes, fuseThemes)\n    {\n        // Inject Cookies Service\n        var $cookies;\n        angular.injector(['ngCookies']).invoke([\n            '$cookies', function (_$cookies)\n            {\n                $cookies = _$cookies;\n            }\n        ]);\n\n        // Check if custom theme exist in cookies\n        var customTheme = $cookies.getObject('customTheme');\n        if ( customTheme )\n        {\n            fuseThemes['custom'] = customTheme;\n        }\n\n        $mdThemingProvider.alwaysWatchTheme(true);\n\n        // Define custom palettes\n        angular.forEach(fusePalettes, function (palette)\n        {\n            $mdThemingProvider.definePalette(palette.name, palette.options);\n        });\n\n        // Register custom themes\n        angular.forEach(fuseThemes, function (theme, themeName)\n        {\n            $mdThemingProvider.theme(themeName)\n                .primaryPalette(theme.primary.name, theme.primary.hues)\n                .accentPalette(theme.accent.name, theme.accent.hues)\n                .warnPalette(theme.warn.name, theme.warn.hues)\n                .backgroundPalette(theme.background.name, theme.background.hues);\n        });\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    var fuseThemes = {\n        default  : {\n            primary   : {\n                name: 'fuse-paleblue',\n                hues: {\n                    'default': '700',\n                    'hue-1'  : '500',\n                    'hue-2'  : '600',\n                    'hue-3'  : '400'\n                }\n            },\n            accent    : {\n                name: 'light-blue',\n                hues: {\n                    'default': '600',\n                    'hue-1'  : '400',\n                    'hue-2'  : '700',\n                    'hue-3'  : 'A100'\n                }\n            },\n            warn      : {\n                name: 'red'\n            },\n            background: {\n                name: 'grey',\n                hues: {\n                    'default': 'A100',\n                    'hue-1'  : 'A100',\n                    'hue-2'  : '100',\n                    'hue-3'  : '300'\n                }\n            }\n        },\n        'pinkTheme': {\n            primary   : {\n                name: 'blue-grey',\n                hues: {\n                    'default': '800',\n                    'hue-1'  : '600',\n                    'hue-2'  : '400',\n                    'hue-3'  : 'A100'\n                }\n            },\n            accent    : {\n                name: 'pink',\n                hues: {\n                    'default': '400',\n                    'hue-1'  : '300',\n                    'hue-2'  : '600',\n                    'hue-3'  : 'A100'\n                }\n            },\n            warn      : {\n                name: 'blue'\n            },\n            background: {\n                name: 'grey',\n                hues: {\n                    'default': 'A100',\n                    'hue-1'  : 'A100',\n                    'hue-2'  : '100',\n                    'hue-3'  : '300'\n                }\n            }\n        },\n        'tealTheme': {\n            primary   : {\n                name: 'fuse-blue',\n                hues: {\n                    'default': '900',\n                    'hue-1'  : '600',\n                    'hue-2'  : '500',\n                    'hue-3'  : 'A100'\n                }\n            },\n            accent    : {\n                name: 'teal',\n                hues: {\n                    'default': '500',\n                    'hue-1'  : '400',\n                    'hue-2'  : '600',\n                    'hue-3'  : 'A100'\n                }\n            },\n            warn      : {\n                name: 'deep-orange'\n            },\n            background: {\n                name: 'grey',\n                hues: {\n                    'default': 'A100',\n                    'hue-1'  : 'A100',\n                    'hue-2'  : '100',\n                    'hue-3'  : '300'\n                }\n            }\n        }\n    };\n\n    angular\n        .module('app.core')\n        .constant('fuseThemes', fuseThemes);\n})();\n(function () {\n    'use strict';\n\n    var fusePalettes = [\n        {\n            name: 'fuse-blue',\n            options: {\n                '50': '#ebf1fa',\n                '100': '#c2d4ef',\n                '200': '#9ab8e5',\n                '300': '#78a0dc',\n                '400': '#5688d3',\n                '500': '#3470ca',\n                '600': '#2e62b1',\n                '700': '#275498',\n                '800': '#21467e',\n                '900': '#1a3865',\n                'A100': '#c2d4ef',\n                'A200': '#9ab8e5',\n                'A400': '#5688d3',\n                'A700': '#275498',\n                'contrastDefaultColor': 'light',\n                'contrastDarkColors': '50 100 200 A100',\n                'contrastStrongLightColors': '300 400'\n            }\n        },\n        {\n            name: 'fuse-paleblue',\n            options: {\n                '50': '#ececee',\n                '100': '#c5c6cb',\n                '200': '#9ea1a9',\n                '300': '#7d818c',\n                '400': '#5c616f',\n                '500': '#3c4252',\n                '600': '#353a48',\n                '700': '#2d323e',\n                '800': '#262933',\n                '900': '#1e2129',\n                'A100': '#c5c6cb',\n                'A200': '#9ea1a9',\n                'A400': '#5c616f',\n                'A700': '#2d323e',\n                'contrastDefaultColor': 'light',\n                'contrastDarkColors': '50 100 200 A100',\n                'contrastStrongLightColors': '300 400'\n            }\n        }\n    ];\n\n    angular\n        .module('app.core')\n        .constant('fusePalettes', fusePalettes);\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .factory('fuseGenerator', fuseGeneratorService);\n\n    /** @ngInject */\n    function fuseGeneratorService($cookies, $log, fuseTheming)\n    {\n        // Storage for simplified themes object\n        var themes = {};\n\n        var service = {\n            generate: generate,\n            rgba    : rgba\n        };\n\n        return service;\n\n        //////////\n\n        /**\n         * Generate less variables for each theme from theme's\n         * palette by using material color naming conventions\n         */\n        function generate()\n        {\n            // Get registered themes and palettes and copy\n            // them so we don't modify the original objects\n            var registeredThemes = angular.copy(fuseTheming.getRegisteredThemes());\n            var registeredPalettes = angular.copy(fuseTheming.getRegisteredPalettes());\n\n            // First, create a simplified object that stores\n            // all registered themes and their colors\n\n            // Iterate through registered themes\n            angular.forEach(registeredThemes, function (registeredTheme)\n            {\n                themes[registeredTheme.name] = {};\n\n                // Iterate through color types (primary, accent, warn & background)\n                angular.forEach(registeredTheme.colors, function (colorType, colorTypeName)\n                {\n                    themes[registeredTheme.name][colorTypeName] = {\n                        'name'  : colorType.name,\n                        'levels': {\n                            'default': {\n                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues.default].value),\n                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 1),\n                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 2),\n                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 3),\n                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 4)\n                            },\n                            'hue1'   : {\n                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].value),\n                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 1),\n                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 2),\n                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 3),\n                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 4)\n                            },\n                            'hue2'   : {\n                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].value),\n                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 1),\n                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 2),\n                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 3),\n                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 4)\n                            },\n                            'hue3'   : {\n                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].value),\n                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 1),\n                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 2),\n                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 3),\n                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 4)\n                            }\n                        }\n                    };\n                });\n            });\n\n            // Process themes one more time and then store them in the service for external use\n            processAndStoreThemes(themes);\n\n            // Iterate through simplified themes\n            // object and create style variables\n            var styleVars = {};\n\n            // Iterate through registered themes\n            angular.forEach(themes, function (theme, themeName)\n            {\n                styleVars = {};\n                styleVars['@themeName'] = themeName;\n\n                // Iterate through color types (primary, accent, warn & background)\n                angular.forEach(theme, function (colorTypes, colorTypeName)\n                {\n                    // Iterate through color levels (default, hue1, hue2 & hue3)\n                    angular.forEach(colorTypes.levels, function (colors, colorLevelName)\n                    {\n                        // Iterate through color name (color, contrast1, contrast2, contrast3 & contrast4)\n                        angular.forEach(colors, function (color, colorName)\n                        {\n                            styleVars['@' + colorTypeName + ucfirst(colorLevelName) + ucfirst(colorName)] = color;\n                        });\n                    });\n                });\n\n                // Render styles\n                render(styleVars);\n            });\n        }\n\n        // ---------------------------\n        //  INTERNAL HELPER FUNCTIONS\n        // ---------------------------\n\n        /**\n         * Process and store themes for global use\n         *\n         * @param _themes\n         */\n        function processAndStoreThemes(_themes)\n        {\n            // Here we will go through every registered theme one more time\n            // and try to simplify their objects as much as possible for\n            // easier access to their properties.\n            var themes = angular.copy(_themes);\n\n            // Iterate through themes\n            angular.forEach(themes, function (theme)\n            {\n                // Iterate through color types (primary, accent, warn & background)\n                angular.forEach(theme, function (colorType, colorTypeName)\n                {\n                    theme[colorTypeName] = colorType.levels;\n                    theme[colorTypeName].color = colorType.levels.default.color;\n                    theme[colorTypeName].contrast1 = colorType.levels.default.contrast1;\n                    theme[colorTypeName].contrast2 = colorType.levels.default.contrast2;\n                    theme[colorTypeName].contrast3 = colorType.levels.default.contrast3;\n                    theme[colorTypeName].contrast4 = colorType.levels.default.contrast4;\n                    delete theme[colorTypeName].default;\n                });\n            });\n\n            // Store themes and set selected theme for the first time\n            fuseTheming.setThemesList(themes);\n\n            // Remember selected theme.\n            var selectedTheme = $cookies.get('selectedTheme');\n\n            if ( selectedTheme )\n            {\n                fuseTheming.setActiveTheme(selectedTheme);\n            }\n            else\n            {\n                fuseTheming.setActiveTheme('default');\n            }\n        }\n\n\n        /**\n         * Render css files\n         *\n         * @param styleVars\n         */\n        function render(styleVars)\n        {\n            var cssTemplate = '/* Content hack because they wont fix */\\n/* https://github.com/angular/material/pull/8067 */\\n[md-theme=\"@themeName\"] md-content.md-hue-1,\\nmd-content.md-@themeName-theme.md-hue-1 {\\n    color: @backgroundHue1Contrast1;\\n    background-color: @backgroundHue1Color;\\n}\\n\\n[md-theme=\"@themeName\"] md-content.md-hue-2,\\nmd-content.md-@themeName-theme.md-hue-2 {\\n    color: @backgroundHue2Contrast1;\\n    background-color: @backgroundHue2Color;\\n}\\n\\n[md-theme=\"@themeName\"] md-content.md-hue-3,\\n md-content.md-@themeName-theme.md-hue-3 {\\n    color: @backgroundHue3Contrast1;\\n    background-color: @backgroundHue3Color;\\n}\\n\\n/* Text Colors */\\n[md-theme=\"@themeName\"] a {\\n    color: @accentDefaultColor;\\n}\\n\\n[md-theme=\"@themeName\"] .secondary-text,\\n[md-theme=\"@themeName\"] .icon {\\n    color: @backgroundDefaultContrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .hint-text,\\n[md-theme=\"@themeName\"] .disabled-text {\\n    color: @backgroundDefaultContrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .fade-text,\\n[md-theme=\"@themeName\"] .divider {\\n    color: @backgroundDefaultContrast4;\\n}\\n\\n/* Primary */\\n[md-theme=\"@themeName\"] .md-primary-bg {\\n    background-color: @primaryDefaultColor;\\n    color: @primaryDefaultContrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg .secondary-text,\\n[md-theme=\"@themeName\"] .md-primary-bg .icon {\\n    color: @primaryDefaultContrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg .hint-text,\\n[md-theme=\"@themeName\"] .md-primary-bg .disabled-text {\\n    color: @primaryDefaultContrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg .fade-text,\\n[md-theme=\"@themeName\"] .md-primary-bg .divider {\\n    color: @primaryDefaultContrast4;\\n}\\n\\n/* Primary, Hue-1 */\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 {\\n    background-color: @primaryHue1Color;\\n    color: @primaryHue1Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 .secondary-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 .icon {\\n    color: @primaryHue1Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 .hint-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 .disabled-text {\\n    color: @primaryHue1Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 .fade-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-1 .divider {\\n    color: @primaryHue1Contrast4;\\n}\\n\\n/* Primary, Hue-2 */\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 {\\n    background-color: @primaryHue2Color;\\n    color: @primaryHue2Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 .secondary-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 .icon {\\n    color: @primaryHue2Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 .hint-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 .disabled-text {\\n    color: @primaryHue2Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 .fade-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-2 .divider {\\n    color: @primaryHue2Contrast4;\\n}\\n\\n/* Primary, Hue-3 */\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 {\\n    background-color: @primaryHue3Color;\\n    color: @primaryHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 .secondary-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 .icon {\\n    color: @primaryHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 .hint-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 .disabled-text {\\n    color: @primaryHue3Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 .fade-text,\\n[md-theme=\"@themeName\"] .md-primary-bg.md-hue-3 .divider {\\n    color: @primaryHue3Contrast4;\\n}\\n\\n/* Primary foreground */\\n[md-theme=\"@themeName\"] .md-primary-fg {\\n    color: @primaryDefaultColor !important;\\n}\\n\\n/* Primary foreground, Hue-1 */\\n[md-theme=\"@themeName\"] .md-primary-fg.md-hue-1 {\\n    color: @primaryHue1Color !important;\\n}\\n\\n/* Primary foreground, Hue-2 */\\n[md-theme=\"@themeName\"] .md-primary-fg.md-hue-2 {\\n    color: @primaryHue2Color !important;\\n}\\n\\n/* Primary foreground, Hue-3 */\\n[md-theme=\"@themeName\"] .md-primary-fg.md-hue-3 {\\n    color: @primaryHue3Color !important;\\n}\\n\\n/* Accent */\\n[md-theme=\"@themeName\"] .md-accent-bg {\\n    background-color: @accentDefaultColor;\\n    color: @accentDefaultContrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg .secondary-text,\\n[md-theme=\"@themeName\"] .md-accent-bg .icon {\\n    color: @accentDefaultContrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg .hint-text,\\n[md-theme=\"@themeName\"] .md-accent-bg .disabled-text {\\n    color: @accentDefaultContrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg .fade-text,\\n[md-theme=\"@themeName\"] .md-accent-bg .divider {\\n    color: @accentDefaultContrast4;\\n}\\n\\n/* Accent, Hue-1 */\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 {\\n    background-color: @accentHue1Color;\\n    color: @accentHue1Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 .secondary-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 .icon {\\n    color: @accentHue1Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 .hint-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 .disabled-text {\\n    color: @accentHue1Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 .fade-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-1 .divider {\\n    color: @accentHue1Contrast4;\\n}\\n\\n/* Accent, Hue-2 */\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 {\\n    background-color: @accentHue2Color;\\n    color: @accentHue2Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 .secondary-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 .icon {\\n    color: @accentHue2Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 .hint-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 .disabled-text {\\n    color: @accentHue2Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 .fade-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-2 .divider {\\n    color: @accentHue2Contrast4;\\n}\\n\\n/* Accent, Hue-3 */\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 {\\n    background-color: @accentHue3Color;\\n    color: @accentHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 .secondary-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 .icon {\\n    color: @accentHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 .hint-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 .disabled-text {\\n    color: @accentHue3Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 .fade-text,\\n[md-theme=\"@themeName\"] .md-accent-bg.md-hue-3 .divider {\\n    color: @accentHue3Contrast4;\\n}\\n\\n/* Accent foreground */\\n[md-theme=\"@themeName\"] .md-accent-fg {\\n    color: @accentDefaultColor !important;\\n}\\n\\n/* Accent foreground, Hue-1 */\\n[md-theme=\"@themeName\"] .md-accent-fg.md-hue-1 {\\n    color: @accentHue1Color !important;\\n}\\n\\n/* Accent foreground, Hue-2 */\\n[md-theme=\"@themeName\"] .md-accent-fg.md-hue-2 {\\n    color: @accentHue2Color !important;\\n}\\n\\n/* Accent foreground, Hue-3 */\\n[md-theme=\"@themeName\"] .md-accent-fg.md-hue-3 {\\n    color: @accentHue3Color !important;\\n}\\n\\n/* Warn */\\n[md-theme=\"@themeName\"] .md-warn-bg {\\n    background-color: @warnDefaultColor;\\n    color: @warnDefaultContrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg .secondary-text,\\n[md-theme=\"@themeName\"] .md-warn-bg .icon {\\n    color: @warnDefaultContrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg .hint-text,\\n[md-theme=\"@themeName\"] .md-warn-bg .disabled-text {\\n    color: @warnDefaultContrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg .fade-text,\\n[md-theme=\"@themeName\"] .md-warn-bg .divider {\\n    color: @warnDefaultContrast4;\\n}\\n\\n/* Warn, Hue-1 */\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 {\\n    background-color: @warnHue1Color;\\n    color: @warnHue1Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 .secondary-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 .icon {\\n    color: @warnHue1Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 .hint-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 .disabled-text {\\n    color: @warnHue1Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 .fade-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-1 .divider {\\n    color: @warnHue1Contrast4;\\n}\\n\\n/* Warn, Hue-2 */\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 {\\n    background-color: @warnHue2Color;\\n    color: @warnHue2Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 .secondary-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 .icon {\\n    color: @warnHue2Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 .hint-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 .disabled-text {\\n    color: @warnHue2Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 .fade-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-2 .divider {\\n    color: @warnHue2Contrast4;\\n}\\n\\n/* Warn, Hue-3 */\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 {\\n    background-color: @warnHue3Color;\\n    color: @warnHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 .secondary-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 .icon {\\n    color: @warnHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 .hint-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 .disabled-text {\\n    color: @warnHue3Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 .fade-text,\\n[md-theme=\"@themeName\"] .md-warn-bg.md-hue-3 .divider {\\n    color: @warnHue3Contrast4;\\n}\\n\\n/* Warn foreground */\\n[md-theme=\"@themeName\"] .md-warn-fg {\\n    color: @warnDefaultColor !important;\\n}\\n\\n/* Warn foreground, Hue-1 */\\n[md-theme=\"@themeName\"] .md-warn-fg.md-hue-1 {\\n    color: @warnHue1Color !important;\\n}\\n\\n/* Warn foreground, Hue-2 */\\n[md-theme=\"@themeName\"] .md-warn-fg.md-hue-2 {\\n    color: @warnHue2Color !important;\\n}\\n\\n/* Warn foreground, Hue-3 */\\n[md-theme=\"@themeName\"] .md-warn-fg.md-hue-3 {\\n    color: @warnHue3Color !important;\\n}\\n\\n/* Background */\\n[md-theme=\"@themeName\"] .md-background-bg {\\n    background-color: @backgroundDefaultColor;\\n    color: @backgroundDefaultContrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg .secondary-text,\\n[md-theme=\"@themeName\"] .md-background-bg .icon {\\n    color: @backgroundDefaultContrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg .hint-text,\\n[md-theme=\"@themeName\"] .md-background-bg .disabled-text {\\n    color: @backgroundDefaultContrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg .fade-text,\\n[md-theme=\"@themeName\"] .md-background-bg .divider {\\n    color: @backgroundDefaultContrast4;\\n}\\n\\n/* Background, Hue-1 */\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 {\\n    background-color: @backgroundHue1Color;\\n    color: @backgroundHue1Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 .secondary-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 .icon {\\n    color: @backgroundHue1Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 .hint-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 .disabled-text {\\n    color: @backgroundHue1Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 .fade-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-1 .divider {\\n    color: @backgroundHue1Contrast4;\\n}\\n\\n/* Background, Hue-2 */\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 {\\n    background-color: @backgroundHue2Color;\\n    color: @backgroundHue2Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 .secondary-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 .icon {\\n    color: @backgroundHue2Contrast2;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 .hint-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 .disabled-text {\\n    color: @backgroundHue2Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 .fade-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-2 .divider {\\n    color: @backgroundHue2Contrast4;\\n}\\n\\n/* Background, Hue-3 */\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 {\\n    background-color: @backgroundHue3Color;\\n    color: @backgroundHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 .secondary-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 .icon {\\n    color: @backgroundHue3Contrast1;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 .hint-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 .disabled-text {\\n    color: @backgroundHue3Contrast3;\\n}\\n\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 .fade-text,\\n[md-theme=\"@themeName\"] .md-background-bg.md-hue-3 .divider {\\n    color: @backgroundHue3Contrast4;\\n}\\n\\n/* Background foreground */\\n[md-theme=\"@themeName\"] .md-background-fg {\\n    color: @backgroundDefaultColor !important;\\n}\\n\\n/* Background foreground, Hue-1 */\\n[md-theme=\"@themeName\"] .md-background-fg.md-hue-1 {\\n    color: @backgroundHue1Color !important;\\n}\\n\\n/* Background foreground, Hue-2 */\\n[md-theme=\"@themeName\"] .md-background-fg.md-hue-2 {\\n    color: @backgroundHue2Color !important;\\n}\\n\\n/* Background foreground, Hue-3 */\\n[md-theme=\"@themeName\"] .md-background-fg.md-hue-3 {\\n    color: @backgroundHue3Color !important;\\n}';\n\n            var regex = new RegExp(Object.keys(styleVars).join('|'), 'gi');\n            var css = cssTemplate.replace(regex, function (matched)\n            {\n                return styleVars[matched];\n            });\n\n            var headEl = angular.element('head');\n            var styleEl = angular.element('<style type=\"text/css\"></style>');\n            styleEl.html(css);\n            headEl.append(styleEl);\n        }\n\n        /**\n         * Convert color array to rgb/rgba\n         * Also apply contrasts if needed\n         *\n         * @param color\n         * @param _contrastLevel\n         * @returns {string}\n         */\n        function rgba(color, _contrastLevel)\n        {\n            var contrastLevel = _contrastLevel || false;\n\n            // Convert 255,255,255,0.XX to 255,255,255\n            // According to Google's Material design specs, white primary\n            // text must have opacity of 1 and we will fix that here\n            // because Angular Material doesn't care about that spec\n            if ( color.length === 4 && color[0] === 255 && color[1] === 255 && color[2] === 255 )\n            {\n                color.splice(3, 4);\n            }\n\n            // If contrast level provided, apply it to the current color\n            if ( contrastLevel )\n            {\n                color = applyContrast(color, contrastLevel);\n            }\n\n            // Convert color array to color string (rgb/rgba)\n            if ( color.length === 3 )\n            {\n                return 'rgb(' + color.join(',') + ')';\n            }\n            else if ( color.length === 4 )\n            {\n                return 'rgba(' + color.join(',') + ')';\n            }\n            else\n            {\n                $log.error('Invalid number of arguments supplied in the color array: ' + color.length + '\\n' + 'The array must have 3 or 4 colors.');\n            }\n        }\n\n        /**\n         * Apply given contrast level to the given color\n         *\n         * @param color\n         * @param contrastLevel\n         */\n        function applyContrast(color, contrastLevel)\n        {\n            var contrastLevels = {\n                'white': {\n                    '1': '1',\n                    '2': '0.7',\n                    '3': '0.3',\n                    '4': '0.12'\n                },\n                'black': {\n                    '1': '0.87',\n                    '2': '0.54',\n                    '3': '0.26',\n                    '4': '0.12'\n                }\n            };\n\n            // If white\n            if ( color[0] === 255 && color[1] === 255 && color[2] === 255 )\n            {\n                color[3] = contrastLevels.white[contrastLevel];\n            }\n            // If black\n            else if ( color[0] === 0 && color[1] === 0 && color[2] === 0 )\n            {\n                color[3] = contrastLevels.black[contrastLevel];\n            }\n\n            return color;\n        }\n\n        /**\n         * Uppercase first\n         */\n        function ucfirst(string)\n        {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .controller('MsThemeOptionsController', MsThemeOptionsController)\n        .directive('msThemeOptions', msThemeOptions);\n\n    /** @ngInject */\n    function MsThemeOptionsController($cookies, fuseTheming)\n    {\n        var vm = this;\n\n        // Data\n        vm.themes = fuseTheming.themes;\n\n        vm.layoutModes = [\n            {\n                label: 'Boxed',\n                value: 'boxed'\n            },\n            {\n                label: 'Wide',\n                value: 'wide'\n            }\n        ];\n        vm.layoutStyles = [\n            {\n                label : 'Vertical Navigation',\n                value : 'verticalNavigation',\n                figure: '/assets/images/theme-options/vertical-nav.jpg'\n            },\n            {\n                label : 'Vertical Navigation with Fullwidth Toolbar',\n                value : 'verticalNavigationFullwidthToolbar',\n                figure: '/assets/images/theme-options/vertical-nav-with-full-toolbar.jpg'\n            },\n            {\n                label : 'Vertical Navigation with Fullwidth Toolbar 2',\n                value : 'verticalNavigationFullwidthToolbar2',\n                figure: '/assets/images/theme-options/vertical-nav-with-full-toolbar-2.jpg'\n            },\n            {\n                label : 'Horizontal Navigation',\n                value : 'horizontalNavigation',\n                figure: '/assets/images/theme-options/horizontal-nav.jpg'\n            },\n            {\n                label : 'Content with Toolbar',\n                value : 'contentWithToolbar',\n                figure: '/assets/images/theme-options/content-with-toolbar.jpg'\n            },\n            {\n                label : 'Content Only',\n                value : 'contentOnly',\n                figure: '/assets/images/theme-options/content-only.jpg'\n            },\n        ];\n\n        vm.layoutMode = 'wide';\n        vm.layoutStyle = $cookies.get('layoutStyle') || 'verticalNavigation';\n\n        // Methods\n        vm.setActiveTheme = setActiveTheme;\n        vm.getActiveTheme = getActiveTheme;\n        vm.updateLayoutMode = updateLayoutMode;\n        vm.updateLayoutStyle = updateLayoutStyle;\n\n        //////////\n\n        /**\n         * Set active theme\n         *\n         * @param themeName\n         */\n        function setActiveTheme(themeName)\n        {\n            fuseTheming.setActiveTheme(themeName);\n        }\n\n        /**\n         * Get active theme\n         *\n         * @returns {service.themes.active|{name, theme}}\n         */\n        function getActiveTheme()\n        {\n            return fuseTheming.themes.active;\n        }\n\n        /**\n         * Update layout mode\n         */\n        function updateLayoutMode()\n        {\n            var bodyEl = angular.element('body');\n\n            // Update class on body element\n            bodyEl.toggleClass('boxed', (vm.layoutMode === 'boxed'));\n        }\n\n        /**\n         * Update layout style\n         */\n        function updateLayoutStyle()\n        {\n            // Update the cookie\n            $cookies.put('layoutStyle', vm.layoutStyle);\n\n            // Reload the page to apply the changes\n            location.reload();\n        }\n    }\n\n    /** @ngInject */\n    function msThemeOptions($mdSidenav)\n    {\n        return {\n            restrict   : 'E',\n            scope      : {},\n            controller : 'MsThemeOptionsController as vm',\n            templateUrl: 'app/core/theme-options/theme-options.html',\n            compile    : function (tElement)\n            {\n                tElement.addClass('ms-theme-options');\n\n                return function postLink(scope)\n                {\n                    /**\n                     * Toggle options sidenav\n                     */\n                    function toggleOptionsSidenav()\n                    {\n                        // Toggle the fuse theme options panel\n                        $mdSidenav('fuse-theme-options').toggle();\n                    }\n\n                    // Expose the toggle function\n                    scope.toggleOptionsSidenav = toggleOptionsSidenav;\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .factory('msUtils', msUtils);\n\n    /** @ngInject */\n    function msUtils($window)\n    {\n        // Private variables\n        var mobileDetect = new MobileDetect($window.navigator.userAgent),\n            browserInfo = null;\n\n        var service = {\n            exists       : exists,\n            detectBrowser: detectBrowser,\n            guidGenerator: guidGenerator,\n            isMobile     : isMobile,\n            toggleInArray: toggleInArray\n        };\n\n        return service;\n\n        //////////\n\n        /**\n         * Check if item exists in a list\n         *\n         * @param item\n         * @param list\n         * @returns {boolean}\n         */\n        function exists(item, list)\n        {\n            return list.indexOf(item) > -1;\n        }\n\n        /**\n         * Returns browser information\n         * from user agent data\n         *\n         * Found at http://www.quirksmode.org/js/detect.html\n         * but modified and updated to fit for our needs\n         */\n        function detectBrowser()\n        {\n            // If we already tested, do not test again\n            if ( browserInfo )\n            {\n                return browserInfo;\n            }\n\n            var browserData = [\n                {\n                    string       : $window.navigator.userAgent,\n                    subString    : 'Edge',\n                    versionSearch: 'Edge',\n                    identity     : 'Edge'\n                },\n                {\n                    string   : $window.navigator.userAgent,\n                    subString: 'Chrome',\n                    identity : 'Chrome'\n                },\n                {\n                    string       : $window.navigator.userAgent,\n                    subString    : 'OmniWeb',\n                    versionSearch: 'OmniWeb/',\n                    identity     : 'OmniWeb'\n                },\n                {\n                    string       : $window.navigator.vendor,\n                    subString    : 'Apple',\n                    versionSearch: 'Version',\n                    identity     : 'Safari'\n                },\n                {\n                    prop    : $window.opera,\n                    identity: 'Opera'\n                },\n                {\n                    string   : $window.navigator.vendor,\n                    subString: 'iCab',\n                    identity : 'iCab'\n                },\n                {\n                    string   : $window.navigator.vendor,\n                    subString: 'KDE',\n                    identity : 'Konqueror'\n                },\n                {\n                    string   : $window.navigator.userAgent,\n                    subString: 'Firefox',\n                    identity : 'Firefox'\n                },\n                {\n                    string   : $window.navigator.vendor,\n                    subString: 'Camino',\n                    identity : 'Camino'\n                },\n                {\n                    string   : $window.navigator.userAgent,\n                    subString: 'Netscape',\n                    identity : 'Netscape'\n                },\n                {\n                    string       : $window.navigator.userAgent,\n                    subString    : 'MSIE',\n                    identity     : 'Explorer',\n                    versionSearch: 'MSIE'\n                },\n                {\n                    string       : $window.navigator.userAgent,\n                    subString    : 'Trident/7',\n                    identity     : 'Explorer',\n                    versionSearch: 'rv'\n                },\n                {\n                    string       : $window.navigator.userAgent,\n                    subString    : 'Gecko',\n                    identity     : 'Mozilla',\n                    versionSearch: 'rv'\n                },\n                {\n                    string       : $window.navigator.userAgent,\n                    subString    : 'Mozilla',\n                    identity     : 'Netscape',\n                    versionSearch: 'Mozilla'\n                }\n            ];\n\n            var osData = [\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'Win',\n                    identity : 'Windows'\n                },\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'Mac',\n                    identity : 'Mac'\n                },\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'Linux',\n                    identity : 'Linux'\n                },\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'iPhone',\n                    identity : 'iPhone'\n                },\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'iPod',\n                    identity : 'iPod'\n                },\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'iPad',\n                    identity : 'iPad'\n                },\n                {\n                    string   : $window.navigator.platform,\n                    subString: 'Android',\n                    identity : 'Android'\n                }\n            ];\n\n            var versionSearchString = '';\n\n            function searchString(data)\n            {\n                for ( var i = 0; i < data.length; i++ )\n                {\n                    var dataString = data[i].string;\n                    var dataProp = data[i].prop;\n\n                    versionSearchString = data[i].versionSearch || data[i].identity;\n\n                    if ( dataString )\n                    {\n                        if ( dataString.indexOf(data[i].subString) !== -1 )\n                        {\n                            return data[i].identity;\n\n                        }\n                    }\n                    else if ( dataProp )\n                    {\n                        return data[i].identity;\n                    }\n                }\n            }\n\n            function searchVersion(dataString)\n            {\n                var index = dataString.indexOf(versionSearchString);\n\n                if ( index === -1 )\n                {\n                    return;\n                }\n\n                return parseInt(dataString.substring(index + versionSearchString.length + 1));\n            }\n\n            var browser = searchString(browserData) || 'unknown-browser';\n            var version = searchVersion($window.navigator.userAgent) || searchVersion($window.navigator.appVersion) || 'unknown-version';\n            var os = searchString(osData) || 'unknown-os';\n\n            // Prepare and store the object\n            browser = browser.toLowerCase();\n            version = browser + '-' + version;\n            os = os.toLowerCase();\n\n            browserInfo = {\n                browser: browser,\n                version: version,\n                os     : os\n            };\n\n            return browserInfo;\n        }\n\n        /**\n         * Generates a globally unique id\n         *\n         * @returns {*}\n         */\n        function guidGenerator()\n        {\n            var S4 = function ()\n            {\n                return (((1 + Math.random()) * 0x10000) || 0).toString(16).substring(1);\n            };\n            return (S4() + S4() + S4() + S4() + S4() + S4());\n        }\n\n        /**\n         * Return if current device is a\n         * mobile device or not\n         */\n        function isMobile()\n        {\n            return mobileDetect.mobile();\n        }\n\n        /**\n         * Toggle in array (push or splice)\n         *\n         * @param item\n         * @param array\n         */\n        function toggleInArray(item, array)\n        {\n            if ( array.indexOf(item) === -1 )\n            {\n                array.push(item);\n            }\n            else\n            {\n                array.splice(array.indexOf(item), 1);\n            }\n        }\n    }\n}());\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .provider('msApi', msApiProvider);\n\n    /** @ngInject **/\n    function msApiProvider()\n    {\n        /* ----------------- */\n        /* Provider          */\n        /* ----------------- */\n        var provider = this;\n\n        // Inject the $log service\n        var $log = angular.injector(['ng']).get('$log');\n\n        // Data\n        var baseUrl = '';\n        var api = [];\n\n        // Methods\n        provider.setBaseUrl = setBaseUrl;\n        provider.getBaseUrl = getBaseUrl;\n        provider.getApiObject = getApiObject;\n        provider.register = register;\n\n        //////////\n\n        /**\n         * Set base url for API endpoints\n         *\n         * @param url {string}\n         */\n        function setBaseUrl(url)\n        {\n            baseUrl = url;\n        }\n\n        /**\n         * Return the base url\n         *\n         * @returns {string}\n         */\n        function getBaseUrl()\n        {\n            return baseUrl;\n        }\n\n        /**\n         * Return the api object\n         *\n         * @returns {object}\n         */\n        function getApiObject()\n        {\n            return api;\n        }\n\n        /**\n         * Register API endpoint\n         *\n         * @param key\n         * @param resource\n         */\n        function register(key, resource)\n        {\n            if ( !angular.isString(key) )\n            {\n                $log.error('\"path\" must be a string (eg. `dashboard.project`)');\n                return;\n            }\n\n            if ( !angular.isArray(resource) )\n            {\n                $log.error('\"resource\" must be an array and it must follow $resource definition');\n                return;\n            }\n\n            // Store the API object\n            api[key] = {\n                url          : baseUrl + (resource[0] || ''),\n                paramDefaults: resource[1] || [],\n                actions      : resource[2] || [],\n                options      : resource[3] || {}\n            };\n        }\n\n        /* ----------------- */\n        /* Service           */\n        /* ----------------- */\n        this.$get = function ($log, $q, $resource, $rootScope)\n        {\n            // Data\n\n            // Methods\n            var service = {\n                setBaseUrl: setBaseUrl,\n                getBaseUrl: getBaseUrl,\n                register  : register,\n                resolve   : resolve,\n                request   : request\n            };\n\n            return service;\n\n            //////////\n\n            /**\n             * Resolve an API endpoint\n             *\n             * @param action {string}\n             * @param parameters {object}\n             * @returns {promise|boolean}\n             */\n            function resolve(action, parameters)\n            {\n                // Emit an event\n                $rootScope.$broadcast('msApi::resolveStart');\n                \n                var actionParts = action.split('@'),\n                    resource = actionParts[0],\n                    method = actionParts[1],\n                    params = parameters || {};\n\n                if ( !resource || !method )\n                {\n                    $log.error('msApi.resolve requires correct action parameter (resourceName@methodName)');\n                    return false;\n                }\n\n                // Create a new deferred object\n                var deferred = $q.defer();\n\n                // Get the correct resource definition from api object\n                var apiObject = api[resource];\n\n                if ( !apiObject )\n                {\n                    $log.error('Resource \"' + resource + '\" is not defined in the api service!');\n                    deferred.reject('Resource \"' + resource + '\" is not defined in the api service!');\n                }\n                else\n                {\n                    // Generate the $resource object based on the stored API object\n                    var resourceObject = $resource(apiObject.url, apiObject.paramDefaults, apiObject.actions, apiObject.options);\n\n                    // Make the call...\n                    resourceObject[method](params,\n\n                        // Success\n                        function (response)\n                        {\n                            deferred.resolve(response);\n\n                            // Emit an event\n                            $rootScope.$broadcast('msApi::resolveSuccess');\n                        },\n\n                        // Error\n                        function (response)\n                        {\n                            deferred.reject(response);\n\n                            // Emit an event\n                            $rootScope.$broadcast('msApi::resolveError');\n                        }\n                    );\n                }\n\n                // Return the promise\n                return deferred.promise;\n            }\n\n            /**\n             * Make a request to an API endpoint\n             *\n             * @param action {string}\n             * @param [parameters] {object}\n             * @param [success] {function}\n             * @param [error] {function}\n             *\n             * @returns {promise|boolean}\n             */\n            function request(action, parameters, success, error)\n            {\n                // Emit an event\n                $rootScope.$broadcast('msApi::requestStart');\n                \n                var actionParts = action.split('@'),\n                    resource = actionParts[0],\n                    method = actionParts[1],\n                    params = parameters || {};\n\n                if ( !resource || !method )\n                {\n                    $log.error('msApi.resolve requires correct action parameter (resourceName@methodName)');\n                    return false;\n                }\n\n                // Create a new deferred object\n                var deferred = $q.defer();\n\n                // Get the correct resource definition from api object\n                var apiObject = api[resource];\n\n                if ( !apiObject )\n                {\n                    $log.error('Resource \"' + resource + '\" is not defined in the api service!');\n                    deferred.reject('Resource \"' + resource + '\" is not defined in the api service!');\n                }\n                else\n                {\n                    // Generate the $resource object based on the stored API object\n                    var resourceObject = $resource(apiObject.url, apiObject.paramDefaults, apiObject.actions, apiObject.options);\n\n                    // Make the call...\n                    resourceObject[method](params,\n\n                        // SUCCESS\n                        function (response)\n                        {\n                            // Emit an event\n                            $rootScope.$broadcast('msApi::requestSuccess');\n                            \n                            // Resolve the promise\n                            deferred.resolve(response);\n\n                            // Call the success function if there is one\n                            if ( angular.isDefined(success) && angular.isFunction(success) )\n                            {\n                                success(response);\n                            }\n                        },\n\n                        // ERROR\n                        function (response)\n                        {\n                            // Emit an event\n                            $rootScope.$broadcast('msApi::requestError');\n                            \n                            // Reject the promise\n                            deferred.reject(response);\n\n                            // Call the error function if there is one\n                            if ( angular.isDefined(error) && angular.isFunction(error) )\n                            {\n                                error(response);\n                            }\n                        }\n                    );\n                }\n\n                // Return the promise\n                return deferred.promise;\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .factory('apiResolver', apiResolverService);\n\n    /** @ngInject */\n    function apiResolverService($q, $log, api)\n    {\n        var service = {\n            resolve: resolve\n        };\n\n        return service;\n\n        //////////\n        /**\n         * Resolve api\n         * @param action\n         * @param parameters\n         */\n        function resolve(action, parameters)\n        {\n            var actionParts = action.split('@'),\n                resource = actionParts[0],\n                method = actionParts[1],\n                params = parameters || {};\n\n            if ( !resource || !method )\n            {\n                $log.error('apiResolver.resolve requires correct action parameter (ResourceName@methodName)');\n                return false;\n            }\n\n            // Create a new deferred object\n            var deferred = $q.defer();\n\n            // Get the correct api object from api service\n            var apiObject = getApiObject(resource);\n\n            if ( !apiObject )\n            {\n                $log.error('Resource \"' + resource + '\" is not defined in the api service!');\n                deferred.reject('Resource \"' + resource + '\" is not defined in the api service!');\n            }\n            else\n            {\n                apiObject[method](params,\n\n                    // Success\n                    function (response)\n                    {\n                        deferred.resolve(response);\n                    },\n\n                    // Error\n                    function (response)\n                    {\n                        deferred.reject(response);\n                    }\n                );\n            }\n\n            // Return the promise\n            return deferred.promise;\n        }\n\n        /**\n         * Get correct api object\n         *\n         * @param resource\n         * @returns {*}\n         */\n        function getApiObject(resource)\n        {\n            // Split the resource in case if we have a dot notated object\n            var resourceParts = resource.split('.'),\n                apiObject = api;\n\n            // Loop through the resource parts and go all the way through\n            // the api object and return the correct one\n            for ( var l = 0; l < resourceParts.length; l++ )\n            {\n                if ( angular.isUndefined(apiObject[resourceParts[l]]) )\n                {\n                    $log.error('Resource part \"' + resourceParts[l] + '\" is not defined!');\n                    apiObject = false;\n                    break;\n                }\n\n                apiObject = apiObject[resourceParts[l]];\n            }\n\n            if ( !apiObject )\n            {\n                return false;\n            }\n\n            return apiObject;\n        }\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .filter('filterByTags', filterByTags)\n        .filter('filterSingleByTags', filterSingleByTags);\n\n    /** @ngInject */\n    function filterByTags()\n    {\n        return function (items, tags)\n        {\n            if ( items.length === 0 || tags.length === 0 )\n            {\n                return items;\n            }\n\n            var filtered = [];\n\n            items.forEach(function (item)\n            {\n                var match = tags.every(function (tag)\n                {\n                    var tagExists = false;\n\n                    item.tags.forEach(function (itemTag)\n                    {\n                        if ( itemTag.name === tag.name )\n                        {\n                            tagExists = true;\n                            return;\n                        }\n                    });\n\n                    return tagExists;\n                });\n\n                if ( match )\n                {\n                    filtered.push(item);\n                }\n            });\n\n            return filtered;\n        };\n    }\n\n    /** @ngInject */\n    function filterSingleByTags()\n    {\n        return function (itemTags, tags)\n        {\n            if ( itemTags.length === 0 || tags.length === 0 )\n            {\n                return;\n            }\n\n            if ( itemTags.length < tags.length )\n            {\n                return [];\n            }\n\n            var filtered = [];\n\n            var match = tags.every(function (tag)\n            {\n                var tagExists = false;\n\n                itemTags.forEach(function (itemTag)\n                {\n                    if ( itemTag.name === tag.name )\n                    {\n                        tagExists = true;\n                        return;\n                    }\n                });\n\n                return tagExists;\n            });\n\n            if ( match )\n            {\n                filtered.push(itemTags);\n            }\n\n            return filtered;\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .filter('filterByPropIds', filterByPropIds);\n\n    /** @ngInject */\n    function filterByPropIds()\n    {\n        return function (items, parameter, ids)\n        {\n            if ( items.length === 0 || !ids || ids.length === 0 )\n            {\n                return items;\n            }\n\n            var filtered = [];\n\n            for ( var i = 0; i < items.length; i++ )\n            {\n                var item = items[i];\n                var match = false;\n\n                for ( var j = 0; j < ids.length; j++ )\n                {\n                    var id = ids[j];\n                    if ( item[parameter].indexOf(id) > -1 )\n                    {\n                        match = true;\n                        break;\n                    }\n                }\n\n                if ( match )\n                {\n                    filtered.push(item);\n                }\n\n            }\n\n            return filtered;\n\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .filter('filterByIds', filterByIds);\n\n    /** @ngInject */\n    function filterByIds()\n    {\n        return function (items, ids)\n        {\n\n            if ( items.length === 0 || !ids )\n            {\n                return items;\n            }\n\n            if ( ids.length === 0 )\n            {\n                return [];\n            }\n\n            var filtered = [];\n\n            for ( var i = 0; i < items.length; i++ )\n            {\n                var item = items[i];\n                var match = false;\n\n                for ( var j = 0; j < ids.length; j++ )\n                {\n                    var id = ids[j];\n                    if ( item.id === id )\n                    {\n                        match = true;\n                        break;\n                    }\n                }\n\n                if ( match )\n                {\n                    filtered.push(item);\n                }\n\n            }\n\n            return filtered;\n\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .filter('toTrusted', toTrustedFilter)\n        .filter('htmlToPlaintext', htmlToPlainTextFilter)\n        .filter('nospace', nospaceFilter)\n        .filter('humanizeDoc', humanizeDocFilter);\n\n    /** @ngInject */\n    function toTrustedFilter($sce)\n    {\n        return function (value)\n        {\n            return $sce.trustAsHtml(value);\n        };\n    }\n\n    /** @ngInject */\n    function htmlToPlainTextFilter()\n    {\n        return function (text)\n        {\n            return String(text).replace(/<[^>]+>/gm, '');\n        };\n    }\n\n    /** @ngInject */\n    function nospaceFilter()\n    {\n        return function (value)\n        {\n            return (!value) ? '' : value.replace(/ /g, '');\n        };\n    }\n\n    /** @ngInject */\n    function humanizeDocFilter()\n    {\n        return function (doc)\n        {\n            if ( !doc )\n            {\n                return;\n            }\n            if ( doc.type === 'directive' )\n            {\n                return doc.name.replace(/([A-Z])/g, function ($1)\n                {\n                    return '-' + $1.toLowerCase();\n                });\n            }\n            return doc.label || doc.name;\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .filter('altDate', altDate);\n\n    /** @ngInject */\n    function altDate()\n    {\n        return function (value)\n        {\n            var diff = Date.now() - new Date(value);\n\n            /**\n             * If in a hour\n             * e.g. \"2 minutes ago\"\n             */\n            if ( diff < (60 * 60 * 1000) )\n            {\n                return moment(value).fromNow();\n            }\n            /*\n             * If in the day\n             * e.g. \"11:23\"\n             */\n            else if ( diff < (60 * 60 * 24 * 1000) )\n            {\n                return moment(value).format('HH:mm');\n            }\n            /*\n             * If in week\n             * e.g \"Tuesday\"\n             */\n            else if ( diff < (60 * 60 * 24 * 7 * 1000) )\n            {\n                return moment(value).format('dddd');\n            }\n            /*\n             * If more than a week\n             * e.g. 03/29/2016\n             */\n            else\n            {\n                return moment(value).calendar();\n            }\n\n        };\n    }\n\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('app.core')\n        .directive('hljs', hljsDirective);\n\n    /** @ngInject */\n    function hljsDirective($timeout, $q, $interpolate) {\n        return {\n            restrict: 'E',\n            compile : function (element, attr) {\n                var code;\n                //No attribute? code is the content\n                if (!attr.code) {\n                    code = element.html();\n                    element.empty();\n                }\n\n                return function (scope, element, attr) {\n\n                    if (attr.code) {\n                        // Attribute? code is the evaluation\n                        code = scope.$eval(attr.code);\n                    }\n                    var shouldInterpolate = scope.$eval(attr.shouldInterpolate);\n\n                    $q.when(code).then(function (code) {\n                        if (code) {\n                            if (shouldInterpolate) {\n                                code = $interpolate(code)(scope);\n                            }\n                            var contentParent = angular.element(\n                                '<pre><code class=\"highlight\" ng-non-bindable></code></pre>'\n                            );\n                            element.append(contentParent);\n                            // Defer highlighting 1-frame to prevent GA interference...\n                            $timeout(function () {\n                                render(code, contentParent);\n                            }, 34, false);\n                        }\n                    });\n\n                    function render(contents, parent) {\n\n                        var codeElement = parent.find('code');\n                        var lines = contents.split('\\n');\n\n                        // Remove empty lines\n                        lines = lines.filter(function (line) {\n                            return line.trim().length;\n                        });\n\n                        // Make it so each line starts at 0 whitespace\n                        var firstLineWhitespace = lines[0].match(/^\\s*/)[0];\n                        var startingWhitespaceRegex = new RegExp('^' + firstLineWhitespace);\n                        lines = lines.map(function (line) {\n                            return line\n                                .replace(startingWhitespaceRegex, '')\n                                .replace(/\\s+$/, '');\n                        });\n\n                        var highlightedCode = hljs.highlight(attr.language || attr.lang, lines.join('\\n'), true);\n                        highlightedCode.value = highlightedCode.value\n                            .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n                            .replace('<head>', '')\n                            .replace('<head/>', '');\n                        codeElement.append(highlightedCode.value).addClass('highlight');\n                    }\n                };\n            }\n        };\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .provider('fuseConfig', fuseConfigProvider);\n\n    /** @ngInject */\n    function fuseConfigProvider()\n    {\n        // Default configuration\n        var fuseConfiguration = {\n            'disableCustomScrollbars'        : false,\n            'disableMdInkRippleOnMobile'     : true,\n            'disableCustomScrollbarsOnMobile': true\n        };\n\n        // Methods\n        this.config = config;\n\n        //////////\n\n        /**\n         * Extend default configuration with the given one\n         *\n         * @param configuration\n         */\n        function config(configuration)\n        {\n            fuseConfiguration = angular.extend({}, fuseConfiguration, configuration);\n        }\n\n        /**\n         * Service\n         */\n        this.$get = function ()\n        {\n            var service = {\n                getConfig: getConfig,\n                setConfig: setConfig\n            };\n\n            return service;\n\n            //////////\n\n            /**\n             * Returns a config value\n             */\n            function getConfig(configName)\n            {\n                if ( angular.isUndefined(fuseConfiguration[configName]) )\n                {\n                    return false;\n                }\n\n                return fuseConfiguration[configName];\n            }\n\n            /**\n             * Creates or updates config object\n             *\n             * @param configName\n             * @param configValue\n             */\n            function setConfig(configName, configValue)\n            {\n                fuseConfiguration[configName] = configValue;\n            }\n        };\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    /**\n     * Main module of the Fuse\n     */\n    angular\n        .module('fuse', [\n            // Common 3rd Party Dependencies\n            'uiGmapgoogle-maps',\n            'lbServices',\n            'angularMoment',\n            'LocalStorageModule',\n            'md.data.table',\n            'toastr',\n            'ngRadialGauge',\n            'jkAngularCarousel',\n\n            // Core\n            'app.core',\n\n            //Auth\n            'app.auth',\n\n            // Theme Haibu Smart\n            'app.theme',\n\n            //Services\n            'app.services',\n\n            // Navigation\n            'app.navigation',\n\n            // Toolbar\n            'app.toolbar',\n\n            // Pages\n            'app.pages'\n\n           \n        ]);\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('fuse')\n        .factory('uiHelper', uiHelper);\n\n    function uiHelper( $mdToast) {\n        var service = {\n            showToast: showToast\n        };\n        return service;\n\n        function showToast(text, time, position) {\n            $mdToast.show(\n\t\t      $mdToast.simple()\n\t\t        .textContent(text)\n\t\t        .position( position||'top right')\n\t\t        .hideDelay(time||3000)\n\t\t    );\n        }\n\n       \n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.toolbar', [])\n        .config(config);\n\n    /** @ngInject */\n    function config($translatePartialLoaderProvider)\n    {\n        $translatePartialLoaderProvider.addPart('app/toolbar');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('app.toolbar')\n        .controller('ToolbarController', ToolbarController);\n\n    /** @ngInject */\n    function ToolbarController($scope, $rootScope, $q, $state, $timeout, $mdSidenav, $translate, $mdToast, $log, $mdDialog, msNavigationService, authService, Device, LoopBackAuth, managerDeviceService,AlertService,ChartService,HelperService, MQTTUtils) {\n        var vm = this;\n\n        // Data\n        $rootScope.global = {\n            search: ''\n        };\n\n        vm.bodyEl = angular.element('body');\n        vm.languages = {\n            en: {\n                'title': 'English',\n                'translation': 'TOOLBAR.ENGLISH',\n                'code': 'en',\n                'flag': 'us'\n            },\n            es: {\n                'title': 'Spanish',\n                'translation': 'TOOLBAR.SPANISH',\n                'code': 'es',\n                'flag': 'es'\n            }\n        };\n\n        // Methods\n        vm.toggleSidenav= toggleSidenav;\n        vm.logout = logout;\n        vm.changeLanguage = changeLanguage;\n        vm.addNode = addNode;\n        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;\n        vm.toggleMsNavigationFolded = toggleMsNavigationFolded;\n        vm.search = search;\n        vm.searchResultClick = searchResultClick;\n\n\n\n        //////////\n\n        init();\n\n        /**\n         * Initialize\n         */\n        function init() {\n            authService.getCurrentUser().then(function(response) {\n                 vm.customer=response;\n            });\n            vm.selectedLanguage = vm.languages[$translate.preferredLanguage()];\n        }\n\n\n        $rootScope.$on('updateProfile', function(event, newProfile) {\n          $log.debug(newProfile);\n          vm.customer=newProfile;\n        });\n\n\n        function toggleSidenav(sidenavId) {\n            $mdSidenav(sidenavId).toggle();\n        }\n\n\n        /**\n         * Add node to User\n         */\n        function addNode(ev) {\n            $mdDialog.show({\n                controller: addNodeController,\n                controllerAs: 'vm',\n                templateUrl: 'app/toolbar/addNode.html',\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                clickOutsideToClose: false\n            }).then(function(device) {\n                MQTTUtils.onStartWatchDevice(device);\n                HelperService.changeIconMarker(device);\n                  device.historyChart= ChartService.createHistory();\n                  device.gagueDO = ChartService.createGague(0,20,\"mg/l\",[\n                  {\n                      min: 0,\n                      max: 4.5,\n                      color: '#c74048'\n                  },\n                  {\n                      min: 4.5,\n                      max: 6.0,\n                      color: '#d58d34'\n                  },\n                  {\n                      min: 6.0,\n                      max: 20,\n                      color: '#37af45'\n                  }\n                  ]);\n                  \n                  device.gagueWT = ChartService.createGague(-40,40,\"°C\",[\n                  {\n                      min: -40,\n                      max: 40,\n                      color: '#37af45'\n                  }]); \n                  \n                  managerDeviceService.getLastEvent(device).then(function(response) {\n                    device.event=response;\n                    AlertService.checkOldAlert(device);\n                  }).catch(function(error) {\n                    $log.debug(\"no cache\");\n                  });\n                    showState(ev,device);\n            });\n        }\n\n\n        function showState(ev,response) {\n             $mdDialog.show(\n              $mdDialog.alert()\n                .parent(angular.element(document.querySelector('document.body')))\n                .clickOutsideToClose(false)\n                .title('Agregar Nodo')\n                .textContent('El nodo '+ response.name+' se ha sido seguido con éxito.')\n                .ariaLabel('Agregar de Nodo')\n                .ok('Aceptar')\n                .targetEvent(ev)\n            ).then(function() {\n                // $state.go(\"app.home\");\n            });\n        }\n\n        function addNodeController($rootScope,$scope,$log, Device, $mdDialog, managerDeviceService) {\n            var vm = this;\n            vm.hide = hide;\n            vm.cancel = cancel;\n            vm.add = add;\n\n\n           \n\n            function hide() {\n                $mdDialog.hide();\n            }\n\n            function cancel() {\n                $mdDialog.cancel();\n            }\n\n\n            function add() {\n                $rootScope.loader =true;\n                var node = vm.deviceForm;\n                node.userId = LoopBackAuth.currentUserId;\n                $log.debug(\"Node\", node);\n                $log.debug(\"------------\");\n                Device.create(node).$promise.then(function(response) {\n                    managerDeviceService.newDeviceCache(response);\n                    $mdDialog.hide(response);\n                }).catch(function(response) {\n                    if (response.status = 401) {\n                        if (response.data) {\n                            var dataError = response.data.error;\n                            if (dataError.statusCode == 404)\n                                $scope.deviceForm['deviceId'].$setValidity(\"not_found\", false);\n\n\n                        }\n\n\n                    }\n                }).finally(function() {\n                    $rootScope.loader =false;\n                });\n\n            }\n        }\n\n        /*\n         * Logout Function\n         */\n        function logout() {\n            $rootScope.loader =true;\n            authService.logout().then(function(response) {\n                $state.go('app.auth_login');\n            }).finally(function() {\n                $rootScope.loader =false;\n            });\n\n        }\n\n        /**\n         * Change Language\n         */\n        function changeLanguage(lang) {\n            vm.selectedLanguage = lang;\n            $translate.use(lang.code);\n        }\n\n        /**\n         * Toggle horizontal mobile menu\n         */\n        function toggleHorizontalMobileMenu() {\n            vm.bodyEl.toggleClass('ms-navigation-horizontal-mobile-menu-active');\n        }\n\n        /**\n         * Toggle msNavigation folded\n         */\n        function toggleMsNavigationFolded() {\n            msNavigationService.toggleFolded();\n        }\n\n        /**\n         * Search action\n         *\n         * @param query\n         * @returns {Promise}\n         */\n        function search(query) {\n            var navigation = [],\n                flatNavigation = msNavigationService.getFlatNavigation(),\n                deferred = $q.defer();\n\n            // Iterate through the navigation array and\n            // make sure it doesn't have any groups or\n            // none ui-sref items\n            for (var x = 0; x < flatNavigation.length; x++) {\n                if (flatNavigation[x].uisref) {\n                    navigation.push(flatNavigation[x]);\n                }\n            }\n\n            // Todo acceso directo a nodos\n            if (query) {\n                navigation = navigation.filter(function(item) {\n                    if (angular.lowercase(item.title).search(angular.lowercase(query)) > -1) {\n                        return true;\n                    }\n                });\n            }\n\n            // Fake service delay\n            $timeout(function() {\n                deferred.resolve(navigation);\n            }, 1000);\n\n            return deferred.promise;\n        }\n\n        /**\n         * Search result click action\n         *\n         * @param item\n         */\n        function searchResultClick(item) {\n            // If item has a link\n            if (item.uisref) {\n                // If there are state params,\n                // use them...\n                if (item.stateParams) {\n                    $state.go(item.state, item.stateParams);\n                } else {\n                    $state.go(item.state);\n                }\n            }\n        }\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.theme',[]);\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.theme')\n        .config(config);\n\n    /** @ngInject */\n    function config($mdThemingProvider, haibuSmartPalettes, haibuSmartThemes)\n    {\n    \n\n        //Add haibuSmart  palettes\n        angular.forEach(haibuSmartPalettes, function (palette)\n        {\n            $mdThemingProvider.definePalette(palette.name, palette.options);\n        });\n\n        //Add haibuSmart themes\n        angular.forEach(haibuSmartThemes, function (theme, themeName)\n        {\n            $mdThemingProvider.theme(themeName)\n                .primaryPalette(theme.primary.name, theme.primary.hues)\n                .accentPalette(theme.accent.name, theme.accent.hues)\n                .warnPalette(theme.warn.name, theme.warn.hues)\n                .backgroundPalette(theme.background.name, theme.background.hues);\n        });\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    var haibuSmartThemes = {\n        haibuSmart  : {\n            primary   : {\n                name: 'haibuSmart-blue',\n                hues: {\n                    'default': 'A700',\n                    'hue-1'  : 'A700',\n                    'hue-2'  : 'A400'\n                }\n            },\n            accent    : { //oscuro\n                name: 'haibuSmart-blue',\n                hues: {\n                    'default': '800',\n                    'hue-1'  : '800',     \n                    'hue-2'  : '900',              \n                }\n            },\n            warn      : {\n                 name: 'haibuSmart-red',\n                hues: {\n                    'default': 'A700',\n                    'hue-1'  : 'A400'        \n                }\n            },\n            background: {\n                name: 'grey',\n                hues: {\n                    'default': 'A100',\n                    'hue-1'  : 'A100',\n                    'hue-2'  : '100',\n                    'hue-3'  : '300'\n                }\n            }\n        }\n    };\n\n  \n    angular\n        .module('app.theme')\n        .constant('haibuSmartThemes', haibuSmartThemes);\n})();\n(function () {\n    'use strict';\n\n    var haibuSmartPalettes = [\n        {\n            name: 'haibuSmart-blue',\n            options: {\n                '50': '#000000',\n                '100': '#000000',\n                '200': '#000000',\n                '300': '#000000',\n                '400': '#000000',\n                '500': '#000000',\n                '600': '#000000',\n                '700': '#000000', \n                '800': '#0075C9', // azul semi oscuro\n                '900': '#005A83', //azul oscura\n                'A100': '#000000', \n                'A200': '#000000',\n                'A400': '#0095F4', //claro- 2\n                'A700': '#009bde', //claro\n                'contrastDefaultColor': 'light',\n                'contrastDarkColors': '50 100 200 A100',\n                'contrastStrongLightColors': '300 400'\n            }\n        },\n        {\n            name: 'haibuSmart-red',\n            options: {\n                '50': '#c74048',\n                '100': '#c74048',\n                '200': '#c74048',\n                '300': '#c74048',\n                '400': '#c74048',\n                '500': '#c74048',\n                '600': '#c74048',\n                '700': '#c74048',\n                '800': '#c74048',\n                '900': '#c74048',\n                'A100': '#c74048',\n                'A200': '#c74048',\n                'A400': '#c74048',\n                'A700': '#c74048',\n                'contrastDefaultColor': 'light',\n                'contrastDarkColors': '50 100 200 A100',\n                'contrastStrongLightColors': '300 400'\n            }\n        }\n    ];\n\n    angular\n        .module('app.theme')\n        .constant('haibuSmartPalettes', haibuSmartPalettes);\n})();\n\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.services',[]);\n})();\n(function () {\n  'use strict';\n\n  angular\n    .module('app.services')\n    .factory('ToastService', ToastService);\n\n  /** @ngInject */\n  function ToastService($mdToast,toastr) {\n\n    var service = {\n      error: error,\n      toastrError: toastrError,\n      success: success,\n      info : info\n    };\n\n    return service;\n\n    function toastrError(text) {\n      toastr.error(text, 'Error');\n\n    }\n\n    function success(text) {\n      $mdToast.show(\n        $mdToast.simple()\n          .toastClass(\"toast-success\")\n          .action('Aceptar')\n          .hideDelay(10000)\n          .position('top right')\n          .textContent(text)\n      );\n    }\n\n    function info(text) {\n       toastr.info(text, 'Información',{timeOut:2000});\n\n    }\n\n    function error(text) {\n      $mdToast.show(\n        $mdToast.simple()\n          .toastClass(\"toast-error\")\n          .action('Aceptar')\n          .hideDelay(10000)\n          .position('top right')\n          .textContent(text)\n      );\n    }\n  }\n}());\n(function() {\n    'use strict';\n\n    angular\n        .module('app.services')\n        .factory('MQTTUtils', MQTTUtils);\n\n    function MQTTUtils($rootScope, $timeout, $log,$q, HelperService, AlertService,_, MQTT, ORG, USERNAME, PASSWORD, WSBROKER, WSPORT) {\n        var utils;\n        var cliente;\n        var reconnectTimeout = 1000;\n        var UUID = createUuid();\n        var watches = [];\n        var State = {\n            CONNECTED: \"CONNECTED\",\n            DISCONNECTED: \"DISCONNECTED\"\n        };\n        var state = State.DISCONNECTED;\n\n        utils = {\n            connectClient: connectClient,\n            addWatch: addWatch,\n            onStartWatchDevices: onStartWatchDevices,\n            onStartWatchDevice: onStartWatchDevice,\n            onStopAllWatches: onStopAllWatches,\n            send: send\n        };\n\n        return utils;\n\n        function connectClient() {\n\n            var mqttServer = WSBROKER;\n            var mqttPort = WSPORT;\n            var mqttCliente = \"a:\" + ORG + \":\" + UUID;\n\n            var options = {\n                onSuccess: onConnect,\n                cleanSession: true,\n                useSSL: true,\n                userName: USERNAME,\n                password: PASSWORD,\n\n                onFailure: function(message) {\n                    $log.debug(\"Fail: \", message);\n                    state = State.DISCONNECTED;\n                    $timeout(connectClient, reconnectTimeout);\n                }\n            };\n            cliente = new MQTT.Client(mqttServer, mqttPort, mqttCliente);\n            cliente.onConnectionLost = onConnectionLost;\n            cliente.onMessageArrived = onMessageArrived;\n            cliente.connect(options);\n\n\n\n        }\n\n\n\n        function send(msg, qos) {\n            var mqttMsg = new MQTT.Message(JSON.stringify(msg));\n            mqttMsg.destinationName = destinationName;\n            mqttMsg.qos = qos || 2;\n            $log.debug('Send to ' + mqttMsg.destinationName + \", payload: \" + JSON.stringify(msg));\n            cliente.send(mqttMsg);\n\n\n        }\n\n\n\n        function onConnectionLost(responseObject) {\n            state = State.DISCONNECTED;\n            $timeout(function() {\n                $log.debug(\"MQTT Client: Reconnecting...\");\n                connectClient();\n            }, 100)\n            if (responseObject.errorCode !== 0) {\n                $log.debug(\"onConnectionLost:\" + responseObject.errorMessage);\n            }\n        }\n\n\n\n        function onConnect() {\n            state = State.CONNECTED;\n            $log.debug('Client onConnected');\n            handlePendingSubscribes();\n\n        }\n\n        function onStartWatchDevices(devices) {\n            for (var i = 0; i < devices.length; i++) {\n                var topic = 'iot-2/type/' + devices[i].typeId + '/id/' + devices[i].deviceId + '/evt/6/fmt/json';\n                if (!watches[topic] || watches[topic].length == 0) {\n                    addWatch(topic);\n\n                    if (state == State.CONNECTED) {\n                        $log.debug(\"subscribe to \" + topic);\n                        cliente.subscribe(topic);\n                    }\n                }\n            };\n        }\n\n        function onStartWatchDevice(device) {\n            var topic = 'iot-2/type/' + device.typeId + '/id/' + device.deviceId + '/evt/6/fmt/json';\n            if (!watches[topic] || watches[topic].length == 0) {\n                addWatch(topic);\n\n                if (state == State.CONNECTED) {\n                    $log.debug(\"subscribe to \" + topic);\n                    cliente.subscribe(topic);\n                }\n            }\n        }\n\n        function handlePendingSubscribes() {\n            var topics = watches;\n            for (var i = 0; i < topics.length; i++) {\n                var topic = topics[i];\n                $log.debug(\"handle  subscribe to \" + topic);\n                cliente.subscribe(topic);\n            }\n        }\n\n        function addWatch(topic) {\n            if (watches.indexOf(topic) == -1) {\n                watches.push(topic);\n            }\n        }\n\n\n        function onStopAllWatches() {\n            for (var i = 0; i < watches.length; i++) {\n                var topic = watches[i];\n                $log.debug(\"unsubscribing from \" + topic);\n                if (cliente && state == State.CONNECTED)\n                    cliente.unsubscribe(topic);\n            }\n            watches = [];\n\n        }\n\n        function createUuid() {\n            function S4() {\n                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n            }\n            return (S4() + S4() + '-' + S4() + '-4' + S4().substr(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase();\n        }\n\n\n        function onMessageArrived(message) {\n            $log.debug(message);\n            if (message && message.payloadString !== \"\") {\n                var topic = message.destinationName;\n                var typeId = topic.split(\"/\")[2];\n                var deviceId = topic.split(\"/\")[4];\n                var evtType = topic.split(\"/\")[6];\n                var payload = JSON.parse(message.payloadString).d;\n                var timestamp = (new Date()).getTime();\n                var dataOriginal = angular.copy(payload);\n                var data = HelperService.addWeight(payload);\n                var deviceEvent = {\n                    deviceId: deviceId,\n                    deviceType: typeId,\n                    eventType: evtType,\n                    data: data,\n                    dataOriginal: dataOriginal,\n                    timestamp: timestamp\n                }\n\n                $log.debug(\"onMessageArrived:\", deviceEvent);\n                 update(deviceEvent);\n                 AlertService.checkAlert(deviceEvent);\n            }\n        }\n\n\n        \n\n\n        function update(data) {\n            $rootScope.$broadcast('update', data);\n        }\n\n       \n       \n     \n\n        \n\n\n\n\n    }\n\n})();\n(function () {\n  'use strict';\n\n  angular\n    .module('app.services')\n    .factory('MareasService', MareasService);\n\n  /** @ngInject */\n  function MareasService($http,_ , moment) {\n  \t//var url='http://www.shoa.cl/mareas/mareas_p.php';\n\t// var headers = {\n\t// \t\t\t'Access-Control-Allow-Origin' : '*',\n\t// \t\t\t'Access-Control-Allow-Methods' : 'POST, GET, OPTIONS, PUT',\n\t// \t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t// \t\t\t'Accept': 'application/json'\n\t// \t\t};\n\tvar LIMIT_DAY=1;\n\t\n\n\n\tvar service = {\n      getMarea: getMarea,\n      getPuertos: getPuertos\n    };\n\n    return service;\n\n\n    function getMarea() {\n   \t \n   \tvar now= moment(); \n\n   \treturn $http.get('app/data/mareas/puertomontt.json').then(function(response) {\n   \t \tvar mareas =[];\n   \t \tangular.forEach(response.data.mareas,function(marea) {\n   \t \t\tif(moment(marea.Campo1).diff(now, 'days') >=0  && moment(marea.Campo1).diff(now, 'days')<=LIMIT_DAY){\n   \t \t\t\tvar date = moment(marea.Campo1);\n   \t \t\t\tif(marea.Campo2){\n   \t \t\t\t\tvar parseTime= getTime(marea.Campo2);\n   \t \t\t\t\tvar fullDate= date.add(parseTime.hour, 'hour').add(parseTime.minute, 'minute');\n   \t \t\t\t\tvar data=marea.Campo3.split(' ');\n   \t \t\t\t\tmareas.push({fecha:fullDate.toDate().getTime(), value: data[0],symbol:data[1]});\n   \t \t\t\t}\n   \t \t\t\tif(marea.Campo4){\n   \t \t\t\t\tvar parseTime= getTime(marea.Campo4);\n   \t \t\t\t\tvar fullDate= date.add(parseTime.hour, 'hour').add(parseTime.minute, 'minute');\n   \t \t\t\t\tvar data=marea.Campo5.split(' ');\n   \t \t\t\t\tmareas.push({fecha:fullDate.toDate().getTime(), value: data[0],symbol:data[1]});\n   \t \t\t\t}\n\n   \t \t\t\tif(marea.Campo6){\n   \t \t\t\t\tvar parseTime= getTime(marea.Campo6);\n   \t \t\t\t\tvar fullDate= date.add(parseTime.hour, 'hour').add(parseTime.minute, 'minute');\n   \t \t\t\t\tvar data=marea.Campo7.split(' ');\n   \t \t\t\t\tmareas.push({fecha:fullDate.toDate().getTime(), value: data[0],symbol:data[1]});\n   \t \t\t\t}\n\n\n   \t \t\t\tif(marea.Campo8){\n   \t \t\t\t\tvar parseTime= getTime(marea.Campo8);\n   \t \t\t\t\tvar fullDate= date.add(parseTime.hour, 'hour').add(parseTime.minute, 'minute');\n   \t \t\t\t\tvar data=marea.Campo9.split(' ');\n   \t \t\t\t\tmareas.push({fecha:fullDate.toDate().getTime(), value: data[0],symbol:data[1]});\n   \t \t\t\t}\n   \t \t\t\t\n   \t \t\t\t//var parseValue= {fecha:fullDate ,mediciones:[{hora:marea.Campo2,medicion:marea.Campo3},{hora:marea.Campo4,medicion:marea.Campo5},{hora:marea.Campo6,medicion:marea.Campo7},{hora:marea.Campo8,medicion:marea.Campo9}]}\n   \t \t\t\t//mareas.push(parseValue);\n   \t \t\t}\n\n   \t \t})\n\n      \n      \n   \t \n   \t \treturn  _.filter(mareas,function(marea) {\n          if(now < moment(marea.fecha))\n            return marea;\n      });\n\n   \t });\n\n    }\n\n    function getTime(time) {\n    \tvar timeSplit= time.split(':')\n    \tvar hour= timeSplit[0];\n    \tif(hour>12){\n    \t\thour-=12;\n    \t}\n    \tvar minute =timeSplit[1];\n    \treturn {hour:hour,minute:minute};\n    }\n\n    function getPuertos() {\n    \treturn puertosJson;\n    }\n    \n  }\n}());\n(function() {\n  'use strict';\n\n  angular\n    .module('app.services')\n    .factory('managerDeviceService', managerDeviceService);\n\n  function managerDeviceService(ApiUser, LoopBackAuth,ChartService, HelperService, Device, Event, Weather, $q, $log, _, Ruler) {\n    var devicesCache;\n    var devicesTypeCache;\n    var rules;\n    var alertsCache;\n\n   \n    var service = {\n      getDevices: getDevices,\n      getRules: getRules,\n      addRule: addRule,\n      getAlerts: getAlerts,\n      addAlert: addAlert,\n      deleteRule: deleteRule,\n      newDeviceCache: newDeviceCache,\n      register: register,\n      update: update,\n      unregister: unregister,\n      getLastEvent: getLastEvent,\n      refreshLastEvent: refreshLastEvent,\n      getLocacion: getLocacion,\n      updateLocation: updateLocation,\n      reset: reset,\n      getHistory: getHistory,\n      count: count,\n      getReports: getReports,\n      getReportsFull: getReportsFull,\n      getWeather: getWeather\n    };\n\n    return service;\n\n    function setDevices(devices) {\n      devicesCache = devices;\n    }\n\n    function setRules(rules) {\n      rules = rules;\n    }\n\n    function newDeviceCache(device) {\n      HelperService.changeIconMarker(device);\n      devicesCache.push(device);\n    }\n\n    function deleteDeviceCache(device) {\n      var i = _.findIndex(devicesCache, {\n        deviceId: device.deviceId\n      });\n      if (i != -1)\n        devicesCache.splice(i, 1);\n\n    }\n\n    function deleteRuleCache(rule) {\n      var i = _.findIndex(rules, {\n        id: rule.id\n      });\n      if (i != -1)\n        rules.splice(i, 1);\n\n    }\n\n    function register(device) {\n      return Device.register(device).$promise.then(function(response) {\n        $log.debug('new register response', response);\n        $log.debug('------------------');\n        newDeviceCache(response);\n        return response;\n      });\n    }\n\n\n    function update(device) {\n      return Device.update({deviceId:device.deviceId,typeId:device.typeId,deviceInfo:device.deviceInfo,name:device.name}).$promise.then(function(response) {\n        $log.debug('update response', response);\n        $log.debug('------------------');\n        return response;\n      });\n    }\n\n\n\n    function unregister(device) {\n      return Device.unregister({deviceId:device.deviceId,typeId:device.typeId}).$promise.then(function(response) {\n        $log.debug('unregister response', response);\n        $log.debug('------------------');\n        deleteDeviceCache(device);\n        return response;\n      });\n    }\n\n\n\n    function getLocacion(device) {\n      if (!device.location) {\n        return Device.location({deviceId:device.deviceId,typeId:device.typeId}).$promise.then(function(response) {\n          device.location = response;\n          $log.debug('Device location', response);\n          $log.debug('------------------');\n          return response;\n        });\n      }\n      return $q.when(device.location);\n    }\n\n\n  function updateLocation(device) {\n     \n      return Device.updatelocation({deviceId:device.deviceId,typeId:device.typeId,location:device.location}).$promise.then(function(response) {\n        $log.debug('Device new location', response);\n        $log.debug('------------------');\n        return response;\n      });\n    }\n\n    function getDevices() {\n      if (!devicesCache) {\n        return ApiUser.devices({\n          id: LoopBackAuth.currentUserId\n        }).$promise.then(function(response) {\n           var mapDevice = _.map(response, function(device) {\n            HelperService.changeIconMarker(device);\n\n            return device;\n          })\n          devicesCache = mapDevice;\n          return devicesCache;\n        });\n      }\n\n      return $q.when(devicesCache);\n\n\n    }\n\n    function getRules() {\n\n      if (!rules) {\n        return ApiUser.rules({\n          id: LoopBackAuth.currentUserId\n        }).$promise.then(function(response) {\n          rules = response;\n          return response;\n        });\n      }\n\n      return $q.when(rules);\n\n    }\n\n    function addRule(rule) {\n      rule.apiUserId = LoopBackAuth.currentUserId;\n      return Ruler.replaceOrCreate(rule)\n        .$promise.then(function(response) {\n          var find = false;\n          for (var i = 0; i < rules.length; i++) {\n            if (rules[i].id === response.id) {\n              rules[i] = response;\n              find = true;\n              break;\n            }\n          }\n          if (!find)\n            rules.push(response);\n          return response;\n        });\n    }\n\n    function getAlerts() {\n      if (!alertsCache) {\n        return ApiUser.alerts({\n          id: LoopBackAuth.currentUserId\n        }).$promise.then(function(response) {\n          alertsCache = response;\n          return response;\n        });\n      }\n\n      return $q.when(alertsCache);\n    }\n\n    function addAlert(alert) {    \n        alertsCache.unshift(alert);\n    }\n\n\n\n    function deleteRule(rule) {\n      var rule = rule;\n      return Ruler.deleteById({\n        id: rule.id\n      }).$promise.then(function(response) {\n        deleteRuleCache(rule)\n        return response;\n      });\n    }\n\n\n    function getLastEvent(device) {\n      if (!device.event) {\n        return Device.cache({deviceId:device.deviceId,typeId:device.typeId}).$promise.then(function(response) {\n          response.dataOriginal= angular.copy(response.data);\n          response.data = HelperService.addWeight(response.data);\n          HelperService.changeIconMarker(device);\n          $log.debug('Device Cache', response);\n          $log.debug('------------------');\n          return response;\n        })\n      }\n      return $q.when(device.event);\n\n    }\n\n\n    function refreshLastEvent(device) {\n       return Device.cache({deviceId:device.deviceId,typeId:device.typeId}).$promise.then(function(response) {\n          response.dataOriginal= angular.copy(response.data);\n          response.data = HelperService.addWeight(response.data);\n          HelperService.changeIconMarker(device);\n          $log.debug('Device  refresh Cache', response);\n          $log.debug('------------------');\n          return response;\n        })\n    }\n\n\n\n   \n\n\n    function getHistory(device, limit, skip) {\n      if (!device.history) {\n        return Event.find({\n          filter: {\n            limit: limit || 100,\n            skip: skip || 0,\n            order: \"timestamp DESC\",\n            where: {\n              deviceId: device.deviceId\n            },\n            fields: {\n              payload: true,\n              timestamp: true\n            }\n          }\n        }).$promise.then(function(response) {\n\n          device.history = _.map(response, function(event) {\n            return {\n              data: HelperService.addWeight(event.payload),\n              timestamp: event.timestamp\n            };\n          });\n          $log.debug('History from device', device);\n          $log.debug('------------------');\n          return device;\n        });\n      }\n\n      return $q.when(device);\n\n    }\n\n    function count(device) {\n        return Device.events.count({\n            id: device.deviceId\n        }).$promise.then(function(response) {\n\n          $log.debug('Count from device event', response.count);\n          $log.debug('------------------');\n          return response.count;\n        });\n    }\n\n    function getReports(device, limit, skip) {\n\n      return Device.events({id: device.deviceId,\n        filter: {\n          limit: limit || 100,\n          skip: skip || 0,\n          order: \"timestamp DESC\",\n          fields: {\n            payload: true,\n            timestamp: true\n          }\n       } \n      }).$promise.then(function(response) {\n\n        response = _.map(response, function(event) {\n          return {\n            data: HelperService.addWeight(event.payload),\n            timestamp: event.timestamp\n          };\n        });\n        $log.debug('Reports from device', device);\n        $log.debug('------------------');\n        return response;\n      });\n\n\n\n    }\n\n    function getReportsFull(device) {\n\n      return Device.events(\n          {id: device.deviceId,\n          filter: {\n          order: \"timestamp DESC\",\n          fields: {\n            payload: true,\n            timestamp: true\n          }\n        }\n      }\n      ).$promise.then(function(response) {\n\n        response = _.map(response, function(event) {\n          return {\n            data: HelperService.addWeight(event.payload),\n            timestamp: event.timestamp\n          };\n        });\n        $log.debug('Reports full from device', device);\n        $log.debug('------------------');\n        return response;\n      });\n\n\n\n    }\n\n\n\n    function getWeather(device) {\n      if (device.location) {\n        return Weather.today({\n          latitude: device.location.latitude,\n          longitude: device.location.longitude\n        }).$promise.then(function(response) {\n          $log.debug(response);\n          return response;\n        });\n      }      \n\n    }\n\n    function reset() {\n      devicesCache = null;\n      devicesTypeCache = null;\n      rules = null;\n      alertsCache = null;\n    }\n  }\n})();\n'use strict';\nangular.module(\"ngLocale\", [], [\"$provide\", function($provide) {\nvar PLURAL_CATEGORY = {ZERO: \"zero\", ONE: \"one\", TWO: \"two\", FEW: \"few\", MANY: \"many\", OTHER: \"other\"};\n$provide.value(\"$locale\", {\n  \"DATETIME_FORMATS\": {\n    \"AMPMS\": [\n      \"a. m.\",\n      \"p. m.\"\n    ],\n    \"DAY\": [\n      \"domingo\",\n      \"lunes\",\n      \"martes\",\n      \"mi\\u00e9rcoles\",\n      \"jueves\",\n      \"viernes\",\n      \"s\\u00e1bado\"\n    ],\n    \"ERANAMES\": [\n      \"antes de Cristo\",\n      \"despu\\u00e9s de Cristo\"\n    ],\n    \"ERAS\": [\n      \"a. C.\",\n      \"d. C.\"\n    ],\n    \"FIRSTDAYOFWEEK\": 0,\n    \"MONTH\": [\n      \"enero\",\n      \"febrero\",\n      \"marzo\",\n      \"abril\",\n      \"mayo\",\n      \"junio\",\n      \"julio\",\n      \"agosto\",\n      \"septiembre\",\n      \"octubre\",\n      \"noviembre\",\n      \"diciembre\"\n    ],\n    \"SHORTDAY\": [\n      \"dom.\",\n      \"lun.\",\n      \"mar.\",\n      \"mi\\u00e9.\",\n      \"jue.\",\n      \"vie.\",\n      \"s\\u00e1b.\"\n    ],\n    \"SHORTMONTH\": [\n      \"ene.\",\n      \"feb.\",\n      \"mar.\",\n      \"abr.\",\n      \"may.\",\n      \"jun.\",\n      \"jul.\",\n      \"ago.\",\n      \"sep.\",\n      \"oct.\",\n      \"nov.\",\n      \"dic.\"\n    ],\n    \"STANDALONEMONTH\": [\n      \"enero\",\n      \"febrero\",\n      \"marzo\",\n      \"abril\",\n      \"mayo\",\n      \"junio\",\n      \"julio\",\n      \"agosto\",\n      \"septiembre\",\n      \"octubre\",\n      \"noviembre\",\n      \"diciembre\"\n    ],\n    \"WEEKENDRANGE\": [\n      5,\n      6\n    ],\n    \"fullDate\": \"EEEE, d 'de' MMMM 'de' y\",\n    \"longDate\": \"d 'de' MMMM 'de' y\",\n    \"medium\": \"dd-MM-y HH:mm:ss\",\n    \"mediumDate\": \"dd-MM-y\",\n    \"mediumTime\": \"HH:mm:ss\",\n    \"short\": \"dd-MM-yy HH:mm\",\n    \"shortDate\": \"dd-MM-yy\",\n    \"shortTime\": \"HH:mm\"\n  },\n  \"NUMBER_FORMATS\": {\n    \"CURRENCY_SYM\": \"$\",\n    \"DECIMAL_SEP\": \",\",\n    \"GROUP_SEP\": \".\",\n    \"PATTERNS\": [\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 3,\n        \"minFrac\": 0,\n        \"minInt\": 1,\n        \"negPre\": \"-\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\",\n        \"posSuf\": \"\"\n      },\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 0,\n        \"minFrac\": 0,\n        \"minInt\": 1,\n        \"negPre\": \"\\u00a4-\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\\u00a4\",\n        \"posSuf\": \"\"\n      }\n    ]\n  },\n  \"id\": \"es-cl\",\n  \"localeID\": \"es_CL\",\n  \"pluralCat\": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}\n});\n}]);\n// CommonJS package manager support\nif (typeof module !== 'undefined' && typeof exports !== 'undefined' &&\n  module.exports === exports) {\n  // Export the *name* of this Angular module\n  // Sample usage:\n  //\n  //   import lbServices from './lb-services';\n  //   angular.module('app', [lbServices]);\n  //\n  module.exports = \"lbServices\";\n}\n\n(function(window, angular, undefined) {\n  'use strict';\n\n  var urlBase = \"/api/v2\";\n  var authHeader = 'authorization';\n\n  function getHost(url) {\n    var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n    return m ? m[1] : null;\n  }\n  // need to use the urlBase as the base to handle multiple\n  // loopback servers behind a proxy/gateway where the host\n  // would be the same.\n  var urlBaseHost = getHost(urlBase) ? urlBase : location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\n  var module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.Event\n * @header lbServices.Event\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Event` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Event\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/events/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Event#find\n             * @methodOf lbServices.Event\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Event` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/events\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Event#count\n             * @methodOf lbServices.Event\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/events/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.events.findById() instead.\n            \"::findById::Device::events\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/events/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.events.destroyById() instead.\n            \"::destroyById::Device::events\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/events/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.events.updateById() instead.\n            \"::updateById::Device::events\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/events/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.events() instead.\n            \"::get::Device::events\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.events.create() instead.\n            \"::create::Device::events\": {\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.events.createMany() instead.\n            \"::createMany::Device::events\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.events.destroyAll() instead.\n            \"::delete::Device::events\": {\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.events.count() instead.\n            \"::count::Device::events\": {\n              url: urlBase + \"/Devices/:id/events/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Event#modelName\n        * @propertyOf lbServices.Event\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Event`.\n        */\n        R.modelName = \"Event\";\n\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.ApiUser\n * @header lbServices.ApiUser\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `ApiUser` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"ApiUser\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/users/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__findById__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Find a related item by id for roles.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for roles\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__findById__roles\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/roles/:fk\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__destroyById__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Delete a related item by id for roles.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for roles\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__destroyById__roles\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/roles/:fk\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__updateById__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Update a related item by id for roles.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `fk` – `{*}` - Foreign key for roles\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__updateById__roles\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/roles/:fk\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__link__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Add a related item by id for roles.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `fk` – `{*}` - Foreign key for roles\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__link__roles\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/roles/rel/:fk\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__unlink__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Remove the roles relation to an item by id.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for roles\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__unlink__roles\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/roles/rel/:fk\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__exists__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Check the existence of roles relation to an item by id.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for roles\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__exists__roles\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/roles/rel/:fk\",\n              method: \"HEAD\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__findById__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Find a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__findById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__destroyById__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Delete a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__destroyById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__updateById__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Update a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__updateById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.findById() instead.\n            \"prototype$__findById__devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/devices/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.destroyById() instead.\n            \"prototype$__destroyById__devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/devices/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.findById() instead.\n            \"prototype$__findById__rules\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/rules/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.destroyById() instead.\n            \"prototype$__destroyById__rules\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/rules/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.updateById() instead.\n            \"prototype$__updateById__rules\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/rules/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.findById() instead.\n            \"prototype$__findById__alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/alerts/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.destroyById() instead.\n            \"prototype$__destroyById__alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/alerts/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.updateById() instead.\n            \"prototype$__updateById__alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/alerts/:fk\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__get__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Queries roles of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__get__roles\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/roles\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__create__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Creates a new instance in roles of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__create__roles\": {\n              url: urlBase + \"/users/:id/roles\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__delete__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Deletes all roles of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__delete__roles\": {\n              url: urlBase + \"/users/:id/roles\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__count__roles\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Counts roles of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"prototype$__count__roles\": {\n              url: urlBase + \"/users/:id/roles/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__get__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Queries accessTokens of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__get__accessTokens\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__create__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Creates a new instance in accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$__create__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__delete__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Deletes all accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__delete__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$__count__accessTokens\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Counts accessTokens of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"prototype$__count__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.devices() instead.\n            \"prototype$__get__devices\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/devices\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.create() instead.\n            \"prototype$__create__devices\": {\n              url: urlBase + \"/users/:id/devices\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.destroyAll() instead.\n            \"prototype$__delete__devices\": {\n              url: urlBase + \"/users/:id/devices\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.count() instead.\n            \"prototype$__count__devices\": {\n              url: urlBase + \"/users/:id/devices/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.rules() instead.\n            \"prototype$__get__rules\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/rules\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.create() instead.\n            \"prototype$__create__rules\": {\n              url: urlBase + \"/users/:id/rules\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.destroyAll() instead.\n            \"prototype$__delete__rules\": {\n              url: urlBase + \"/users/:id/rules\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.count() instead.\n            \"prototype$__count__rules\": {\n              url: urlBase + \"/users/:id/rules/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts() instead.\n            \"prototype$__get__alerts\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.create() instead.\n            \"prototype$__create__alerts\": {\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.destroyAll() instead.\n            \"prototype$__delete__alerts\": {\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.count() instead.\n            \"prototype$__count__alerts\": {\n              url: urlBase + \"/users/:id/alerts/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#create\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/users\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#createMany\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/users\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#patchOrCreate\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/users\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#replaceOrCreate\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/users/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#exists\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/users/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#findById\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/users/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#replaceById\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/users/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#find\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/users\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#deleteById\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/users/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#count\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/users/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$patchAttributes\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/users/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#login\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Login a user with username/email and password.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n             *   Default value: `user`.\n             *\n             *  - `rememberMe` - `boolean` - Whether the authentication credentials\n             *     should be remembered in localStorage across app/browser restarts.\n             *     Default: `true`.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The response body contains properties of the AccessToken created on login.\n             * Depending on the value of `include` parameter, the body may contain additional properties:\n             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n             *\n             */\n            \"login\": {\n              params: {\n                include: 'user',\n              },\n              interceptor: {\n                response: function(response) {\n                  var accessToken = response.data;\n                  LoopBackAuth.setUser(\n                    accessToken.id, accessToken.userId, accessToken.user);\n                  LoopBackAuth.rememberMe =\n                    response.config.params.rememberMe !== false;\n                  LoopBackAuth.save();\n                  return response.resource;\n                },\n              },\n              url: urlBase + \"/users/login\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#logout\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Logout a user with access token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"logout\": {\n              interceptor: {\n                response: function(response) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return response.resource;\n                },\n                responseError: function(responseError) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return responseError.resource;\n                },\n              },\n              url: urlBase + \"/users/logout\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$verify\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Trigger user's identity verification with configured verifyOptions\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `verifyOptions` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$verify\": {\n              url: urlBase + \"/users/:id/verify\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#resetPassword\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Reset password for a user with email.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"resetPassword\": {\n              url: urlBase + \"/users/reset\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#changePassword\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Change a user's password.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `id` – `{*=}` -\n             *\n             *  - `oldPassword` – `{string}` -\n             *\n             *  - `newPassword` – `{string}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"changePassword\": {\n              url: urlBase + \"/users/change-password\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#setPassword\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Reset user's password via a password-reset token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `id` – `{*=}` -\n             *\n             *  - `newPassword` – `{string}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"setPassword\": {\n              url: urlBase + \"/users/reset-password\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$addRole\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Add a role to this user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `roleName` – `{String}` - The name of the role to add.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$addRole\": {\n              url: urlBase + \"/users/:id/addRole\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$removeRole\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Remove a role from this user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `roleName` – `{String}` - The name of the role to remove.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$removeRole\": {\n              url: urlBase + \"/users/:id/removeRole\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$banUser\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Block a user from the system.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$banUser\": {\n              url: urlBase + \"/users/:id/banUser\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$unlockUser\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * UnlockUser a user from the system.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method does not accept any data. Supply an empty object.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n            \"prototype$unlockUser\": {\n              url: urlBase + \"/users/:id/unlockUser\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.users() instead.\n            \"::get::Device::users\": {\n              url: urlBase + \"/Devices/:id/users\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#getCurrent\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Get data of the currently logged user. Fail with HTTP result 401\n             * when there is no user logged in.\n             *\n             * @param {function(Object,Object)=} successCb\n             *    Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *    `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             */\n            'getCurrent': {\n              url: urlBase + \"/users\" + '/:id',\n              method: 'GET',\n              params: {\n                id: function() {\n                  var id = LoopBackAuth.currentUserId;\n                  if (id == null) id = '__anonymous__';\n                  return id;\n                },\n              },\n              interceptor: {\n                response: function(response) {\n                  LoopBackAuth.currentUserData = response.data;\n                  return response.resource;\n                },\n                responseError: function(responseError) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return $q.reject(responseError);\n                },\n              },\n              __isGetCurrentUser__: true,\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#upsert\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#updateOrCreate\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#destroyById\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#removeById\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#prototype$updateAttributes\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n        R[\"prototype$updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.ApiUser#getCachedCurrent\n         * @methodOf lbServices.ApiUser\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.ApiUser#login} or\n         * {@link lbServices.ApiUser#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A ApiUser instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.ApiUser#isAuthenticated\n         * @methodOf lbServices.ApiUser\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.ApiUser#getCurrentId\n         * @methodOf lbServices.ApiUser\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n        /**\n        * @ngdoc property\n        * @name lbServices.ApiUser#modelName\n        * @propertyOf lbServices.ApiUser\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `ApiUser`.\n        */\n        R.modelName = \"ApiUser\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.ApiUser.devices\n     * @header lbServices.ApiUser.devices\n     * @object\n     * @description\n     *\n     * The object `ApiUser.devices` groups methods\n     * manipulating `Device` instances related to `ApiUser`.\n     *\n     * Call {@link lbServices.ApiUser#devices ApiUser.devices()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#devices\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Queries devices of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::get::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.devices#count\n             * @methodOf lbServices.ApiUser.devices\n             *\n             * @description\n             *\n             * Counts devices of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.devices.count = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::count::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.devices#create\n             * @methodOf lbServices.ApiUser.devices\n             *\n             * @description\n             *\n             * Creates a new instance in devices of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.create = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::create::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.devices#createMany\n             * @methodOf lbServices.ApiUser.devices\n             *\n             * @description\n             *\n             * Creates a new instance in devices of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.createMany = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::createMany::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.devices#destroyAll\n             * @methodOf lbServices.ApiUser.devices\n             *\n             * @description\n             *\n             * Deletes all devices of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.devices.destroyAll = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::delete::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.devices#destroyById\n             * @methodOf lbServices.ApiUser.devices\n             *\n             * @description\n             *\n             * Delete a related item by id for devices.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for devices\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.devices.destroyById = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::destroyById::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.devices#findById\n             * @methodOf lbServices.ApiUser.devices\n             *\n             * @description\n             *\n             * Find a related item by id for devices.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for devices\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.findById = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::findById::ApiUser::devices\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.ApiUser.rules\n     * @header lbServices.ApiUser.rules\n     * @object\n     * @description\n     *\n     * The object `ApiUser.rules` groups methods\n     * manipulating `Ruler` instances related to `ApiUser`.\n     *\n     * Call {@link lbServices.ApiUser#rules ApiUser.rules()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#rules\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Queries rules of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rules = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::get::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#count\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Counts rules of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.rules.count = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::count::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#create\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Creates a new instance in rules of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rules.create = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::create::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#createMany\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Creates a new instance in rules of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rules.createMany = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::createMany::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#destroyAll\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Deletes all rules of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.rules.destroyAll = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::delete::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#destroyById\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Delete a related item by id for rules.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for rules\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.rules.destroyById = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::destroyById::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#findById\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Find a related item by id for rules.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for rules\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rules.findById = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::findById::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.rules#updateById\n             * @methodOf lbServices.ApiUser.rules\n             *\n             * @description\n             *\n             * Update a related item by id for rules.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `fk` – `{*}` - Foreign key for rules\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rules.updateById = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::updateById::ApiUser::rules\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.ApiUser.alerts\n     * @header lbServices.ApiUser.alerts\n     * @object\n     * @description\n     *\n     * The object `ApiUser.alerts` groups methods\n     * manipulating `Alert` instances related to `ApiUser`.\n     *\n     * Call {@link lbServices.ApiUser#alerts ApiUser.alerts()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser#alerts\n             * @methodOf lbServices.ApiUser\n             *\n             * @description\n             *\n             * Queries alerts of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::get::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#count\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Counts alerts of ApiUser.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.alerts.count = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::count::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#create\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Creates a new instance in alerts of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.create = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::create::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#createMany\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Creates a new instance in alerts of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.createMany = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::createMany::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#destroyAll\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Deletes all alerts of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.alerts.destroyAll = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::delete::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#destroyById\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Delete a related item by id for alerts.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for alerts\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.alerts.destroyById = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::destroyById::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#findById\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Find a related item by id for alerts.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for alerts\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.findById = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::findById::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.ApiUser.alerts#updateById\n             * @methodOf lbServices.ApiUser.alerts\n             *\n             * @description\n             *\n             * Update a related item by id for alerts.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - ApiUser id\n             *\n             *  - `fk` – `{*}` - Foreign key for alerts\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.updateById = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::updateById::ApiUser::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Threshold\n * @header lbServices.Threshold\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Threshold` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Threshold\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/thresholds/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#create\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/thresholds\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#createMany\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/thresholds\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#replaceOrCreate\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/thresholds/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#exists\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/thresholds/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#findById\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/thresholds/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#replaceById\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/thresholds/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#find\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/thresholds\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#deleteById\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/thresholds/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#count\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/thresholds/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds.findById() instead.\n            \"::findById::Device::thresholds\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/thresholds/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds.destroyById() instead.\n            \"::destroyById::Device::thresholds\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/thresholds/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.thresholds.updateById() instead.\n            \"::updateById::Device::thresholds\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/thresholds/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.thresholds() instead.\n            \"::get::Device::thresholds\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds.create() instead.\n            \"::create::Device::thresholds\": {\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.thresholds.createMany() instead.\n            \"::createMany::Device::thresholds\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.thresholds.destroyAll() instead.\n            \"::delete::Device::thresholds\": {\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.thresholds.count() instead.\n            \"::count::Device::thresholds\": {\n              url: urlBase + \"/Devices/:id/thresholds/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#destroyById\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Threshold#removeById\n             * @methodOf lbServices.Threshold\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Threshold#modelName\n        * @propertyOf lbServices.Threshold\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Threshold`.\n        */\n        R.modelName = \"Threshold\";\n\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Device\n * @header lbServices.Device\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Device` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Device\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/Devices/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Device.users() instead.\n            \"prototype$__get__users\": {\n              url: urlBase + \"/Devices/:id/users\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds.findById() instead.\n            \"prototype$__findById__thresholds\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/thresholds/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds.destroyById() instead.\n            \"prototype$__destroyById__thresholds\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/thresholds/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.thresholds.updateById() instead.\n            \"prototype$__updateById__thresholds\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/thresholds/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.events.findById() instead.\n            \"prototype$__findById__events\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/events/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.events.destroyById() instead.\n            \"prototype$__destroyById__events\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/events/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.events.updateById() instead.\n            \"prototype$__updateById__events\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/events/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.rulers.findById() instead.\n            \"prototype$__findById__rulers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/rulers/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.rulers.destroyById() instead.\n            \"prototype$__destroyById__rulers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/rulers/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.rulers.updateById() instead.\n            \"prototype$__updateById__rulers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/rulers/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.alerts.findById() instead.\n            \"prototype$__findById__alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/alerts/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.alerts.destroyById() instead.\n            \"prototype$__destroyById__alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/alerts/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.alerts.updateById() instead.\n            \"prototype$__updateById__alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/alerts/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.cage() instead.\n            \"prototype$__get__cage\": {\n              url: urlBase + \"/Devices/:id/cage\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds() instead.\n            \"prototype$__get__thresholds\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.thresholds.create() instead.\n            \"prototype$__create__thresholds\": {\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.thresholds.destroyAll() instead.\n            \"prototype$__delete__thresholds\": {\n              url: urlBase + \"/Devices/:id/thresholds\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.thresholds.count() instead.\n            \"prototype$__count__thresholds\": {\n              url: urlBase + \"/Devices/:id/thresholds/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.events() instead.\n            \"prototype$__get__events\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.events.create() instead.\n            \"prototype$__create__events\": {\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.events.destroyAll() instead.\n            \"prototype$__delete__events\": {\n              url: urlBase + \"/Devices/:id/events\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.events.count() instead.\n            \"prototype$__count__events\": {\n              url: urlBase + \"/Devices/:id/events/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.rulers() instead.\n            \"prototype$__get__rulers\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.rulers.create() instead.\n            \"prototype$__create__rulers\": {\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.rulers.destroyAll() instead.\n            \"prototype$__delete__rulers\": {\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.rulers.count() instead.\n            \"prototype$__count__rulers\": {\n              url: urlBase + \"/Devices/:id/rulers/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.alerts() instead.\n            \"prototype$__get__alerts\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.alerts.create() instead.\n            \"prototype$__create__alerts\": {\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.alerts.destroyAll() instead.\n            \"prototype$__delete__alerts\": {\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.alerts.count() instead.\n            \"prototype$__count__alerts\": {\n              url: urlBase + \"/Devices/:id/alerts/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#create\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Devices\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#createMany\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Devices\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#exists\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Devices/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#findById\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Devices/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#find\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Devices\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#deleteById\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Devices/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#count\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Devices/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#info\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Get full info from device iot Watson.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"info\": {\n              url: urlBase + \"/Devices/info\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#register\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Register device in iot Watson.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `device` – `{Device}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"register\": {\n              url: urlBase + \"/Devices/register\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#update\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Update device in iot Watson.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `device` – `{Device}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"update\": {\n              url: urlBase + \"/Devices/update\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#unregister\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Unregister device in iot Watson.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `device` – `{Device}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"unregister\": {\n              url: urlBase + \"/Devices/unregister\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#location\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Get the location information of a device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"location\": {\n              url: urlBase + \"/Devices/location\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#updatelocation\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Modify the location information for a device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"updatelocation\": {\n              url: urlBase + \"/Devices/location\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#cache\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Get last event from device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n            \"cache\": {\n              url: urlBase + \"/Devices/cache\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.findById() instead.\n            \"::findById::ApiUser::devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/devices/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.destroyById() instead.\n            \"::destroyById::ApiUser::devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/devices/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.devices() instead.\n            \"::get::ApiUser::devices\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/devices\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.create() instead.\n            \"::create::ApiUser::devices\": {\n              url: urlBase + \"/users/:id/devices\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.createMany() instead.\n            \"::createMany::ApiUser::devices\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/devices\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.destroyAll() instead.\n            \"::delete::ApiUser::devices\": {\n              url: urlBase + \"/users/:id/devices\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.devices.count() instead.\n            \"::count::ApiUser::devices\": {\n              url: urlBase + \"/users/:id/devices/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Ruler.device() instead.\n            \"::get::Ruler::device\": {\n              url: urlBase + \"/rules/:id/device\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Alert.device() instead.\n            \"::get::Alert::device\": {\n              url: urlBase + \"/alerts/:id/device\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Cage.devices.findById() instead.\n            \"::findById::Cage::devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/cages/:id/devices/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Cage.devices.destroyById() instead.\n            \"::destroyById::Cage::devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/cages/:id/devices/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Cage.devices.updateById() instead.\n            \"::updateById::Cage::devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/cages/:id/devices/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Cage.devices() instead.\n            \"::get::Cage::devices\": {\n              isArray: true,\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Cage.devices.create() instead.\n            \"::create::Cage::devices\": {\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Cage.devices.createMany() instead.\n            \"::createMany::Cage::devices\": {\n              isArray: true,\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Cage.devices.destroyAll() instead.\n            \"::delete::Cage::devices\": {\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Cage.devices.count() instead.\n            \"::count::Cage::devices\": {\n              url: urlBase + \"/cages/:id/devices/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#destroyById\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#removeById\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Device#modelName\n        * @propertyOf lbServices.Device\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Device`.\n        */\n        R.modelName = \"Device\";\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#users\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Fetches belongsTo relation users.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `ApiUser` object.)\n             * </em>\n             */\n        R.users = function() {\n          var TargetResource = $injector.get(\"ApiUser\");\n          var action = TargetResource[\"::get::Device::users\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.Device.thresholds\n     * @header lbServices.Device.thresholds\n     * @object\n     * @description\n     *\n     * The object `Device.thresholds` groups methods\n     * manipulating `Threshold` instances related to `Device`.\n     *\n     * Call {@link lbServices.Device#thresholds Device.thresholds()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#thresholds\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Queries thresholds of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R.thresholds = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::get::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#count\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Counts thresholds of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.thresholds.count = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::count::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#create\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Creates a new instance in thresholds of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R.thresholds.create = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::create::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#createMany\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Creates a new instance in thresholds of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R.thresholds.createMany = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::createMany::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#destroyAll\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Deletes all thresholds of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.thresholds.destroyAll = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::delete::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#destroyById\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Delete a related item by id for thresholds.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for thresholds\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.thresholds.destroyById = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::destroyById::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#findById\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Find a related item by id for thresholds.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for thresholds\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R.thresholds.findById = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::findById::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.thresholds#updateById\n             * @methodOf lbServices.Device.thresholds\n             *\n             * @description\n             *\n             * Update a related item by id for thresholds.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `fk` – `{*}` - Foreign key for thresholds\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Threshold` object.)\n             * </em>\n             */\n        R.thresholds.updateById = function() {\n          var TargetResource = $injector.get(\"Threshold\");\n          var action = TargetResource[\"::updateById::Device::thresholds\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.Device.events\n     * @header lbServices.Device.events\n     * @object\n     * @description\n     *\n     * The object `Device.events` groups methods\n     * manipulating `Event` instances related to `Device`.\n     *\n     * Call {@link lbServices.Device#events Device.events()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#events\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Queries events of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Event` object.)\n             * </em>\n             */\n        R.events = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::get::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#count\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Counts events of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.events.count = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::count::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#create\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Creates a new instance in events of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Event` object.)\n             * </em>\n             */\n        R.events.create = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::create::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#createMany\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Creates a new instance in events of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Event` object.)\n             * </em>\n             */\n        R.events.createMany = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::createMany::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#destroyAll\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Deletes all events of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.events.destroyAll = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::delete::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#destroyById\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Delete a related item by id for events.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for events\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.events.destroyById = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::destroyById::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#findById\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Find a related item by id for events.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for events\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Event` object.)\n             * </em>\n             */\n        R.events.findById = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::findById::Device::events\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.events#updateById\n             * @methodOf lbServices.Device.events\n             *\n             * @description\n             *\n             * Update a related item by id for events.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `fk` – `{*}` - Foreign key for events\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Event` object.)\n             * </em>\n             */\n        R.events.updateById = function() {\n          var TargetResource = $injector.get(\"Event\");\n          var action = TargetResource[\"::updateById::Device::events\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.Device.rulers\n     * @header lbServices.Device.rulers\n     * @object\n     * @description\n     *\n     * The object `Device.rulers` groups methods\n     * manipulating `Ruler` instances related to `Device`.\n     *\n     * Call {@link lbServices.Device#rulers Device.rulers()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#rulers\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Queries rulers of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rulers = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::get::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#count\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Counts rulers of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.rulers.count = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::count::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#create\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Creates a new instance in rulers of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rulers.create = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::create::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#createMany\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Creates a new instance in rulers of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rulers.createMany = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::createMany::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#destroyAll\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Deletes all rulers of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.rulers.destroyAll = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::delete::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#destroyById\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Delete a related item by id for rulers.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for rulers\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.rulers.destroyById = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::destroyById::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#findById\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Find a related item by id for rulers.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for rulers\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rulers.findById = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::findById::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.rulers#updateById\n             * @methodOf lbServices.Device.rulers\n             *\n             * @description\n             *\n             * Update a related item by id for rulers.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `fk` – `{*}` - Foreign key for rulers\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R.rulers.updateById = function() {\n          var TargetResource = $injector.get(\"Ruler\");\n          var action = TargetResource[\"::updateById::Device::rulers\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.Device.alerts\n     * @header lbServices.Device.alerts\n     * @object\n     * @description\n     *\n     * The object `Device.alerts` groups methods\n     * manipulating `Alert` instances related to `Device`.\n     *\n     * Call {@link lbServices.Device#alerts Device.alerts()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#alerts\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Queries alerts of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::get::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#count\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Counts alerts of Device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.alerts.count = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::count::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#create\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Creates a new instance in alerts of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.create = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::create::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#createMany\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Creates a new instance in alerts of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.createMany = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::createMany::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#destroyAll\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Deletes all alerts of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.alerts.destroyAll = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::delete::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#destroyById\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Delete a related item by id for alerts.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for alerts\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.alerts.destroyById = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::destroyById::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#findById\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Find a related item by id for alerts.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for alerts\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.findById = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::findById::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device.alerts#updateById\n             * @methodOf lbServices.Device.alerts\n             *\n             * @description\n             *\n             * Update a related item by id for alerts.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `fk` – `{*}` - Foreign key for alerts\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R.alerts.updateById = function() {\n          var TargetResource = $injector.get(\"Alert\");\n          var action = TargetResource[\"::updateById::Device::alerts\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Device#cage\n             * @methodOf lbServices.Device\n             *\n             * @description\n             *\n             * Fetches belongsTo relation cage.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Device id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R.cage = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::get::Device::cage\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Email\n * @header lbServices.Email\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Email` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Email\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/Emails/:id\",\n          { 'id': '@id' },\n          {\n          }\n        );\n\n\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Email#modelName\n        * @propertyOf lbServices.Email\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Email`.\n        */\n        R.modelName = \"Email\";\n\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Weather\n * @header lbServices.Weather\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Weather` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Weather\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/weather/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Weather#today\n             * @methodOf lbServices.Weather\n             *\n             * @description\n             *\n             * Forecast by Geocode\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `latitude` – `{string}` -\n             *\n             *  - `longitude` – `{string}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Weather` object.)\n             * </em>\n             */\n            \"today\": {\n              url: urlBase + \"/weather/:latitude/:longitude/today\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Weather#daily\n             * @methodOf lbServices.Weather\n             *\n             * @description\n             *\n             * Forecast by Geocode\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `latitude` – `{string}` -\n             *\n             *  - `longitude` – `{string}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Weather` object.)\n             * </em>\n             */\n            \"daily\": {\n              url: urlBase + \"/weather/:latitude/:longitude/daily\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Weather#modelName\n        * @propertyOf lbServices.Weather\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Weather`.\n        */\n        R.modelName = \"Weather\";\n\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Ruler\n * @header lbServices.Ruler\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Ruler` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Ruler\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/rules/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Ruler.device() instead.\n            \"prototype$__get__device\": {\n              url: urlBase + \"/rules/:id/device\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#create\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/rules\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#createMany\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/rules\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#replaceOrCreate\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/rules/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#exists\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/rules/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#findById\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/rules/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#replaceById\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/rules/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#find\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/rules\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#deleteById\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/rules/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#count\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/rules/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.findById() instead.\n            \"::findById::ApiUser::rules\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/rules/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.destroyById() instead.\n            \"::destroyById::ApiUser::rules\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/rules/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.updateById() instead.\n            \"::updateById::ApiUser::rules\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/rules/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use ApiUser.rules() instead.\n            \"::get::ApiUser::rules\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/rules\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.create() instead.\n            \"::create::ApiUser::rules\": {\n              url: urlBase + \"/users/:id/rules\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.createMany() instead.\n            \"::createMany::ApiUser::rules\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/rules\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.destroyAll() instead.\n            \"::delete::ApiUser::rules\": {\n              url: urlBase + \"/users/:id/rules\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.rules.count() instead.\n            \"::count::ApiUser::rules\": {\n              url: urlBase + \"/users/:id/rules/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.rulers.findById() instead.\n            \"::findById::Device::rulers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/rulers/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.rulers.destroyById() instead.\n            \"::destroyById::Device::rulers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/rulers/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.rulers.updateById() instead.\n            \"::updateById::Device::rulers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/rulers/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.rulers() instead.\n            \"::get::Device::rulers\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.rulers.create() instead.\n            \"::create::Device::rulers\": {\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.rulers.createMany() instead.\n            \"::createMany::Device::rulers\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.rulers.destroyAll() instead.\n            \"::delete::Device::rulers\": {\n              url: urlBase + \"/Devices/:id/rulers\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.rulers.count() instead.\n            \"::count::Device::rulers\": {\n              url: urlBase + \"/Devices/:id/rulers/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#destroyById\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#removeById\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Ruler` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Ruler#modelName\n        * @propertyOf lbServices.Ruler\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Ruler`.\n        */\n        R.modelName = \"Ruler\";\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Ruler#device\n             * @methodOf lbServices.Ruler\n             *\n             * @description\n             *\n             * Fetches belongsTo relation device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Ruler id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.device = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::get::Ruler::device\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Alert\n * @header lbServices.Alert\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Alert` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Alert\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/alerts/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Alert.device() instead.\n            \"prototype$__get__device\": {\n              url: urlBase + \"/alerts/:id/device\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#create\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/alerts\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#createMany\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/alerts\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#patchOrCreate\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/alerts\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#replaceOrCreate\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/alerts/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#upsertWithWhere\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/alerts/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#exists\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/alerts/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#findById\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/alerts/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#replaceById\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/alerts/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#find\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/alerts\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#findOne\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/alerts/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#updateAll\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/alerts/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#deleteById\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/alerts/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#count\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/alerts/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#prototype$patchAttributes\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Alert id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/alerts/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#createChangeStream\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/alerts/change-stream\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.findById() instead.\n            \"::findById::ApiUser::alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/alerts/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.destroyById() instead.\n            \"::destroyById::ApiUser::alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/alerts/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.updateById() instead.\n            \"::updateById::ApiUser::alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/alerts/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts() instead.\n            \"::get::ApiUser::alerts\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.create() instead.\n            \"::create::ApiUser::alerts\": {\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.createMany() instead.\n            \"::createMany::ApiUser::alerts\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.destroyAll() instead.\n            \"::delete::ApiUser::alerts\": {\n              url: urlBase + \"/users/:id/alerts\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use ApiUser.alerts.count() instead.\n            \"::count::ApiUser::alerts\": {\n              url: urlBase + \"/users/:id/alerts/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.alerts.findById() instead.\n            \"::findById::Device::alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/alerts/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.alerts.destroyById() instead.\n            \"::destroyById::Device::alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/alerts/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.alerts.updateById() instead.\n            \"::updateById::Device::alerts\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Devices/:id/alerts/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Device.alerts() instead.\n            \"::get::Device::alerts\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Device.alerts.create() instead.\n            \"::create::Device::alerts\": {\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.alerts.createMany() instead.\n            \"::createMany::Device::alerts\": {\n              isArray: true,\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.alerts.destroyAll() instead.\n            \"::delete::Device::alerts\": {\n              url: urlBase + \"/Devices/:id/alerts\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Device.alerts.count() instead.\n            \"::count::Device::alerts\": {\n              url: urlBase + \"/Devices/:id/alerts/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#upsert\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#updateOrCreate\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#patchOrCreateWithWhere\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#update\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#destroyById\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#removeById\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#prototype$updateAttributes\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Alert id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Alert` object.)\n             * </em>\n             */\n        R[\"prototype$updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Alert#modelName\n        * @propertyOf lbServices.Alert\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Alert`.\n        */\n        R.modelName = \"Alert\";\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Alert#device\n             * @methodOf lbServices.Alert\n             *\n             * @description\n             *\n             * Fetches belongsTo relation device.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Alert id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.device = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::get::Alert::device\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Center\n * @header lbServices.Center\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Center` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Center\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/centers/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Center.cages.findById() instead.\n            \"prototype$__findById__cages\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/centers/:id/cages/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Center.cages.destroyById() instead.\n            \"prototype$__destroyById__cages\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/centers/:id/cages/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Center.cages.updateById() instead.\n            \"prototype$__updateById__cages\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/centers/:id/cages/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Center.cages() instead.\n            \"prototype$__get__cages\": {\n              isArray: true,\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Center.cages.create() instead.\n            \"prototype$__create__cages\": {\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Center.cages.destroyAll() instead.\n            \"prototype$__delete__cages\": {\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Center.cages.count() instead.\n            \"prototype$__count__cages\": {\n              url: urlBase + \"/centers/:id/cages/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#create\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/centers\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#createMany\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/centers\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#patchOrCreate\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/centers\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#replaceOrCreate\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/centers/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#upsertWithWhere\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/centers/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#exists\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/centers/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#findById\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/centers/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#replaceById\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/centers/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#find\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/centers\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#findOne\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/centers/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#updateAll\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/centers/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#deleteById\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/centers/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#count\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/centers/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#prototype$patchAttributes\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/centers/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#createChangeStream\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/centers/change-stream\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Cage.center() instead.\n            \"::get::Cage::center\": {\n              url: urlBase + \"/cages/:id/center\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#upsert\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#updateOrCreate\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#patchOrCreateWithWhere\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#update\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#destroyById\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#removeById\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#prototype$updateAttributes\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R[\"prototype$updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Center#modelName\n        * @propertyOf lbServices.Center\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Center`.\n        */\n        R.modelName = \"Center\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.Center.cages\n     * @header lbServices.Center.cages\n     * @object\n     * @description\n     *\n     * The object `Center.cages` groups methods\n     * manipulating `Cage` instances related to `Center`.\n     *\n     * Call {@link lbServices.Center#cages Center.cages()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center#cages\n             * @methodOf lbServices.Center\n             *\n             * @description\n             *\n             * Queries cages of Center.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R.cages = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::get::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#count\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Counts cages of Center.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.cages.count = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::count::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#create\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Creates a new instance in cages of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R.cages.create = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::create::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#createMany\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Creates a new instance in cages of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R.cages.createMany = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::createMany::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#destroyAll\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Deletes all cages of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.cages.destroyAll = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::delete::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#destroyById\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Delete a related item by id for cages.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for cages\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.cages.destroyById = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::destroyById::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#findById\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Find a related item by id for cages.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for cages\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R.cages.findById = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::findById::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Center.cages#updateById\n             * @methodOf lbServices.Center.cages\n             *\n             * @description\n             *\n             * Update a related item by id for cages.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Center id\n             *\n             *  - `fk` – `{*}` - Foreign key for cages\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R.cages.updateById = function() {\n          var TargetResource = $injector.get(\"Cage\");\n          var action = TargetResource[\"::updateById::Center::cages\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Cage\n * @header lbServices.Cage\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Cage` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Cage\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',\n      function(LoopBackResource, LoopBackAuth, $injector, $q) {\n        var R = LoopBackResource(\n        urlBase + \"/cages/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Cage.devices.findById() instead.\n            \"prototype$__findById__devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/cages/:id/devices/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Cage.devices.destroyById() instead.\n            \"prototype$__destroyById__devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/cages/:id/devices/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Cage.devices.updateById() instead.\n            \"prototype$__updateById__devices\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/cages/:id/devices/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Cage.center() instead.\n            \"prototype$__get__center\": {\n              url: urlBase + \"/cages/:id/center\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Cage.devices() instead.\n            \"prototype$__get__devices\": {\n              isArray: true,\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Cage.devices.create() instead.\n            \"prototype$__create__devices\": {\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Cage.devices.destroyAll() instead.\n            \"prototype$__delete__devices\": {\n              url: urlBase + \"/cages/:id/devices\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Cage.devices.count() instead.\n            \"prototype$__count__devices\": {\n              url: urlBase + \"/cages/:id/devices/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#create\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/cages\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#createMany\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/cages\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#patchOrCreate\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/cages\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#replaceOrCreate\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/cages/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#upsertWithWhere\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/cages/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#exists\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/cages/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#findById\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/cages/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#replaceById\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/cages/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#find\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/cages\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#findOne\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/cages/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#updateAll\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/cages/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#deleteById\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/cages/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#count\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/cages/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#prototype$patchAttributes\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/cages/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#createChangeStream\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/cages/change-stream\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Device.cage() instead.\n            \"::get::Device::cage\": {\n              url: urlBase + \"/Devices/:id/cage\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Center.cages.findById() instead.\n            \"::findById::Center::cages\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/centers/:id/cages/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Center.cages.destroyById() instead.\n            \"::destroyById::Center::cages\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/centers/:id/cages/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Center.cages.updateById() instead.\n            \"::updateById::Center::cages\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/centers/:id/cages/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Center.cages() instead.\n            \"::get::Center::cages\": {\n              isArray: true,\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Center.cages.create() instead.\n            \"::create::Center::cages\": {\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Center.cages.createMany() instead.\n            \"::createMany::Center::cages\": {\n              isArray: true,\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Center.cages.destroyAll() instead.\n            \"::delete::Center::cages\": {\n              url: urlBase + \"/centers/:id/cages\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Center.cages.count() instead.\n            \"::count::Center::cages\": {\n              url: urlBase + \"/centers/:id/cages/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#upsert\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#updateOrCreate\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#patchOrCreateWithWhere\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#update\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#destroyById\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#removeById\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#prototype$updateAttributes\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Cage` object.)\n             * </em>\n             */\n        R[\"prototype$updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Cage#modelName\n        * @propertyOf lbServices.Cage\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Cage`.\n        */\n        R.modelName = \"Cage\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.Cage.devices\n     * @header lbServices.Cage.devices\n     * @object\n     * @description\n     *\n     * The object `Cage.devices` groups methods\n     * manipulating `Device` instances related to `Cage`.\n     *\n     * Call {@link lbServices.Cage#devices Cage.devices()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#devices\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Queries devices of Cage.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `filter` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::get::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#count\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Counts devices of Cage.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.devices.count = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::count::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#create\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Creates a new instance in devices of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.create = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::create::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#createMany\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Creates a new instance in devices of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.createMany = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::createMany::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#destroyAll\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Deletes all devices of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `where` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.devices.destroyAll = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::delete::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#destroyById\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Delete a related item by id for devices.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for devices\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.devices.destroyById = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::destroyById::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#findById\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Find a related item by id for devices.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `fk` – `{*}` - Foreign key for devices\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.findById = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::findById::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage.devices#updateById\n             * @methodOf lbServices.Cage.devices\n             *\n             * @description\n             *\n             * Update a related item by id for devices.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `fk` – `{*}` - Foreign key for devices\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `data` – `{object=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Device` object.)\n             * </em>\n             */\n        R.devices.updateById = function() {\n          var TargetResource = $injector.get(\"Device\");\n          var action = TargetResource[\"::updateById::Cage::devices\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Cage#center\n             * @methodOf lbServices.Cage\n             *\n             * @description\n             *\n             * Fetches belongsTo relation center.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Cage id\n             *\n             *  - `options` – `{object=}` -\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Center` object.)\n             * </em>\n             */\n        R.center = function() {\n          var TargetResource = $injector.get(\"Center\");\n          var action = TargetResource[\"::get::Cage::center\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n\n  module\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    };\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    };\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      try {\n        var key = propsPrefix + name;\n        if (value == null) value = '';\n        storage[key] = value;\n      } catch (err) {\n        console.log('Cannot access local/session storage:', err);\n      }\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && config.url.indexOf(urlBaseHost) === -1) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 }},\n              status: 401,\n              config: config,\n              headers: function() { return undefined; },\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        },\n      };\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the header name that is used for sending the authentication token.\n     */\n    this.getAuthHeader = function() {\n      return authHeader;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      var LoopBackResource = function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n\n      LoopBackResource.getUrlBase = function() {\n        return urlBase;\n      };\n\n      LoopBackResource.getAuthHeader = function() {\n        return authHeader;\n      };\n\n      return LoopBackResource;\n    }];\n  });\n})(window, window.angular);\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.services')\n    .factory('HelperService', HelperService);\n\n  function HelperService($log, Device, $q, _, $filter, moment, $timeout, UNITS) {\n    var service = {\n      changeIconMarker: changeIconMarker,\n      mapStyle: mapStyle,\n      addWeight: addWeight,\n      DOFormula:DOFormula\n    };\n    return service;\n\n\n\n    function changeIconMarker(device, sensors) {\n\n      var path = \"/assets/images/icons/\";\n      var now = moment();\n      device.icon = path + \"salmon.png\";\n      device.options = {\n        labelClass: \"smart-icon dark\",\n        labelAnchor: '30 50',\n        labelContent: device.name\n      };\n\n    }\n\n    function DOFormula(data) {\n            var tc=1*data.WT;\n            var muestra= 1*data.DO;\n            var sal = 32.1;\n            var tk=0.01*(tc+273.5)\n            var A = -173.4292+(249.6339/tk)+(143.3483*(Math.log(tk)))+(-21.8492*tk)+(sal*(-0.033096+(0.014259+(-0.0017*tk))*tk))\n            return ( (Math.exp(A)/0.7)* muestra)/100;\n    }\n\n\n\n    function mapStyle() {\n      return [{\n        \"featureType\": \"landscape.man_made\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"color\": \"#f7f1df\"\n        }]\n      }, {\n        \"featureType\": \"landscape.natural\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"color\": \"#d0e3b4\"\n        }]\n      }, {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"poi\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"poi.business\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"poi.medical\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"color\": \"#fbd3da\"\n        }]\n      }, {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"color\": \"#bde6ab\"\n        }]\n      }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n          \"color\": \"#ffe15f\"\n        }]\n      }, {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n          \"color\": \"#efd151\"\n        }]\n      }, {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n          \"color\": \"#ffffff\"\n        }]\n      }, {\n        \"featureType\": \"road.local\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n          \"color\": \"black\"\n        }]\n      }, {\n        \"featureType\": \"transit.station.airport\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n          \"color\": \"#cfb2db\"\n        }]\n      }, {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n          \"color\": \"#a2daf2\"\n        }]\n      }];\n\n    }\n\n\n    function addWeight(event) {\n      var prioritys = UNITS;\n\n      return _.sortBy(_.map(event, function(value, key) {\n\n\n        return {\n          id: key,\n          value: value,\n          weight: _.findWhere(prioritys, {\n            id: key\n          }) ? _.findWhere(prioritys, {\n            id: key\n          }).weight || 0 : 0\n        };\n      }), 'weight').reverse();\n    }\n\n\n\n  }\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('app.services')\n    .factory('ChartService', ChartService);\n\n  function ChartService($log) {\n  \tvar gagueTemplate={\n        value:0,\n        precision:2,\n        ranges:[]\n  \t}\n\n\n  \tvar historyTemplate =   {\n                options: {\n                    chart: {\n                        type                   : 'lineChart',\n                        noData                 : 'Esperando información...',\n                        margin                 : {\n                            top   : 32,\n                            right : 32,\n                            bottom: 32,\n                            left  : 32\n                        },\n                         showValues: true,\n                       \n                        useInteractiveGuideline: true,\n                        duration               : 2,\n                        clipEdge               : true,\n                        clipVoronoi            : false,\n                        interpolate            : 'cardinal',\n                        showLegend             : true,\n                        x                      : function (d)\n                        {\n                            return d.x;\n                        },\n                        y                      : function (d)\n                        {\n                            return d.y;\n                        },\n                        xAxis                 : {\n                            ticks:5,\n                            showMaxMin:true,\n                            staggerLabels:true,\n                            tickFormat: function (d)\n                            {\n                                var date = new Date(d);\n                                return d3.time.format('%d/%m/%Y %H:%M')(date);\n                            }\n                        },\n                        yAxis                  :{\n                            tickFormat: function(d) {\n                                return d3.format(\".1f\")(d);\n                            }\n                        },\n                        interactiveLayer       : {\n                            tooltip: {\n                                gravity: 's',\n                                classes: 'gravity-s'\n                            }\n                        }\n                    }\n                },\n                data   : [{\n                    \"key\": \"Oxigeno\",\n                    \"color\":'#0075C9',\n                    \"values\": [\n\n                    ]\n                },\n                {\n                    \"key\": \"Temperatura\",\n                     \"color\":'#F9CCC7',\n                    \"values\": [\n\n                    ]\n                }]\n    }\n\n    var twoHoursBefore = new Date();\n    twoHoursBefore.setHours(twoHoursBefore.getHours() - 2);\n\n\n\n    function generateFakeData() {\n        var now = new Date();\n        \n\n        var array=[\n\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*14 ), \"value\" : -140.73 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*13 ), \"value\" : -120.54 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*12 ), \"value\" : -99.64 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*11 ), \"value\" : -40.56 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*10 ), \"value\" : -10.23 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*9 ) , \"value\" : 34.32 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*8 ) , \"value\" : 54.45},\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*7 ) , \"value\" : 60.86 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*6 ) , \"value\" : 53.42},\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*5 ) , \"value\" : 44.14},\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*4 ) , \"value\" : 24.08 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*3 ) , \"value\" : 50.96},\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*2 ) , \"value\" : 100.19 },\n            { \"fecha\" :  new Date( now.getTime() - 1000 * 1000*1 ) , \"value\" : 240.05 }\n        ]\n        return array;\n    };\n\n\n    function generateFakeData2() {\n        var now = new Date();\n        var data = [{\n                    \"key\": \"ACC X\",\n                    \"values\": []\n                },{\n                    \"key\": \"ACC Y\",\n                    \"values\": []\n                },{\n                    \"key\": \"ACC Z\",\n                    \"values\": []\n                }];\n        for (var i = 0; i < 10; i++) {\n            data[0].values.push({ \"fecha\" :  new Date( now.getTime() - 1000 * 1000*(14-i) ), \"value\" : Math.floor((Math.random() * 200) + 1)})\n            data[1].values.push({ \"fecha\" :  new Date( now.getTime() - 1000 * 1000*(14-i) ), \"value\" : Math.floor((Math.random() * -1000) -500 )})\n            data[2].values.push({ \"fecha\" :  new Date( now.getTime() - 1000 * 1000*(14-i) ), \"value\" : Math.floor((Math.random() * 1000) + 800)})\n        };\n\n       \n        return data;\n    };\n\n    var lineChartTemplate=   {\n                options: {\n                    chart: {\n                        type                   : 'historicalBarChart',\n                        noData                 : 'Esperando información...',\n                        color                  : ['#0075C9'],\n                        \n                        margin                 : {\n                            top   : 32,\n                            right : 32,\n                            bottom: 32,\n                            left  : 32\n                        },\n                         showValues: true,\n                        isArea                 : true,\n                        useInteractiveGuideline: true,\n                        duration               : 500,\n                        clipEdge               : true,\n                        clipVoronoi            : false,\n                        interpolate            : 'cardinal',\n                        showLegend             : false,\n                        yDomain                : [-300, 300],\n                        x                      : function (d)\n                        {\n                            return d.fecha;\n                        },\n                        y                      : function (d)\n                        {\n                            return d.value;\n                        },\n                        xAxis                 : {\n                            ticks:4,\n                            staggerLabels:true,\n                            tickFormat: function (d)\n                            {\n                                var date = new Date( d);\n                                return d3.time.format('%d/%m/%Y %H:%M')(date);\n                            }\n                        },\n                        yAxis                  :{\n                            ticks:10\n                        },\n                        interactiveLayer       : {\n                            tooltip: {\n                                gravity: 's',\n                                classes: 'gravity-s'\n                            }\n                        }\n                    }\n                },\n                data   : [{\n                    \"key\": \"cm\",\n                    \"values\": generateFakeData()\n                }]\n            }\n\n    var lineChartACC=   {\n                options: {\n                    chart: {\n                        type                   : 'lineChart',\n                        noData                 : 'Esperando información...',                        \n                        margin                 : {\n                            top   : 32,\n                            right : 32,\n                            bottom: 32,\n                            left  : 32\n                        },\n                         showValues: true,\n                        isArea                 : false,\n                        useInteractiveGuideline: true,\n                        duration               : 500,\n                        x                      : function (d)\n                        {\n                            return d.fecha;\n                        },\n                        y                      : function (d)\n                        {\n                            return d.value;\n                        },\n                        xAxis                 : {\n                            ticks:4,\n                            staggerLabels:true,\n                            tickFormat: function (d)\n                            {\n                                var date = new Date( d);\n                                return d3.time.format('%d/%m/%Y %H:%M')(date);\n                            }\n                        },\n                        yAxis                  :{\n                            ticks:4\n                        },\n                        interactiveLayer       : {\n                            tooltip: {\n                                gravity: 's',\n                                classes: 'gravity-s'\n                            }\n                        }\n                    }\n                },\n                data   : generateFakeData2()\n            }\n\n    var service = {\n      createGague: createGague,\n      createHistory:createHistory,\n      createLineChart:createLineChart,\n      createLineChartACC:createLineChartACC\n    };\n\n    return service;\n\n    function createGague(lowerLimit,upperLimit,unit,ranges) {\n    \tvar gague= angular.copy(gagueTemplate);\n    \tgague.lowerLimit=lowerLimit;\n    \tgague.upperLimit=upperLimit;\n    \tgague.unit=unit;\n    \tgague.ranges=ranges;\t\n    \treturn  gague;\n    }\n\n\n    function createHistory() {\n    \tvar history= angular.copy(historyTemplate);\n    \treturn history;\n    }\n\n    function createLineChart() {\n    \tvar lineChart = angular.copy(lineChartTemplate);\n    \treturn lineChart;\n    }\n\n    function createLineChartACC() {\n        var lineChart = angular.copy(lineChartACC);\n        return lineChart;\n    }\n\n\n   }\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('app.services')\n        .factory('authService', authService);\n\n    function authService(ApiUser, $rootScope, $q) {\n        var currentUser;\n        var service = {\n            login: login,\n            logout: logout,\n            register: register,\n            isAuthenticated: isAuthenticated,\n            getCurrentUser: getCurrentUser,\n            resetPassword: resetPassword,\n            setPassword:setPassword,\n            changePassword:changePassword,\n            updateProfile:updateProfile\n        };\n        return service;\n\n        function login(credentials, rememberMe) {\n            return ApiUser\n                .login({\n                    rememberMe: rememberMe\n                }, credentials)\n                .$promise;\n        }\n\n        function logout() {\n            currentUser=null;\n            return ApiUser\n                .logout().$promise;\n        }\n\n        function register(newUser) {\n            return ApiUser.create(newUser).$promise;\n        }\n\n        function isAuthenticated() {\n            return ApiUser.isAuthenticated();\n        }\n\n        function getCurrentUser() {\n            if (!currentUser) {\n                return  ApiUser.getCurrent().$promise.then(function(response) {\n                    currentUser=response;\n                    return response;\n                });              \n            }\n\n            return $q.when(currentUser);\n        }\n\n        function resetPassword(email) {\n            return ApiUser.resetPassword({email:email}).$promise;\n        }\n\n        function setPassword(access_token,password) {\n            return ApiUser.setPassword({access_token:access_token},{newPassword:password}).$promise;\n        }\n\n        function changePassword(oldPassword,newPassword) {\n            return ApiUser.changePassword({oldPassword:oldPassword,newPassword:newPassword}).$promise;\n        }\n\n        function updateProfile(newProfile) {\n            return ApiUser.prototype$patchAttributes(newProfile).$promise.then(function(response) {\n                currentUser=response;\n                return response;\n            })\n        }\n    }\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('app.services')\n    .factory('AlertService', AlertService);\n\n  function AlertService($log, $q, managerDeviceService,ToastService) {\n  \t\n    var service = {\n      checkAlert: checkAlert,\n      checkOldAlert:checkOldAlert\n    };\n\n    return service;\n\n    function checkAlert(data) {\n            $q.all([managerDeviceService.getRules(),managerDeviceService.getDevices()]).then(function(response) {\n                var rulers= response[0];\n                var devices= response[1];\n                var device = _.find(devices, function(device) {\n                    return device.deviceId === data.deviceId\n                })\n                if(!device)\n                \treturn;\n                var condition=[];\n                for (var i = 0; i < rulers.length; i++) {\n                    condition = angular.copy(rulers[i].condition).split(\" \");\n                    $log.debug(\"condition\",condition);\n\n                    if (device.deviceId ==  rulers[i].deviceId) {\n                        if (_.isNumber(parseInt(condition[2])) && !_.isNaN(parseInt(condition[2]))) {\n                            if (eval(data.dataOriginal[condition[0]] + condition[1] + condition[2])) {\n                                $log.debug(\"ALERT --> \" + data.dataOriginal[condition[0]] + condition[1] + condition[2])\n                                \n                                var alert={\n                                    title:\"Nodo \"+device.name,\n                                    event:\"Regla cumplida en nodo \"+device.name+\" \"+condition[0]+ \" \"+ data.dataOriginal[condition[0]] +\" \"+ condition[1] +\" \"+ condition[2],\n                                    deviceId: device.deviceId,\n                                    timestamp: data.timestamp\n                                }\n                                //add danger color flag\n                                for (var x = 0; x < data.data.length; x++) {\n                                    if(data.data[x].id == condition[0]){\n                                        data.data[x].alert=true;\n                                    }else{\n                                    \t data.data[x].alert=false;\n                                    }\n                                };\n                                managerDeviceService.addAlert(alert);\n                                ToastService.toastrError(alert.event);\n\n\n                            }\n                        } else {\n\n                             if (eval(data.dataOriginal[condition[0]] + condition[1] + data.dataOriginal[condition[2]])) {\n                                  $log.debug(\"ALERT --> \" + data.dataOriginal[condition[0]] + condition[1] + condition[2]+ data.dataOriginal[condition[2]])\n \n                                    var alert={\n                                       title:\"Nodo \"+device.name,\n                                        event:\"Regla cumplida en nodo \"+device.name+\" \"+condition[0]+ \" \"+ data.dataOriginal[condition[0]] +\" \"+ condition[1] +\" \"+ condition[2]+ \" \"+ data.dataOriginal[condition[2]],\n                                        deviceId: device.deviceId,\n                                        timestamp: data.timestamp\n                                    }\n                                for (var z = 0; z < data.data.length; z++) {\n                                    if(data.data[z].id == condition[0] || data.data[z].id == condition[2]){\n                                        data.data[z].alert=true;\n                                    }\n                                    else{\n                                    \t data.data[z].alert=false;\n                                    }\n                                };\n                                managerDeviceService.addAlert(alert);\n                                ToastService.toastrError(alert.event);\n                            }\n                        }\n\n                     \n                    }\n                };\n\n\n            })\n           \n    }\n\n    function checkOldAlert(device) {\n          $q.all([managerDeviceService.getRules()]).then(function(response) {\n                var rulers= response[0];\n                var condition=[];\n                $log.debug(\"Check Old Alert\");\n                for (var i = 0; i < rulers.length; i++) {\n                    condition = angular.copy(rulers[i].condition).split(\" \");\n                    $log.debug(\"Condition\",condition);\n\n                    if (device.deviceId ==  rulers[i].deviceId) {\n\n                        if (_.isNumber(parseInt(condition[2])) && !_.isNaN(parseInt(condition[2]))) {\n\n                            if (eval(device.event.dataOriginal[condition[0]] + condition[1] + condition[2])) {\n                                $log.debug(\"ALERT --> \" + device.event.dataOriginal[condition[0]] + condition[1] + condition[2])\n                              \n                                //add danger olor flag\n                                for (var x = 0; x < device.event.data.length; x++) {\n                                    if(device.event.data[x].id == condition[0]){\n                                        device.event.data[x].alert=true;\n                                    }else{\n                                        device.event.data[x].alert=false;\n\n                                    }\n                                };\n                              \n\n                            }\n                        } else {\n\n                             if (eval(device.event.dataOriginal[condition[0]] + condition[1] + device.event.dataOriginal[condition[2]])) {\n                                  $log.debug(\"ALERT --> \" + device.event.dataOriginal[condition[0]] + condition[1] + condition[2]+ device.event.dataOriginal[condition[2]])\n \n                                   \n                                for (var z = 0; z < device.event.data.length; z++) {\n                                    if(device.event.data[z].id == condition[0] || device.event.data[z].id == condition[2]){\n                                        device.event.data[z].alert=true;\n                                    }else{\n                                       device.event.data[z].alert=false;\t\n                                    }\n                                };\n                                 \n                            }\n                        }\n\n                    }\n                };\n\n                \n\n            })\n    }\n\n\n\n   }\n\n})();\n/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution. \n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho.MQTT module\n// only has a single public function, client, which returns\n// a Paho.MQTT client object given connection details.\n \n/**\n * Send and receive messages using web browsers.\n * <p> \n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *  \n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number. \n * <li>Specifying options that relate to the communications link with the server, \n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.MQTT.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.MQTT.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl> \n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n * \n * <code><pre>\nclient = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message); \n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect(); \n};\t\n * </pre></code>\n * @namespace Paho.MQTT \n */\n\nif (typeof Paho === \"undefined\") {\n\tPaho = {};\n}\n\nPaho.MQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module. \n\n\tvar version = \"@VERSION@\";\n\tvar buildLevel = \"@BUILDLEVEL@\";\n\t\n\t/** \n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private \n\t */\n\tvar MESSAGE_TYPE = {\n\t\tCONNECT: 1, \n\t\tCONNACK: 2, \n\t\tPUBLISH: 3,\n\t\tPUBACK: 4,\n\t\tPUBREC: 5, \n\t\tPUBREL: 6,\n\t\tPUBCOMP: 7,\n\t\tSUBSCRIBE: 8,\n\t\tSUBACK: 9,\n\t\tUNSUBSCRIBE: 10,\n\t\tUNSUBACK: 11,\n\t\tPINGREQ: 12,\n\t\tPINGRESP: 13,\n\t\tDISCONNECT: 14\n\t};\n\t\n\t// Collection of utility methods used to simplify module code \n\t// and promote the DRY pattern.  \n\n\t/**\n\t * Validate an object's parameter names to ensure they \n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj. \n\t * @throws {Error} Invalid option parameter found. \n\t * @private \n\t */\n\tvar validate = function(obj, keys) {\n\t\tfor (var key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {       \t\t\n\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t   throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t} else {\t\n\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\tfor (var key in keys)\n\t\t\t\t\t\tif (keys.hasOwnProperty(key))\n\t\t\t\t\t\t\terrorStr = errorStr+\" \"+key;\n\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope. \n\t * @param {function} User function\n\t * @param {object} Function scope  \n\t * @return {function} User function bound to another scope\n\t * @private \n\t */\n\tvar scope = function (f, scope) {\n\t\treturn function () {\n\t\t\treturn f.apply(scope, arguments);\n\t\t};\n\t};\n\t\n\t/** \n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private \n\t */\n\tvar ERROR = {\n\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"}, \n\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"}\n\t};\n\t\n\t/** CONNACK RC Meaning. */\n\tvar CONNACK_RC = {\n\t\t0:\"Connection Accepted\",\n\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t2:\"Connection Refused: identifier rejected\",\n\t\t3:\"Connection Refused: server unavailable\",\n\t\t4:\"Connection Refused: bad user name or password\",\n\t\t5:\"Connection Refused: not authorized\"\n\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR.KEY value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\tvar format = function(error, substitutions) {\n\t\tvar text = error.text;\n\t\tif (substitutions) {\n\t\t  var field,start;\n\t\t  for (var i=0; i<substitutions.length; i++) {\n\t\t\tfield = \"{\"+i+\"}\";\n\t\t\tstart = text.indexOf(field);\n\t\t\tif(start > 0) {\n\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t}\n\t\t  }\n\t\t}\n\t\treturn text;\n\t};\n\t\n\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\t\n\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t * \n\t * Optional properties\n\t * \n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *  \n\t * \"Flag\" properties \n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\tvar WireMessage = function (type, options) { \t\n\t\tthis.type = type;\n\t\tfor (var name in options) {\n\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\tthis[name] = options[name];\n\t\t\t}\n\t\t}\n\t};\n\t\n\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\tvar first = ((this.type & 0x0f) << 4);\n\t\t\n\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\tvar remLength = 0;\n\t\tvar topicStrLength = new Array();\n\t\tvar destinationNameLength = 0;\n\t\t\n\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tremLength += 2;\n\n\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\tvar willMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\t\n\t\t\t\tif (this.password != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\t        \t\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\t   \n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;  \n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\n\t\t// Now we can allocate a buffer for the message\n\n\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t//Write the fixed header into the buffer\n\t\tbyteStream[0] = first;\n\t\tbyteStream.set(mbi,1);\n\n\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\t\t\n\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar connectFlags = 0;\n\t\t\tif (this.cleanSession) \n\t\t\t\tconnectFlags = 0x02;\n\t\t\tif (this.willMessage != undefined ) {\n\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tconnectFlags |= 0x80;\n\t\t\tif (this.password != undefined)\n\t\t\t\tconnectFlags |= 0x40;\n\t\t\tbyteStream[pos++] = connectFlags; \n\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t}\n\n\t\t// Output the messageIdentifier - if there is one\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos); \n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\tif (this.password != undefined) \n\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\t\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\t\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\t\t\t\t\t\n\t\t\t\tbreak;\n\n//    \t    case MESSAGE_TYPE.PUBREC:\t\n//    \t    case MESSAGE_TYPE.PUBREL:\t\n//    \t    case MESSAGE_TYPE.PUBCOMP:\t\n//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\t\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t}\n\n\t\treturn buffer;\n\t}\t\n\n\tfunction decodeMessage(input,pos) {\n\t    var startingPos = pos;\n\t\tvar first = input[pos];\n\t\tvar type = first >> 4;\n\t\tvar messageInfo = first &= 0x0f;\n\t\tpos += 1;\n\t\t\n\n\t\t// Decode the remaining length (MBI format)\n\n\t\tvar digit;\n\t\tvar remLength = 0;\n\t\tvar multiplier = 1;\n\t\tdo {\n\t\t\tif (pos == input.length) {\n\t\t\t    return [null,startingPos];\n\t\t\t}\n\t\t\tdigit = input[pos++];\n\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\tmultiplier *= 128;\n\t\t} while ((digit & 0x80) != 0);\n\t\t\n\t\tvar endPos = pos+remLength;\n\t\tif (endPos > input.length) {\n\t\t    return [null,startingPos];\n\t\t}\n\n\t\tvar wireMessage = new WireMessage(type);\n\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBLISH:     \t    \t\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\t\t\t\t\t\t\t\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar message = new Paho.MQTT.Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01) \n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\t    \n\t\t\tcase  MESSAGE_TYPE.PUBREL:    \n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:    \t    \t\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\t\n\t\t\t\tbreak;\n\t\t\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\t\t\t\t\n\t\treturn [wireMessage,endPos];\t\n\t}\n\n\tfunction writeUint16(input, buffer, offset) {\n\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\tbuffer[offset++] = input % 256;     //LSB \n\t\treturn offset;\n\t}\t\n\n\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\tstringToUTF8(input, buffer, offset);\n\t\treturn offset + utf8Length;\n\t}\t\n\n\tfunction readUint16(buffer, offset) {\n\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t}\t\n\n\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private \n\t */\n\tfunction encodeMBI(number) {\n\t\tvar output = new Array(1);\n\t\tvar numBytes = 0;\n\n\t\tdo {\n\t\t\tvar digit = number % 128;\n\t\t\tnumber = number >> 7;\n\t\t\tif (number > 0) {\n\t\t\t\tdigit |= 0x80;\n\t\t\t}\n\t\t\toutput[numBytes++] = digit;\n\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\treturn output;\n\t}\n\n\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\tfunction UTF8Length(input) {\n\t\tvar output = 0;\n\t\tfor (var i = 0; i<input.length; i++) \n\t\t{\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t   {\n\t\t\t\t\t  // Surrogate pair means its a 4 byte character\n\t\t\t\t\t  if (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  i++;\n\t\t\t\t\t\t  output++;\n\t\t\t\t\t\t}\n\t\t\t\t   output +=3;\n\t\t\t\t   }\n\t\t\telse if (charCode > 0x7F)\n\t\t\t\toutput +=2;\n\t\t\telse\n\t\t\t\toutput++;\n\t\t} \n\t\treturn output;\n\t}\n\t\n\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\tfunction stringToUTF8(input, output, start) {\n\t\tvar pos = start;\n\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\n\t\t\t// Check for a surrogate pair.\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t}\n\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (charCode <= 0x7F) {\n\t\t\t\toutput[pos++] = charCode;\n\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t} else if (charCode <= 0xFFFF) {    \t\t\t\t    \n\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;   \n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;   \n\t\t\t} else {\n\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t};\n\t\t} \n\t\treturn output;\n\t}\n\t\n\tfunction parseUTF8(input, offset, length) {\n\t\tvar output = \"\";\n\t\tvar utf16;\n\t\tvar pos = offset;\n\n\t\twhile (pos < offset+length)\n\t\t{\n\t\t\tvar byte1 = input[pos++];\n\t\t\tif (byte1 < 128)\n\t\t\t\tutf16 = byte1;\n\t\t\telse \n\t\t\t{\n\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\tif (byte2 < 0) \n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\telse \n\t\t\t\t{ \n\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\tif (byte3 < 0) \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t   var byte4 = input[pos++]-128;\n\t\t\t\t\t\t\t\t   if (byte4 < 0) \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t   if (byte1 < 0xF8)        // 4 byte character \n\t\t\t\t\t\t\t\t\t\t   utf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t   else                     // longer encodings are not supported  \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}  \n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t  {\n\t\t\t\t\t utf16 -= 0x10000;\n\t\t\t\t\t output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\t utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t  }\n\t\t\toutput += String.fromCharCode(utf16);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/** \n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\tvar Pinger = function(client, window, keepAliveInterval) { \n\t\tthis._client = client;        \t\n\t\tthis._window = window;\n\t\tthis._keepAliveInterval = keepAliveInterval*1000;     \t\n\t\tthis.isReset = false;\n\t\t\n\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode(); \n\t\t\n\t\tvar doTimeout = function (pinger) {\n\t\t\treturn function () {\n\t\t\t\treturn doPing.apply(pinger);\n\t\t\t};\n\t\t};\n\t\t\n\t\t/** @ignore */\n\t\tvar doPing = function() { \n\t\t\tif (!this.isReset) {\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t} else {\n\t\t\t\tthis.isReset = false;\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\tthis._client.socket.send(pingReq); \n\t\t\t\tthis.timeout = this._window.setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t}\n\t\t}\n\n\t\tthis.reset = function() {\n\t\t\tthis.isReset = true;\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t}\n\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t }; \n\n\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\tvar Timeout = function(client, window, timeoutSeconds, action, args) {\n\t\tthis._window = window;\n\t\tif (!timeoutSeconds)\n\t\t\ttimeoutSeconds = 30;\n\t\t\n\t\tvar doTimeout = function (action, client, args) {\n\t\t\treturn function () {\n\t\t\t\treturn action.apply(client, args);\n\t\t\t};\n\t\t};\n\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\t\t\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t}; \n\t\n\t/*\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t * \n\t * @name Paho.MQTT.ClientImpl @constructor \n\t * @param {String} host the DNS nameof the webSocket host. \n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\tif (!(\"WebSocket\" in global && global[\"WebSocket\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t}\n\t\tif (!(\"localStorage\" in global && global[\"localStorage\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"localStorage\"]));\n\t\t}\n\t\tif (!(\"ArrayBuffer\" in global && global[\"ArrayBuffer\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t}\n\t\tthis._trace(\"Paho.MQTT.Client\", uri, host, port, path, clientId);\n\n\t\tthis.host = host;\n\t\tthis.port = port;\n\t\tthis.path = path;\n\t\tthis.uri = uri;\n\t\tthis.clientId = clientId;\n\n\t\t// Local storagekeys are qualified with the following string.\n\t\t// The conditional inclusion of path in the key is for backward\n\t\t// compatibility to when the path was not configurable and assumed to\n\t\t// be /mqtt\n\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t// Create private instance-only message queue\n\t\t// Internal queue of messages to be sent, in sending order. \n\t\tthis._msg_queue = [];\n\n\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids. \n\t\tthis._sentMessages = {};\n\n\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t// indexed by their respective message ids. \n\t\tthis._receivedMessages = {};\n\n\t\t// Internal list of callbacks to be executed when messages\n\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\tthis._notify_msg_sent = {};\n\n\t\t// Unique identifier for SEND messages, incrementing\n\t\t// counter as messages are sent.\n\t\tthis._message_identifier = 1;\n\t\t\n\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\tthis._sequence = 0;\n\t\t\n\n\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.   \t\n\t\tfor (var key in localStorage)\n\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) == 0  \t\t    \n\t\t\t\t|| key.indexOf(\"Received:\"+this._localKey) == 0)\n\t\t\tthis.restore(key);\n\t};\n\n\t// Messaging Client public instance members. \n\tClientImpl.prototype.host;\n\tClientImpl.prototype.port;\n\tClientImpl.prototype.path;\n\tClientImpl.prototype.uri;\n\tClientImpl.prototype.clientId;\n\n\t// Messaging Client private instance members.\n\tClientImpl.prototype.socket;\n\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\tClientImpl.prototype.connected = false;\n\t/* The largest message identifier allowed, may not be larger than 2**16 but \n\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t */ \n\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\tClientImpl.prototype.connectOptions;\n\tClientImpl.prototype.hostIndex;\n\tClientImpl.prototype.onConnectionLost;\n\tClientImpl.prototype.onMessageDelivered;\n\tClientImpl.prototype.onMessageArrived;\n\tClientImpl.prototype.traceFunction;\n\tClientImpl.prototype._msg_queue = null;\n\tClientImpl.prototype._connectTimeout;\n\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\tClientImpl.prototype.sendPinger = null;\n\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\tClientImpl.prototype.receivePinger = null;\n\t\n\tClientImpl.prototype.receiveBuffer = null;\n\t\n\tClientImpl.prototype._traceBuffer = null;\n\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\tClientImpl.prototype.connect = function (connectOptions) {\n\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\"); \n\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\t\t\n\t\tif (this.connected) \n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\tif (this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\n\t\tthis.connectOptions = connectOptions;\n\t\t\n\t\tif (connectOptions.uris) {\n\t\t\tthis.hostIndex = 0;\n\t\t\tthis._doConnect(connectOptions.uris[0]);  \n\t\t} else {\n\t\t\tthis._doConnect(this.uri);  \t\t\n\t\t}\n\t\t\n\t};\n\n\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\t\t\t  \n\t\tif (!this.connected)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n\t\twireMessage.topics=[filter];\n\t\tif (subscribeOptions.qos != undefined)\n\t\t\twireMessage.requestedQos = [subscribeOptions.qos];\n\t\telse \n\t\t\twireMessage.requestedQos = [0];\n\t\t\n\t\tif (subscribeOptions.onSuccess) {\n\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t}\n\n\t\tif (subscribeOptions.onFailure) {\n\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode});};\n\t\t}\n\n\t\tif (subscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, subscribeOptions.timeout, subscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:subscribeOptions.invocationContext, \n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code, \n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\t\t\n\t\t// All subscriptions return a SUBACK. \n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {  \n\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\t\t\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n\t\twireMessage.topics = [filter];\n\t\t\n\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t}\n\t\tif (unsubscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, unsubscribeOptions.timeout, unsubscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\t \n\t\t// All unsubscribes return a SUBACK.         \n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t \n\tClientImpl.prototype.send = function (message) {\n\t\tthis._trace(\"Client.send\", message);\n\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\twireMessage.payloadMessage = message;\n\t\t\n\t\tif (message.qos > 0)\n\t\t\tthis._requires_ack(wireMessage);\n\t\telse if (this.onMessageDelivered)\n\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t\n\tClientImpl.prototype.disconnect = function () {\n\t\tthis._trace(\"Client.disconnect\");\n\n\t\tif (!this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\t\t\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t// in case of a failure later on in the disconnect processing.\n\t\t// as a consequence, the _disconected call back may be run several times.\n\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t\n\tClientImpl.prototype.getTraceLog = function () {\n\t\tif ( this._traceBuffer !== null ) {\n\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\tfor (var key in this._sentMessages)\n\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\t\t\t\n\t\t\treturn this._traceBuffer;\n\t\t}\n\t};\n\t\n\tClientImpl.prototype.startTrace = function () {\n\t\tif ( this._traceBuffer === null ) {\n\t\t\tthis._traceBuffer = [];\n\t\t}\n\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t};\n\t\n\tClientImpl.prototype.stopTrace = function () {\n\t\tdelete this._traceBuffer;\n\t};\n\n\tClientImpl.prototype._doConnect = function (wsurl) { \t        \n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters. \n\t\tif (this.connectOptions.useSSL) {\n\t\t    var uriParts = wsurl.split(\":\");\n\t\t    uriParts[0] = \"wss\";\n\t\t    wsurl = uriParts.join(\":\");\n\t\t}\n\t\tthis.connected = false;\n\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t} else {\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t}\n\t\tthis.socket.binaryType = 'arraybuffer';\n\t\t\n\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\t\t\n\t\tthis.sendPinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\tthis.receivePinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\t\n\t\tthis._connectTimeout = new Timeout(this, window, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t};\n\n\t\n\t// Schedule a new message to be sent over the WebSockets\n\t// connection. CONNECT messages cause WebSocket connection\n\t// to be started. All other messages are queued internally\n\t// until this has happened. When WS connection starts, process\n\t// all outstanding messages. \n\tClientImpl.prototype._schedule_message = function (message) {\n\t\tthis._msg_queue.push(message);\n\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK. \n\t\tif (this.connected) {\n\t\t\tthis._process_queue();\n\t\t}\n\t};\n\n\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\t\t\n\t\tswitch(wireMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  if(wireMessage.pubRecReceived)\n\t\t\t\t  storedMessage.pubRecReceived = true;\n\t\t\t  \n\t\t\t  // Convert the payload to a hex string.\n\t\t\t  storedMessage.payloadMessage = {};\n\t\t\t  var hex = \"\";\n\t\t\t  var messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t  for (var i=0; i<messageBytes.length; i++) {\n\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t  hex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\telse \n\t\t\t\t  hex = hex+messageBytes[i].toString(16);\n\t\t\t  }\n\t\t\t  storedMessage.payloadMessage.payloadHex = hex;\n\t\t\t  \n\t\t\t  storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t  storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t  if (wireMessage.payloadMessage.duplicate) \n\t\t\t\t  storedMessage.payloadMessage.duplicate = true;\n\t\t\t  if (wireMessage.payloadMessage.retained) \n\t\t\t\t  storedMessage.payloadMessage.retained = true;\t   \n\t\t\t  \n\t\t\t  // Add a sequence number to sent messages.\n\t\t\t  if ( prefix.indexOf(\"Sent:\") == 0 ) {\n\t\t\t\t  if ( wireMessage.sequence === undefined )\n\t\t\t\t\t  wireMessage.sequence = ++this._sequence;\n\t\t\t\t  storedMessage.sequence = wireMessage.sequence;\n\t\t\t  }\n\t\t\t  break;    \n\t\t\t  \n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, storedMessage]));\n\t\t}\n\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t};\n\t\n\tClientImpl.prototype.restore = function(key) {    \t\n\t\tvar value = localStorage.getItem(key);\n\t\tvar storedMessage = JSON.parse(value);\n\t\t\n\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\t\t\n\t\tswitch(storedMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  // Replace the payload message with a Message object.\n\t\t\t  var hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t  var buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t  var byteStream = new Uint8Array(buffer); \n\t\t\t  var i = 0;\n\t\t\t  while (hex.length >= 2) { \n\t\t\t\t  var x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t  hex = hex.substring(2, hex.length);\n\t\t\t\t  byteStream[i++] = x;\n\t\t\t  }\n\t\t\t  var payloadMessage = new Paho.MQTT.Message(byteStream);\n\t\t\t  \n\t\t\t  payloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t  payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t  if (storedMessage.payloadMessage.duplicate) \n\t\t\t\t  payloadMessage.duplicate = true;\n\t\t\t  if (storedMessage.payloadMessage.retained) \n\t\t\t\t  payloadMessage.retained = true;\t \n\t\t\t  wireMessage.payloadMessage = payloadMessage;\n\t\t\t  \n\t\t\t  break;    \n\t\t\t  \n\t\t\tdefault:\n\t\t\t  throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t}\n\t\t\t\t\t\t\t\n\t\tif (key.indexOf(\"Sent:\"+this._localKey) == 0) {\n\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;    \t\t    \n\t\t} else if (key.indexOf(\"Received:\"+this._localKey) == 0) {\n\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t}\n\t};\n\t\n\tClientImpl.prototype._process_queue = function () {\n\t\tvar message = null;\n\t\t// Process messages in order they were added\n\t\tvar fifo = this._msg_queue.reverse();\n\n\t\t// Send all queued messages down socket connection\n\t\twhile ((message = fifo.pop())) {\n\t\t\tthis._socket_send(message);\n\t\t\t// Notify listeners that message was successfully sent\n\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\tthis._message_identifier++;\n\t\t}\n\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t}\n\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\tthis._message_identifier = 1;\n\t\t}\n\t};\n\n\t/** \n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_open = function () {      \n\t\t// Create the CONNECT message object.\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions); \n\t\twireMessage.clientId = this.clientId;\n\t\tthis._socket_send(wireMessage);\n\t};\n\n\t/** \n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_message = function (event) {\n\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\tvar messages = this._deframeMessages(event.data);\n\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t    this._handleMessage(messages[i]);\n\t\t}\n\t}\n\t\n\tClientImpl.prototype._deframeMessages = function(data) {\n\t\tvar byteArray = new Uint8Array(data);\n\t    if (this.receiveBuffer) {\n\t        var newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t        newData.set(this.receiveBuffer);\n\t        newData.set(byteArray,this.receiveBuffer.length);\n\t        byteArray = newData;\n\t        delete this.receiveBuffer;\n\t    }\n\t\ttry {\n\t\t    var offset = 0;\n\t\t    var messages = [];\n\t\t    while(offset < byteArray.length) {\n\t\t        var result = decodeMessage(byteArray,offset);\n\t\t        var wireMessage = result[0];\n\t\t        offset = result[1];\n\t\t        if (wireMessage !== null) {\n\t\t            messages.push(wireMessage);\n\t\t        } else {\n\t\t            break;\n\t\t        }\n\t\t    }\n\t\t    if (offset < byteArray.length) {\n\t\t    \tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t    }\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\n\t\t\treturn;\n\t\t}\n\t\treturn messages;\n\t}\n\t\n\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\t\t\n\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\ttry {\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\n\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\tfor (var key in this._sentMessages) {\t    \t\t\n\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t}\n\t\t\t\t// Client connected and ready for business.\n\t\t\t\tif (wireMessage.returnCode === 0) {\n\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\t\t\t\t} else {\n\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Resend messages.\n\t\t\t\tvar sequencedMessages = new Array();\n\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t}\n\t\t  \n\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t}\n\n\t\t\t\t// Process all queued messages now that the connection is established. \n\t\t\t\tthis._process_queue();\n\t\t\t\tbreak;\n\t\t\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\tif (receivedMessage) {\n\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubCompMessage);                    \n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBCOMP: \n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n          \t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t} \n\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) { \n\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\tthis.sendPinger.reset();\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\n\t\t\treturn;\n\t\t}\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_error = function (error) {\n\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_close = function () {\n\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._socket_send = function (wireMessage) {\n\t\t\n\t\tif (wireMessage.type == 1) {\n\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\"); \n\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t}\n\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\t\t\n\t\tthis.socket.send(wireMessage.encode());\n\t\t/* We have proved to the server we are alive. */\n\t\tthis.sendPinger.reset();\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\"+wireMmessage.payloadMessage.qos);\n\t\t};\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\tif (this.onMessageArrived) {\n\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t}\n\t};\n\n\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\t\t\n\t\tthis.sendPinger.cancel();\n\t\tthis.receivePinger.cancel();\n\t\tif (this._connectTimeout)\n\t\t\tthis._connectTimeout.cancel();\n\t\t// Clear message buffers.\n\t\tthis._msg_queue = [];\n\t\tthis._notify_msg_sent = {};\n\t   \n\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\tthis.socket.onopen = null;\n\t\t\tthis.socket.onmessage = null;\n\t\t\tthis.socket.onerror = null;\n\t\t\tthis.socket.onclose = null;\n\t\t\tif (this.socket.readyState === 1)\n\t\t\t\tthis.socket.close();\n\t\t\tdelete this.socket;           \n\t\t}\n\t\t\n\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\tthis.hostIndex++;\n\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\n\t\t} else {\n\t\t\n\t\t\tif (errorCode === undefined) {\n\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t}\n\t\t\t\n\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\tif (this.connected) {\n\t\t\t\tthis.connected = false;\n\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.       \n\t\t\t\tif (this.onConnectionLost)\n\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText});      \t\n\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\")\n\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);  \n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t}\t\n\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\tif (this.traceFunction) {\n\t\t\tfor (var i in arguments)\n\t\t\t{\t\n\t\t\t\tif (typeof arguments[i] !== \"undefined\")\n\t\t\t\t\targuments[i] = JSON.stringify(arguments[i]);\n\t\t\t}\n\t\t\tvar record = Array.prototype.slice.call(arguments).join(\"\");\n\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t}\n\n\t\t//buffer style trace\n\t\tif ( this._traceBuffer !== null ) {  \n\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {    \n\t\t\t\t\tthis._traceBuffer.shift();              \n\t\t\t\t}\n\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t   };\n\t\t};\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\tvar traceObjectMasked = {};\n\t\tfor (var attr in traceObject) {\n\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\tif (attr == masked) \n\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\telse\n\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t} \n\t\t}\n\t\treturn traceObjectMasked;\n\t};\n\n\t// ------------------------------------------------------------------------\n\t// Public Programming interface.\n\t// ------------------------------------------------------------------------\n\t\n\t/** \n\t * The JavaScript application communicates to the server using a {@link Paho.MQTT.Client} object. \n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish. \n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods \n\t * (even though the underlying protocol exchange might be synchronous in nature). \n\t * This means they signal their completion by calling back to the application, \n\t * via Success or Failure callback functions provided by the application on the method in question. \n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime \n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>, \n\t * that are defined on the {@link Paho.MQTT.Client} object.  \n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client. \n\t *\n\t * @name Paho.MQTT.Client    \n\t * \n\t * @constructor\n\t *  \n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t * \n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost. \n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network \n\t *                            cause the client to be disconnected. The disconnect call back may be called without \n\t *                            the connectionComplete call back being invoked if, for example the client fails to \n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>   \n\t *                            <li>errorCode\n\t *                            <li>errorMessage       \n\t *                            </ol>\n\t * @property {function} onMessageDelivered called when a message has been delivered. \n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked. \n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>   \n\t *                            <li>{@link Paho.MQTT.Message} that was delivered.\n\t *                            </ol>    \n\t * @property {function} onMessageArrived called when a message has arrived in this Paho.MQTT.client. \n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>   \n\t *                            <li>{@link Paho.MQTT.Message} that has arrived.\n\t *                            </ol>    \n\t */\n\tvar Client = function (host, port, path, clientId) {\n\t    \n\t    var uri;\n\t    \n\t\tif (typeof host !== \"string\")\n\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\t    \n\t    if (arguments.length == 2) {\n\t        // host: must be full ws:// uri\n\t        // port: clientId\n\t        clientId = port;\n\t        uri = host;\n\t        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t        if (match) {\n\t            host = match[4]||match[2];\n\t            port = parseInt(match[7]);\n\t            path = match[8];\n\t        } else {\n\t            throw new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t        }\n\t    } else {\n\t        if (arguments.length == 3) {\n\t\t\t\tclientId = path;\n\t\t\t\tpath = \"/mqtt\";\n\t\t\t}\n\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\tif (typeof path !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\t\t\t\n\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") != -1 && host.slice(0,1) != \"[\" && host.slice(-1) != \"]\");\n\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t}\n\n\t\tvar clientIdLength = 0;\n\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\tvar charCode = clientId.charCodeAt(i);                   \n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {    \t\t\t\n\t\t\t\t i++; // Surrogate pair.\n\t\t\t}   \t\t   \n\t\t\tclientIdLength++;\n\t\t}     \t   \t\n\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"])); \n\t\t\n\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\t\tthis._getHost =  function() { return host; };\n\t\tthis._setHost = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\t\n\t\tthis._getPort = function() { return port; };\n\t\tthis._setPort = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getPath = function() { return path; };\n\t\tthis._setPath = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getURI = function() { return uri; };\n\t\tthis._setURI = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\n\t\tthis._getClientId = function() { return client.clientId; };\n\t\tthis._setClientId = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\n\t\tthis._getOnConnectionLost = function() { return client.onConnectionLost; };\n\t\tthis._setOnConnectionLost = function(newOnConnectionLost) { \n\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t};\n\n\t\tthis._getOnMessageDelivered = function() { return client.onMessageDelivered; };\n\t\tthis._setOnMessageDelivered = function(newOnMessageDelivered) { \n\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t};\n\t   \n\t\tthis._getOnMessageArrived = function() { return client.onMessageArrived; };\n\t\tthis._setOnMessageArrived = function(newOnMessageArrived) { \n\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t};\n\n\t\tthis._getTrace = function() { return client.traceFunction; };\n\t\tthis._setTrace = function(trace) {\n\t\t\tif(typeof trace === \"function\"){\n\t\t\t\tclient.traceFunction = trace;\n\t\t\t}else{\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t}\n\t\t};\n\t\t\n\t\t/** \n\t\t * Connect this Messaging client to its server. \n\t\t * \n\t\t * @name Paho.MQTT.Client#connect\n\t\t * @function\n\t\t * @param {Object} connectOptions - attributes used with the connection. \n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this \n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.MQTT.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {Number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server \n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement \n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.       \n\t\t * </ol>\n\t\t * @config {function} [onFailure] called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.       \n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.      \n\t\t * </ol>\n\t\t * @config {Array} [hosts] If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://example.com:1883/mqtt), that are tried in order in place \n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t\t * @config {Array} [ports] If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t\t * @throws {InvalidState} if the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\tthis.connect = function (connectOptions) {\n\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\t\t\t\t\t   userName:\"string\", \n\t\t\t\t\t\t\t\t\t   password:\"string\", \n\t\t\t\t\t\t\t\t\t   willMessage:\"object\", \n\t\t\t\t\t\t\t\t\t   keepAliveInterval:\"number\", \n\t\t\t\t\t\t\t\t\t   cleanSession:\"boolean\", \n\t\t\t\t\t\t\t\t\t   useSSL:\"boolean\",\n\t\t\t\t\t\t\t\t\t   invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t   hosts:\"object\",\n\t\t\t\t\t\t\t\t\t   ports:\"object\",\n\t\t\t\t\t\t\t\t\t   mqttVersion:\"number\",\n\t\t\t\t\t\t\t\t\t   mqttVersionExplicit:\"boolean\",\n\t\t\t\t\t\t\t\t\t   uris: \"object\"});\n\t\t\t\n\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t}\n\n\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t} else {\n\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t}\n\n\t\t\t//Check that if password is set, so is username\n\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]))\n\n\t\t\tif (connectOptions.willMessage) {\n\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\tconnectOptions.willMessage.stringPayload;\n\t\t\t\t\n\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t}\n\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\tif (connectOptions.hosts) {\n\t\t\t    \n\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\n\t\t\t\tvar usingURIs = false;\n\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!usingURIs) {\n\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (connectOptions.hosts.length != connectOptions.ports.length)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\n\t\t\t\t\tconnectOptions.uris = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") != -1);\n\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tclient.connect(connectOptions);\n\t\t};\n\t \n\t\t/** \n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t * \n\t\t * @name Paho.MQTT.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maiximum qos of any publications sent \n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback \n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.       \n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.       \n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.      \n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.         \n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\tvalidate(subscribeOptions,  {qos:\"number\", \n\t\t\t\t\t\t\t\t\t\t invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t\t onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t\t onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" \n\t\t\t\t&& !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t * \n\t\t * @name Paho.MQTT.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback \n\t\t                                      or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the \n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.     \n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.       \n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.      \n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t   timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t  });\n\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t * \n\t\t * @name Paho.MQTT.Client#send\n\t\t * @function \n\t\t * @param {string|Paho.MQTT.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent. \n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.MQTT.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent. \n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.     \n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered \n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \n\t\t *                     A received message has the retained boolean set to true if the message was published \n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published. \n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */   \n\t\tthis.send = function (topic,payload,qos,retained) {   \n\t\t\tvar message ;  \n\t\t\t\n\t\t\tif(arguments.length == 0){\n\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\tmessage = topic;\n\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\tclient.send(message); \n\n\t\t\t}else {\n\t\t\t\t//parameter checking in Message object \n\t\t\t\tmessage = new Message(payload);\n\t\t\t\tmessage.destinationName = topic;\n\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\tmessage.qos = qos;\n\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\tmessage.retained = retained;\n\t\t\t\tclient.send(message); \n\t\t\t}\n\t\t};\n\t\t\n\t\t/** \n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t * \n\t\t * @name Paho.MQTT.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.     \n\t\t */\n\t\tthis.disconnect = function () {\n\t\t\tclient.disconnect();\n\t\t};\n\t\t\n\t\t/** \n\t\t * Get the contents of the trace log.\n\t\t * \n\t\t * @name Paho.MQTT.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\tthis.getTraceLog = function () {\n\t\t\treturn client.getTraceLog();\n\t\t}\n\t\t\n\t\t/** \n\t\t * Start tracing.\n\t\t * \n\t\t * @name Paho.MQTT.Client#startTrace\n\t\t * @function\n\t\t */\n\t\tthis.startTrace = function () {\n\t\t\tclient.startTrace();\n\t\t};\n\t\t\n\t\t/** \n\t\t * Stop tracing.\n\t\t * \n\t\t * @name Paho.MQTT.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\tthis.stopTrace = function () {\n\t\t\tclient.stopTrace();\n\t\t};\n\n\t\tthis.isConnected = function() {\n\t\t\treturn client.connected;\n\t\t};\n\t};\n\n\tClient.prototype = {\n\t\tget host() { return this._getHost(); },\n\t\tset host(newHost) { this._setHost(newHost); },\n\t\t\t\n\t\tget port() { return this._getPort(); },\n\t\tset port(newPort) { this._setPort(newPort); },\n\n\t\tget path() { return this._getPath(); },\n\t\tset path(newPath) { this._setPath(newPath); },\n\t\t\t\n\t\tget clientId() { return this._getClientId(); },\n\t\tset clientId(newClientId) { this._setClientId(newClientId); },\n\n\t\tget onConnectionLost() { return this._getOnConnectionLost(); },\n\t\tset onConnectionLost(newOnConnectionLost) { this._setOnConnectionLost(newOnConnectionLost); },\n\n\t\tget onMessageDelivered() { return this._getOnMessageDelivered(); },\n\t\tset onMessageDelivered(newOnMessageDelivered) { this._setOnMessageDelivered(newOnMessageDelivered); },\n\t\t\n\t\tget onMessageArrived() { return this._getOnMessageArrived(); },\n\t\tset onMessageArrived(newOnMessageArrived) { this._setOnMessageArrived(newOnMessageArrived); },\n\n\t\tget trace() { return this._getTrace(); },\n\t\tset trace(newTraceFunction) { this._setTrace(newTraceFunction); }\t\n\n\t};\n\t\n\t/** \n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t * \n\t * @name Paho.MQTT.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.     \n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered \n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \n\t *                     A received message has the retained boolean set to true if the message was published \n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published. \n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received. \n\t *                     This is only set on messages received from the server.\n\t *                     \n\t */\n\tvar Message = function (newPayload) {  \n\t\tvar payload;\n\t\tif (   typeof newPayload === \"string\" \n\t\t\t|| newPayload instanceof ArrayBuffer\n\t\t\t|| newPayload instanceof Int8Array\n\t\t\t|| newPayload instanceof Uint8Array\n\t\t\t|| newPayload instanceof Int16Array\n\t\t\t|| newPayload instanceof Uint16Array\n\t\t\t|| newPayload instanceof Int32Array\n\t\t\t|| newPayload instanceof Uint32Array\n\t\t\t|| newPayload instanceof Float32Array\n\t\t\t|| newPayload instanceof Float64Array\n\t\t   ) {\n\t\t\tpayload = newPayload;\n\t\t} else {\n\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t}\n\n\t\tthis._getPayloadString = function () {\n\t\t\tif (typeof payload === \"string\")\n\t\t\t\treturn payload;\n\t\t\telse\n\t\t\t\treturn parseUTF8(payload, 0, payload.length); \n\t\t};\n\n\t\tthis._getPayloadBytes = function() {\n\t\t\tif (typeof payload === \"string\") {\n\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\tvar byteStream = new Uint8Array(buffer); \n\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\treturn byteStream;\n\t\t\t} else {\n\t\t\t\treturn payload;\n\t\t\t};\n\t\t};\n\n\t\tvar destinationName = undefined;\n\t\tthis._getDestinationName = function() { return destinationName; };\n\t\tthis._setDestinationName = function(newDestinationName) { \n\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\tdestinationName = newDestinationName;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t};\n\t\t\t\t\n\t\tvar qos = 0;\n\t\tthis._getQos = function() { return qos; };\n\t\tthis._setQos = function(newQos) { \n\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\tqos = newQos;\n\t\t\telse \n\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t};\n\n\t\tvar retained = false;\n\t\tthis._getRetained = function() { return retained; };\n\t\tthis._setRetained = function(newRetained) { \n\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\tretained = newRetained;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t};\n\t\t\n\t\tvar duplicate = false;\n\t\tthis._getDuplicate = function() { return duplicate; };\n\t\tthis._setDuplicate = function(newDuplicate) { duplicate = newDuplicate; };\n\t};\n\t\n\tMessage.prototype = {\n\t\tget payloadString() { return this._getPayloadString(); },\n\t\tget payloadBytes() { return this._getPayloadBytes(); },\n\t\t\n\t\tget destinationName() { return this._getDestinationName(); },\n\t\tset destinationName(newDestinationName) { this._setDestinationName(newDestinationName); },\n\t\t\n\t\tget qos() { return this._getQos(); },\n\t\tset qos(newQos) { this._setQos(newQos); },\n\n\t\tget retained() { return this._getRetained(); },\n\t\tset retained(newRetained) { this._setRetained(newRetained); },\n\n\t\tget duplicate() { return this._getDuplicate(); },\n\t\tset duplicate(newDuplicate) { this._setDuplicate(newDuplicate); }\n\t};\n\t   \n\t// Module contents.\n\treturn {\n\t\tClient: Client,\n\t\tMessage: Message\n\t};\n})(window);\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.navigation', [])\n        .config(config);\n\n    /** @ngInject */\n    function config()\n    {\n        \n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.navigation')\n        .controller('NavigationController', NavigationController);\n\n    /** @ngInject */\n    function NavigationController($scope,$window,$timeout)\n    {\n        var vm = this;\n\n        // Data\n        vm.bodyEl = angular.element('body');\n        vm.folded = false;\n        vm.msScrollOptions = {\n            suppressScrollX: true\n        };\n\n        // Methods\n        vm.toggleMsNavigationFolded = toggleMsNavigationFolded;\n\n        //////////\n\n        /**\n         * Toggle folded status\n         */\n        function toggleMsNavigationFolded()\n        {\n            vm.folded = !vm.folded;\n            $timeout(function() {\n                $window.dispatchEvent(new Event(\"resize\"));\n            }, 200);\n\n        }\n\n        // Close the mobile menu on $stateChangeSuccess\n        $scope.$on('$stateChangeSuccess', function ()\n        {\n            vm.bodyEl.removeClass('ms-navigation-horizontal-mobile-menu-active');\n        });\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('fuse')\n        .controller('MainController', MainController);\n\n    /** @ngInject */\n    function MainController($scope, $rootScope)\n    {\n        // Data\n\n        //////////\n\n        // Remove the splash screen\n        $scope.$on('$viewContentAnimationEnded', function (event)\n        {\n            if ( event.targetScope.$id === $scope.$id )\n            {\n                $rootScope.$broadcast('msSplashScreen::remove');\n            }\n        });\n    }\n})();\n(function() {\n\t'use strict';\n\n\n\tangular\n\t\t.module('fuse')\n\t\t.filter('parseUnits', parseUnits)\n\n\tfunction parseUnits() {\n\t\treturn function(input, units, onlySymbol) {\n\t\t\tif (!input)\n\t\t\t\treturn input;\n\n\t\t\tfor (var i = 0; i < units.length; i++) {\n\t\t\t\tif (units[i].id === input) {\n\t\t\t\t\tif (onlySymbol)\n\t\t\t\t\t\treturn units[i].symbol;\n\t\t\t\t\treturn units[i].name?units[i].name:units[i].id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (onlySymbol)\n\t\t\t\treturn '';\n\n\t\t\treturn input;\n\n\t\t}\n\t}\n\n\n})();\n(function() {\n\t'use strict';\n\n\n\tangular\n\t\t.module('fuse')\n\t\t.filter('limitObjectTo', limitObjectTo)\n\n\tfunction limitObjectTo() {\n\t\treturn function(obj, limit) {\n\t\t\tif(!obj)\n\t\t\t\treturn[];\n\n\t\t\tvar keys = Object.keys(obj);\n\t\t\tif (keys.length < 1) \n\t\t\t\treturn [];\n\t\t\t\n\n\t\t\tvar ret = new Object,\n\t\t\t\tcount = 0;\n\t\t\tangular.forEach(keys, function(key, arrayIndex) {\n\t\t\t\tif (count >= limit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tret[key] = obj[key];\n\t\t\t\tcount++;\n\t\t\t});\n\t\t\treturn ret;\n\t\t};\n\t}\n\n\n})();\n(function() {\n\t'use strict';\n\n\n\tangular\n\t\t.module('fuse')\n\t\t.filter('colorState', colorState)\n\n\tfunction colorState(moment,_) {\n\n\t\treturn function(input, hasAlert) {\n\t\t\tvar RESET_TIME = 3600;\n\t\t\tvar now = moment();\n\t\t\tvar eventTime = moment(input);\n\t\t\tif (_.isNull(input))\n\t\t\t\treturn 'gris';\n\n\t\t\t\n\t\t\tif(now.diff(eventTime, 'seconds') < RESET_TIME){\n\t\t\t\treturn hasAlert?'rojo':'verde';\n\t\t\t}else{\n\t\t\t\treturn 'gris';\n\t\t\t}\n\n\t\t}\n\t}\n\n\n})();\n(function() {\n\t'use strict';\n\n\n\tangular\n\t\t.module('fuse')\n\t\t.filter('capitalize', capitalize)\n\n\tfunction capitalize() {\n\t\treturn function(input) {\n\t\t\treturn (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';\n\t\t}\n\t}\n\n\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('fuse')\n    .directive('serverValidation', serverValidation);\n\n  function serverValidation() {\n    return {\n      restrict: \"A\",\n      require: \"ngModel\",\n      scope: {\n        ngModel: \"=\",\n        serverValidation: \"=\" // String or array of strings with name of errors\n      },\n\n      link: function(scope, elem, attr, ngModelCtrl) {\n        function setValidity(errorName) {\n          ngModelCtrl.$setValidity(errorName, true);\n        }\n        if (typeof(scope.serverValidation) == \"string\") {\n          scope.arrServerValidation = [scope.serverValidation];\n        } else {\n          scope.arrServerValidation = scope.serverValidation;\n        }\n        var firstError = scope.arrServerValidation[0];\n        scope.$watch('ngModel', function() {\n          // workaround to don't update $setValidity, then changed value of ngModel\n          // update $setValidity, only when server-error is true\n          if (firstError && ngModelCtrl.$error[firstError])\n            angular.forEach(scope.arrServerValidation, setValidity);\n        });\n      },\n    }\n  }\n  \n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .run(runBlock);\n\n    /** @ngInject */\n    function runBlock(msUtils, fuseGenerator, fuseConfig)\n    {\n        /**\n         * Generate extra classes based on registered themes so we\n         * can use same colors with non-angular-material elements\n         */\n        fuseGenerator.generate();\n\n        /**\n         * Disable md-ink-ripple effects on mobile\n         * if 'disableMdInkRippleOnMobile' config enabled\n         */\n        if ( fuseConfig.getConfig('disableMdInkRippleOnMobile') && msUtils.isMobile() )\n        {\n            var bodyEl = angular.element('body');\n            bodyEl.attr('md-no-ink', true);\n        }\n\n        /**\n         * Put isMobile() to the html as a class\n         */\n        if ( msUtils.isMobile() )\n        {\n            angular.element('html').addClass('is-mobile');\n        }\n\n        /**\n         * Put browser information to the html as a class\n         */\n        var browserInfo = msUtils.detectBrowser();\n        if ( browserInfo )\n        {\n            var htmlClass = browserInfo.browser + ' ' + browserInfo.version + ' ' + browserInfo.os;\n            angular.element('html').addClass(htmlClass);\n        }\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.core')\n        .config(config);\n\n    /** @ngInject */\n    function config($ariaProvider, $logProvider, msScrollConfigProvider, fuseConfigProvider)\n    {\n        // Enable debug logging\n        $logProvider.debugEnabled(true);\n\n        /*eslint-disable */\n\n        // ng-aria configuration\n        $ariaProvider.config({\n            tabindex: false\n        });\n\n        // Fuse theme configurations\n        fuseConfigProvider.config({\n            'disableCustomScrollbars'        : false,\n            'disableCustomScrollbarsOnMobile': true,\n            'disableMdInkRippleOnMobile'     : true\n        });\n\n        // msScroll configuration\n        msScrollConfigProvider.config({\n            wheelPropagation: true\n        });\n\n        /*eslint-enable */\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('fuse')\n        .run(runBlock);\n\n    /** @ngInject */\n    function runBlock($rootScope, $timeout, $state,$location,amMoment,authService,MQTTUtils)\n    {\n\n\n        //Change locate moment \n        amMoment.changeLocale('es');\n\n        //Activete MQTT client\n        MQTTUtils.connectClient();\n\n        // Activate loading indicator\n        var stateChangeStartEvent = $rootScope.$on('$stateChangeStart', function ()\n        {\n            $rootScope.loadingProgress = true;\n        });\n\n        // De-activate loading indicator\n        var stateChangeSuccessEvent = $rootScope.$on('$stateChangeSuccess', function ()\n        {\n            $timeout(function ()\n            {\n                $rootScope.loadingProgress = false;\n            });\n        });\n\n        // Store state in the root scope for easy access\n        $rootScope.state = $state;\n\n        // Cleanup\n        $rootScope.$on('$destroy', function ()\n        {\n            stateChangeStartEvent();\n            stateChangeSuccessEvent();\n        });\n\n\n        var restrictedPage = $.inArray($location.path(), ['/','/register','/reset']) === -1;\n        $rootScope.$on('$locationChangeStart', function (event, next, current) {\n            if (restrictedPage && !authService.isAuthenticated()) {\n                $location.path('/');\n            } \n            if ($location.path()=='/' && authService.isAuthenticated()) {\n                $location.path('/home');\n            }            \n        });\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('fuse')\n        .config(routeConfig);\n\n    /** @ngInject */\n    function routeConfig($stateProvider, $urlRouterProvider, $locationProvider)\n    {\n    \n      $locationProvider.html5Mode(true);\n\n      $urlRouterProvider.otherwise(function($injector, $location) {\n          var $state = $injector.get(\"$state\");\n          $state.go('app.pages.home');\n        });\n\n       \n\n        // State definitions\n        $stateProvider\n            .state('app', {\n                abstract: true,\n                views   : {\n                    'main@'         : {\n                        templateUrl: 'app/core/layouts/vertical-navigation.html',\n                        controller : 'MainController as vm'\n                    },\n                    'toolbar@app'   : {\n                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',\n                        controller : 'ToolbarController as vm'\n                    },\n                    'navigation@app': {\n                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',\n                        controller : 'NavigationController as vm'\n                    }\n                }\n            });\n\n        \n    }\n\n})();\n\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('fuse')\n        .controller('IndexController', IndexController);\n\n    /** @ngInject */\n    function IndexController()\n    {\n        var vm = this;\n        //////////\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('fuse')\n        .constant('MQTT',Paho.MQTT)\n        .constant('_',_)\n        .constant('alasql',alasql)\n        .constant('WSBROKER','w6ucey.messaging.internetofthings.ibmcloud.com')\n        .constant('WSPORT',443)\n        .constant('USERNAME','a-w6ucey-jxx81mg36k')\n        .constant('PASSWORD','91iCgtNf0H3LbVkZ)4')\n        .constant('ORG','w6ucey')\n        .constant('API_KEY','AIzaSyASEjO-aBsHytgEETgtWdJpy9Ec7gSEyLs')\n               .constant('UNITS', [{\n        \"id\": \"CO\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"CO2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"O2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"CH4\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"O3\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"NH3\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"NO2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"LPG\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"AP1\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"AP2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SV\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"VOC\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"NO\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"CL2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"ETO\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"H2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"H2S\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"HCL\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"HCN\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"PH3\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SO2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"NOISE\",\n        \"weight\": 2,\n        \"type\": \"float\",\n        \"name\": \"Ruido\",\n        \"symbol\": \"dBA\"\n      }, {\n        \"id\": \"GP_A\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"GP_B\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"GP_C\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"GP_F\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"WF\",\n        \"type\": \"float\",\n        \"symbol\": \"l/min\"\n      }, {\n        \"id\": \"PIR\",\n        \"type\": \"uint_8\",\n        \"name\": \"Presencia detectada\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"LP\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"LL\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"HALL\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"RIN\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"ROUT\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"EV_A\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"EV_C\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"EV_D\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"EV_E\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"Open/Closed\"\n      }, {\n        \"id\": \"BAT\",\n        \"type\": \"uint_8\",\n        \"name\": \"Batería\",\n        \"weight\": 9999,\n        \"symbol\": \"%\"\n      }, {\n        \"id\": \"GPS\",\n        \"type\": \"float\",\n        \"symbol\": \"degrees\"\n      }, {\n        \"id\": \"RSSI\",\n        \"type\": \"int\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"MAC\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"NA\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"NID\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"DATE\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"TIME\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"GMT\",\n        \"type\": \"int\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"RAM\",\n        \"type\": \"int\",\n        \"symbol\": \"bytes\"\n      }, {\n        \"id\": \"IN_TEMP\",\n        \"type\": \"float\",\n        \"symbol\": \"ºC\"\n      }, {\n        \"id\": \"ACC\",\n        \"type\": \"int\",\n        \"name\": \"Acelerómetros\",\n        \"symbol\": \"mg\"\n      }, {\n        \"id\": \"ACCX\",\n        \"type\": \"int\",\n        \"name\": \"Acelerómetro eje X\",\n        \"symbol\": \"mg\"\n      }, {\n        \"id\": \"ACCY\",\n        \"type\": \"int\",\n        \"name\": \"Acelerómetro eje Y\",\n        \"symbol\": \"mg\"\n      }, {\n        \"id\": \"ACCZ\",\n        \"type\": \"int\",\n        \"name\": \"Acelerómetro eje Z\",\n        \"symbol\": \"mg\"\n      }, {\n        \"id\": \"MILLIS\",\n        \"type\": \"ulong\",\n        \"symbol\": \"ms\"\n      }, {\n        \"id\": \"STR\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"MBT\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"MWIFI\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"UID\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"RB\",\n        \"type\": \"string\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"PM1\",\n        \"type\": \"float\",\n        \"symbol\": \"μg/m3\"\n      }, {\n        \"id\": \"PM2_5\",\n        \"type\": \"float\",\n        \"symbol\": \"μg/m3\"\n      }, {\n        \"id\": \"PM10\",\n        \"type\": \"float\",\n        \"symbol\": \"μg/m3\"\n      }, {\n        \"id\": \"PART\",\n        \"type\": \"ulong\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"TC\",\n        \"type\": \"float\",\n        \"weight\": 2,\n        \"name\": \"Temperatura externa\",\n        \"symbol\": \"ºC\"\n      }, {\n        \"id\": \"TF\",\n        \"type\": \"float\",\n        \"symbol\": \"ºF\"\n      }, {\n        \"id\": \"HUM\",\n        \"type\": \"float\",\n        \"name\": \"Humedad\",\n        \"symbol\": \"%RH\"\n      }, {\n        \"id\": \"PRES\",\n        \"type\": \"float\",\n        \"name\": \"Presión\",\n        \"symbol\": \"%RH\"\n      }, {\n        \"id\": \"LUX2\",\n        \"type\": \"ulong\",\n        \"symbol\": \"luxes\"\n      }, {\n        \"id\": \"US\",\n        \"type\": \"int\",\n        \"symbol\": \"cm\"\n      }, {\n        \"id\": \"SPEED_OG\",\n        \"type\": \"float\",\n        \"symbol\": \"km/h\"\n      }, {\n        \"id\": \"COURSE_OG\",\n        \"type\": \"float\",\n        \"symbol\": \"degrees\"\n      }, {\n        \"id\": \"ALT\",\n        \"type\": \"float\",\n        \"symbol\": \"m\"\n      }, {\n        \"id\": \"HDOP\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"VDOP\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"PDOP\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"SWICA\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIFL\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIFB\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWINO3\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIBR\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWICL\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWICU\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIIO\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWINH4\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIAG\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIPH\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWILI\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIMG\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWINO2\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWICLO4\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWIK\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWINA\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWI_A\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWI_B\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWI_C\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"SWI_D\",\n        \"type\": \"float\",\n        \"symbol\": \"ppm\"\n      }, {\n        \"id\": \"TST\",\n        \"type\": \"ulong\",\n        \"symbol\": \"s\"\n      }, {\n        \"id\": \"VAPI\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"VPROG\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"VBOOT\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"PS\",\n        \"type\": \"uint_8\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"RAD\",\n        \"type\": \"float\",\n        \"symbol\": \"uSv/h\"\n      }, {\n        \"id\": \"PH\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"ORP\",\n        \"type\": \"float\",\n        \"symbol\": \"voltage\"\n      }, {\n        \"id\": \"DO\",\n        \"type\": \"float\",\n        \"symbol\": \"%\"\n      }, {\n        \"id\": \"COND\",\n        \"type\": \"float\",\n        \"symbol\": \"uS/cm\"\n      }, {\n        \"id\": \"WT\",\n        \"type\": \"float\",\n        \"symbol\": \"ºC\"\n      }, {\n        \"id\": \"TURB\",\n        \"type\": \"float\",\n        \"symbol\": \"NTU\"\n      }, {\n        \"id\": \"PH_A\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"PH_D\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"ORP_A\",\n        \"type\": \"float\",\n        \"symbol\": \"voltage\"\n      }, {\n        \"id\": \"ORP_D\",\n        \"type\": \"float\",\n        \"symbol\": \"voltage\"\n      }, {\n        \"id\": \"SOIL1\",\n        \"type\": \"float\",\n        \"symbol\": \"Frequency\"\n      }, {\n        \"id\": \"SOIL2\",\n        \"type\": \"float\",\n        \"symbol\": \"Frequency\"\n      }, {\n        \"id\": \"SOIL3\",\n        \"type\": \"float\",\n        \"symbol\": \"Frequency\"\n      }, {\n        \"id\": \"SOILTC\",\n        \"type\": \"float\",\n        \"symbol\": \"ºC\"\n      }, {\n        \"id\": \"SOILTF\",\n        \"type\": \"float\",\n        \"symbol\": \"ºC\"\n      }, {\n        \"id\": \"LW\",\n        \"type\": \"float\",\n        \"name\": \"Humedad foliar\",\n        \"symbol\": \"%\"\n      }, {\n        \"id\": \"ANE\",\n        \"type\": \"float\",\n        \"symbol\": \"km/h\"\n      }, {\n        \"id\": \"WV\",\n        \"type\": \"uint_8\",\n        \"name\": \"Velocidad de viento\",\n        \"symbol\": \"Direction\"\n      }, {\n        \"id\": \"PLV1\",\n        \"type\": \"float\",\n        \"name\": \"Pluviometro\",\n        \"symbol\": \"mm\"\n      }, {\n        \"id\": \"PLV2\",\n        \"type\": \"float\",\n        \"symbol\": \"mm/h\"\n      }, {\n        \"id\": \"PLV3\",\n        \"type\": \"float\",\n        \"symbol\": \"mm/day\"\n      }, {\n        \"id\": \"PAR\",\n        \"type\": \"float\",\n        \"symbol\": \"μmol*m-2*s-1\"\n      }, {\n        \"id\": \"UV\",\n        \"type\": \"float\",\n        \"symbol\": \"μmol*m-2*s-1\"\n      }, {\n        \"id\": \"TD\",\n        \"type\": \"float\",\n        \"symbol\": \"mm\"\n      }, {\n        \"id\": \"SD\",\n        \"type\": \"float\",\n        \"symbol\": \"mm\"\n      }, {\n        \"id\": \"FD\",\n        \"type\": \"float\",\n        \"symbol\": \"mm\"\n      }, {\n        \"id\": \"SOIL_B\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"SOIL_C\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"SOIL_E\",\n        \"type\": \"float\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"TCB\",\n        \"type\": \"float\",\n        \"symbol\": \"ºC\"\n      }, {\n        \"id\": \"HUMB\",\n        \"type\": \"float\",\n        \"symbol\": \"%RH\"\n      }, {\n        \"id\": \"LUM\",\n        \"type\": \"float\",\n        \"symbol\": \"Ohms\"\n      }, {\n        \"id\": \"COUNT\",\n        \"type\": \"int\",\n        \"name\": \"Contador\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"TAKEN\",\n        \"weight\": 9999999999,\n        \"type\": \"uint_8\",\n        \"name\": \"Estado\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"GPS_LAT\",\n        \"type\": \"float\",\n        \"name\": \"Latitud\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"GPS_LONG\",\n        \"type\": \"float\",\n        \"name\": \"Longitud\",\n        \"symbol\": \"\"\n      }, {\n        \"id\": \"CF\",\n        \"name\": \"Humedad foliar\",\n        \"symbol\": ''\n      }, {\n        \"id\": \"WP\",\n        \"type\": \"float\",\n        \"name\": \"Pluviometro\",\n        \"symbol\": \"mm\"\n      }, {\n        \"id\": \"CB\",\n        \"type\": \"float\",\n        \"name\": \"Presión\",\n        \"symbol\": \"%RH\"\n      }, {\n        \"id\": \"WA\",\n        \"type\": \"uint_8\",\n        \"name\": \"Velocidad de viento\",\n        \"symbol\": \"\"\n      }])\n        //.constant('BASEURL', 'http://iot.haibusmart.com/api/v2');\n        .constant('BASEURL','http://184.172.234.206:30437/api/v2');\n        //.constant('BASEURL', 'http://localhost:3000/api/v2');\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('fuse')\n        .config(config);\n\n    /** @ngInject */\n    function config($logProvider, uiGmapGoogleMapApiProvider, $translateProvider, LoopBackResourceProvider, BASEURL, API_KEY,$httpProvider,toastrConfig) {\n\n        //URL where to access the LoopBack REST API server\n        LoopBackResourceProvider.setUrlBase(BASEURL)\n        \n         $httpProvider.interceptors.push(function($q, $location, LoopBackAuth) {\n          return {\n            responseError: function(rejection) {\n              if (rejection.status == 401) {\n                //Now clearing the loopback values from client browser for safe logout...\n                LoopBackAuth.clearUser();\n                LoopBackAuth.clearStorage();\n                $location.nextAfterLogin = $location.path();\n                $location.path('/');\n              }\n              return $q.reject(rejection);\n            }\n          };\n        });\n\n        \n\n\n        $logProvider.debugEnabled(true);\n\n        //Common app configurations here\n        // uiGmapgoogle-maps configuration\n        uiGmapGoogleMapApiProvider.configure({\n            key: API_KEY,\n            v: '3.exp',\n            libraries: 'places,weather,geometry,visualization'\n        });\n\n\n        // angular-translate configuration\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: '{part}/i18n/{lang}.json'\n        });\n        $translateProvider.preferredLanguage('es');\n        $translateProvider.useSanitizeValueStrategy('sanitize');\n\n        \n        angular.extend(toastrConfig, {\n        autoDismiss: false,\n        containerId: 'toast-container',\n        maxOpened: 10,   \n        timeOut: 0,\n        extendedTimeOut: 0,\n        closeButton: true,\n        tapToDismiss: false,\n        newestOnTop: true,\n        positionClass: 'toast-top-right',\n        preventDuplicates: false,\n        preventOpenDuplicates: false,\n        target: 'body'\n      });\n\n\n    }\n\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.pages', [\n        \t'app.pages.home'\n            ,'app.pages.profile'\n        \t,'app.pages.help'\n        \t,'app.pages.alerts'\n        \t,'app.pages.reports'\n        \t,'app.pages.rules'\n        \t,'app.pages.nodes'\n\n\n        ])\n        .config(config);\n\n    /** @ngInject */\n    function config($stateProvider, msNavigationServiceProvider)\n    {\n    \t\n    \t $stateProvider\n            .state('app.pages', {\n            \tabstract: true,\n                url: '/dasboard',\n                resolve: {\n                    Devices: function(managerDeviceService, MQTTUtils) {\n                        return managerDeviceService.getDevices().then(function(response) {\n                                MQTTUtils.onStartWatchDevices(response);\n                            return response;\n                        });\n                    }\n                    ,\n                    Rules: function(managerDeviceService) {\n                        return managerDeviceService.getRules();\n                    },\n                    Alerts: function(managerDeviceService,_) {\n                        return managerDeviceService.getAlerts().then(function(response) {\n                            for (var i = 0; i < response.length; i++) {\n                                response[i].timestamp= (new Date(response[i].timestamp)).getTime();\n                            };\n\n                            return response;\n                        });\n                    }\n                }\n            });\n    }\n})();\n(function ()\n{\n    'use strict';\n\n    angular\n        .module('app.auth', [\n            'app.auth.login',\n            'app.auth.reset',\n            'app.auth.register'\n\n        ])\n        .config(config);\n\n    /** @ngInject */\n    function config(msNavigationServiceProvider)\n    {\n\n    }\n})();\nangular.module(\"fuse\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/toolbar/addNode.html\",\"<md-dialog class=\\\"node-dialog\\\" aria-label=\\\"Seguir Nodo\\\"><form name=\\\"deviceForm\\\" class=\\\"md-inline-form\\\" novalidate>\\n<md-toolbar class=\\\"md-accent\\\" layout=\\\"column\\\"><div class=\\\"md-toolbar-tools\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between center\\\"><span class=\\\"title\\\">Seguir Nodo</span><md-button class=\\\"md-icon-button\\\" \\nng-click=\\\"vm.cancel()\\\" aria-label=\\\"Close dialog\\\"><md-icon md-font-icon=\\\"icon-close\\\"></md-icon></md-button></div>\\n</md-toolbar><md-dialog-content ms-scroll><md-input-container class=\\\"md-block\\\"><input type=\\\"text\\\" name=\\\"name\\\" \\nng-model=\\\"vm.deviceForm.name\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\s]{1,36}$/\\\" maxlength=\\\"36\\\" placeholder=\\\"Nombre del nodo\\\" \\nrequired><div ng-messages=\\\"deviceForm.name.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nDebe especificar el nombre para su nodo.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nEl nombre del nodo no puede tener mas de 36 caracteres.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\"><input type=\\\"text\\\" name=\\\"deviceId\\\" ng-model=\\\"vm.deviceForm.deviceId\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"36\\\" placeholder=\\\"Id del nodo\\\" server-validation=\\\"[\\'not_found\\']\\\" \\nrequired><div ng-messages=\\\"deviceForm.deviceId.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nDebe especificar la Id del nodo.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nLa Id del nodo no puede tener mas de 36 caracteres.</span></div><div ng-message=\\\"not_found\\\"><span>\\nNo se ha encontrado el nodo especificado.</span></div></div></md-input-container><md-input-container class=\\\"md-block\\\">\\n<label>Tipo de nodo</label><input name=\\\"typeId\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\s]{1,8}$/\\\" maxlength=\\\"8\\\" minlength=\\\"8\\\" \\nplaceholder=\\\"Tipo de nodo\\\" ng-model=\\\"vm.deviceForm.typeId\\\" required><div ng-messages=\\\"deviceForm.typeId.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El tipo de nodo es requerido.</span></div><div ng-message=\\\"minlength\\\">\\n<span>El tipo de nodo no puede tener menos de 8 caracteres.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nEl tipo de nodo no puede tener más de 8 caracteres.</span></div></div></md-input-container></md-dialog-content>\\n<md-dialog-actions layout=\\\"row\\\" layout-align=\\\"space-between center\\\"><div layout=\\\"row\\\" layout-align=\\\"start center\\\">\\n<md-button type=\\\"submit\\\" ng-click=\\\"vm.add()\\\" class=\\\"send-button md-accent md-raised\\\" \\nng-disabled=\\\"deviceForm.$invalid || deviceForm.$pristine\\\">Agregar</md-button></div></md-dialog-actions></form>\\n</md-dialog>\");\n$templateCache.put(\"app/core/layouts/content-only.html\",\"<div id=\\\"layout-content-only\\\" class=\\\"template-layout\\\" layout=\\\"column\\\" flex><md-content id=\\\"content\\\" \\nclass=\\\"animate-slide-up md-hue-2\\\" ui-view=\\\"content\\\" flex></md-content></div>\");\n$templateCache.put(\"app/core/layouts/content-with-toolbar.html\",\"<div id=\\\"layout-content-with-toolbar\\\" class=\\\"template-layout\\\" layout=\\\"column\\\" flex><md-toolbar id=\\\"toolbar\\\" \\nclass=\\\"md-menu-toolbar md-whiteframe-1dp\\\" ui-view=\\\"toolbar\\\"></md-toolbar><md-content id=\\\"content\\\" \\nclass=\\\"animate-slide-up md-hue-2\\\" ui-view=\\\"content\\\" flex></md-content><md-sidenav id=\\\"quick-panel\\\" \\nclass=\\\"md-sidenav-right md-whiteframe-4dp\\\" md-component-id=\\\"quick-panel\\\" ms-scroll ui-view=\\\"quickPanel\\\"></md-sidenav>\\n</div>\");\n$templateCache.put(\"app/core/layouts/horizontal-navigation.html\",\"<div id=\\\"layout-horizontal-navigation\\\" class=\\\"template-layout\\\" layout=\\\"column\\\" flex><div \\nid=\\\"toolbar-navigation-container\\\" class=\\\"md-whiteframe-1dp\\\" layout=\\\"column\\\" layout-align=\\\"space-between start\\\">\\n<md-toolbar id=\\\"toolbar\\\" class=\\\"md-menu-toolbar md-whiteframe-1dp\\\" ui-view=\\\"toolbar\\\"></md-toolbar><div \\nid=\\\"horizontal-navigation\\\" ui-view=\\\"navigation\\\" layout=\\\"row\\\" layout-align=\\\"start end\\\" flex></div></div><div \\nid=\\\"content-container\\\" flex layout=\\\"column\\\"><md-content id=\\\"content\\\" class=\\\"animate-slide-up md-hue-2\\\" ms-scroll \\nui-view=\\\"content\\\" flex></md-content></div><md-sidenav id=\\\"quick-panel\\\" class=\\\"md-sidenav-right md-whiteframe-4dp\\\" \\nmd-component-id=\\\"quick-panel\\\" ms-scroll ui-view=\\\"quickPanel\\\"></md-sidenav></div>\");\n$templateCache.put(\"app/core/layouts/vertical-navigation-fullwidth-toolbar-2.html\",\"<div id=\\\"layout-vertical-navigation-fullwidth-toolbar-2\\\" class=\\\"template-layout\\\" layout=\\\"column\\\" flex><md-toolbar \\nid=\\\"toolbar\\\" class=\\\"md-menu-toolbar md-whiteframe-1dp md-accent\\\" ui-view=\\\"toolbar\\\"></md-toolbar><div \\nid=\\\"main-container\\\" layout=\\\"row\\\" flex><md-sidenav id=\\\"vertical-navigation\\\" class=\\\"md-primary-bg\\\" \\nmd-is-locked-open=\\\"$mdMedia(\\'gt-sm\\')\\\" md-component-id=\\\"navigation\\\" ms-scroll ui-view=\\\"navigation\\\"></md-sidenav><div \\nid=\\\"content-container\\\" flex layout=\\\"column\\\"><md-content id=\\\"content\\\" class=\\\"animate-slide-up md-hue-2\\\" ms-scroll \\nui-view=\\\"content\\\" flex></md-content></div><md-sidenav id=\\\"quick-panel\\\" class=\\\"md-sidenav-right md-whiteframe-4dp\\\" \\nmd-component-id=\\\"quick-panel\\\" ms-scroll ui-view=\\\"quickPanel\\\"></md-sidenav></div></div>\");\n$templateCache.put(\"app/core/layouts/vertical-navigation-fullwidth-toolbar.html\",\"<div id=\\\"layout-vertical-navigation-fullwidth-toolbar\\\" class=\\\"template-layout\\\" layout=\\\"column\\\" flex><md-toolbar \\nid=\\\"toolbar\\\" class=\\\"md-menu-toolbar md-whiteframe-1dp md-accent\\\" ui-view=\\\"toolbar\\\"></md-toolbar><div \\nid=\\\"main-container\\\" layout=\\\"row\\\" flex><md-sidenav id=\\\"vertical-navigation\\\" class=\\\"md-primary-bg\\\" \\nmd-is-locked-open=\\\"$mdMedia(\\'gt-sm\\')\\\" md-component-id=\\\"navigation\\\" ms-scroll ui-view=\\\"navigation\\\"></md-sidenav><div \\nid=\\\"content-container\\\" flex layout=\\\"column\\\"><md-content id=\\\"content\\\" class=\\\"animate-slide-up md-hue-2\\\" ms-scroll \\nui-view=\\\"content\\\" flex></md-content></div><md-sidenav id=\\\"quick-panel\\\" class=\\\"md-sidenav-right md-whiteframe-4dp\\\" \\nmd-component-id=\\\"quick-panel\\\" ms-scroll ui-view=\\\"quickPanel\\\"></md-sidenav></div></div>\");\n$templateCache.put(\"app/core/layouts/vertical-navigation.html\",\"<div id=\\\"layout-vertical-navigation\\\" class=\\\"template-layout\\\" layout=\\\"row\\\" flex><md-sidenav id=\\\"vertical-navigation\\\" \\nclass=\\\"md-accent-bg md-hue-2\\\" md-is-locked-open=\\\"$mdMedia(\\'gt-sm\\')\\\" md-component-id=\\\"navigation\\\" ms-scroll \\nui-view=\\\"navigation\\\"></md-sidenav><div id=\\\"content-container\\\" flex layout=\\\"column\\\"><md-toolbar id=\\\"toolbar\\\" \\nclass=\\\"md-menu-toolbar md-whiteframe-1dp\\\" ui-view=\\\"toolbar\\\"></md-toolbar><md-content id=\\\"content\\\" \\nclass=\\\"animate-slide-up md-hue-2\\\" ms-scroll ui-view=\\\"content\\\" flex></md-content></div><md-sidenav id=\\\"quick-panel\\\" \\nclass=\\\"md-sidenav-right md-whiteframe-4dp\\\" md-component-id=\\\"quick-panel\\\" ms-scroll ui-view=\\\"quickPanel\\\"></md-sidenav>\\n</div>\");\n$templateCache.put(\"app/core/theme-options/theme-options.html\",\"<div class=\\\"ms-theme-options-button md-primary-bg\\\" ng-click=\\\"toggleOptionsSidenav()\\\"><md-icon md-font-icon=\\\"icon-cog\\\" \\nclass=\\\"white-text\\\"></md-icon></div><md-sidenav md-component-id=\\\"fuse-theme-options\\\" class=\\\"md-sidenav-right\\\"><div \\nclass=\\\"ms-theme-options-list\\\" layout=\\\"column\\\"><div class=\\\"theme-option layout-options\\\"><div class=\\\"option-title\\\">\\nLayout Style:</div><md-radio-group layout=\\\"row\\\" layout-align=\\\"start start\\\" layout-wrap ng-model=\\\"vm.layoutStyle\\\" \\nng-change=\\\"vm.updateLayoutStyle()\\\"><md-radio-button ng-repeat=\\\"layoutStyle in vm.layoutStyles\\\" \\nng-value=\\\"layoutStyle.value\\\"><div layout=\\\"column\\\" layout-align=\\\"center center\\\"><img ng-src=\\\"{{layoutStyle.figure}}\\\"> \\n<span class=\\\"text-center font-size-12 mt-8\\\">{{layoutStyle.label}}</span></div></md-radio-button></md-radio-group></div>\\n<md-divider></md-divider><div class=\\\"theme-option\\\"><div class=\\\"option-title\\\">Layout Mode:</div><md-radio-group \\nlayout=\\\"row\\\" layout-align=\\\"start center\\\" ng-model=\\\"vm.layoutMode\\\" ng-change=\\\"vm.updateLayoutMode()\\\"><md-radio-button \\nng-repeat=\\\"layoutMode in vm.layoutModes\\\" ng-value=\\\"layoutMode.value\\\">{{layoutMode.label}}</md-radio-button>\\n</md-radio-group></div><md-divider></md-divider><div class=\\\"theme-option color-palettes\\\"><div class=\\\"option-title\\\">\\nColor Palette:</div><div layout=\\\"row\\\" layout-align=\\\"start start\\\" layout-wrap><md-button \\nng-repeat=\\\"(themeName, theme) in vm.themes.list\\\" class=\\\"md-raised theme-button\\\" layout=\\\"row\\\" \\nlayout-align=\\\"center center\\\" aria-label=\\\"{{themeName}}\\\" ng-click=\\\"vm.setActiveTheme(themeName)\\\" \\nng-style=\\\"{\\'background-color\\': theme.primary.color,\\'border-color\\': theme.accent.color,\\'color\\': theme.primary.contrast1}\\\" \\nng-class=\\\"{active: vm.getActiveTheme().name === themeName}\\\"><md-icon ng-style=\\\"{\\'color\\': theme.primary.contrast1}\\\" \\nmd-font-icon=\\\"icon-palette\\\" class=\\\"icon s32\\\"></md-icon></md-button></div></div></div></md-sidenav>\");\n$templateCache.put(\"app/core/directives/ms-info-bar/ms-info-bar.html\",\"<div id=\\\"ms-info-bar\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\" flex><div id=\\\"ms-info-bar-message\\\" ng-transclude flex>\\n</div><md-button id=\\\"ms-info-bar-close\\\" class=\\\"md-icon-button\\\" aria-label=\\\"Close\\\" ng-click=\\\"removeInfoBar()\\\"><md-icon \\nmd-font-icon=\\\"icon-close s24\\\"></md-icon></md-button></div>\");\n$templateCache.put(\"app/core/directives/ms-material-color-picker/ms-material-color-picker.html\",\"<md-menu md-position-mode=\\\"target-right target\\\"><div ng-click=\\\"$mdOpenMenu($event)\\\"><ms-color-picker-button><md-button \\naria-label=\\\"Row Color\\\" md-menu-origin ng-click=\\\"$mdOpenMenu($event)\\\" ng-class=\\\"vm.selectedColor.class\\\"><span \\nng-show=\\\"vm.selectedColor.palette\\\">{{vm.selectedColor.palette}} {{vm.selectedColor.hue}} </span><span \\nng-show=\\\"!vm.selectedColor.palette\\\">Select Color</span></md-button></ms-color-picker-button></div><md-menu-content \\nclass=\\\"ms-material-color-picker-menu-content\\\" layout-column><header \\nng-class=\\\"vm.selectedColor.class || \\'md-accent-bg\\'\\\" class=\\\"md-whiteframe-4dp\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between center\\\"><md-button md-prevent-menu-close ng-click=\\\"vm.activateHueSelection(false,false)\\\" \\nclass=\\\"md-icon-button\\\" ng-class=\\\"{\\'hidden\\':!vm.selectedPalette}\\\" aria-label=\\\"Palette\\\"><md-icon \\nmd-font-icon=\\\"icon-arrow-left\\\" class=\\\"s20\\\"></md-icon></md-button><span ng-if=\\\"vm.selectedColor.palette\\\">\\n{{vm.selectedColor.palette}} {{vm.selectedColor.hue}} </span><span ng-if=\\\"!vm.selectedColor.palette\\\">Select Color\\n</span><md-button class=\\\"remove-color-button md-icon-button\\\" ng-click=\\\"vm.removeColor()\\\" aria-label=\\\"Remove Color\\\">\\n<md-icon md-font-icon=\\\"icon-delete\\\" class=\\\"s20\\\"></md-icon></md-button></header><div class=\\\"colors\\\" ms-scroll><div \\nng-show=\\\"!vm.selectedPalette\\\" layout=\\\"row\\\" layout-wrap><div class=\\\"color\\\" ng-class=\\\"\\'md-\\'+palette+\\'-500-bg\\'\\\" \\nng-repeat=\\\"(palette, hues) in vm.palettes\\\" ng-click=\\\"vm.activateHueSelection(palette,hues)\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start end\\\" md-prevent-menu-close md-ink-ripple><span class=\\\"label\\\">{{palette}}</span></div></div><div \\nng-show=\\\"vm.selectedPalette\\\" layout=\\\"row\\\" layout-wrap><div class=\\\"color\\\" \\nng-class=\\\"\\'md-\\'+vm.selectedPalette+\\'-\\'+hue+\\'-bg\\'\\\" ng-repeat=\\\"(hue, values) in vm.selectedHues\\\" \\nng-click=\\\"vm.selectColor(vm.selectedPalette,hue)\\\" layout=\\\"row\\\" layout-align=\\\"start end\\\" md-ink-ripple><span \\nclass=\\\"label\\\">{{hue}} </span><i ng-if=\\\"vm.selectedPalette == vm.selectedColor.palette && hue == vm.selectedColor.hue\\\" \\nclass=\\\"s16 icon-check\\\"></i></div></div></div></md-menu-content></md-menu>\");\n$templateCache.put(\"app/core/directives/ms-search-bar/ms-search-bar.html\",\"<div flex layout=\\\"row\\\" layout-align=\\\"start center\\\"><label for=\\\"ms-search-bar-input\\\"><md-button \\nclass=\\\"ms-search-bar-expander md-icon-button\\\" aria-label=\\\"Expand Search Bar\\\" ng-click=\\\"MsSearchBar.expand()\\\" \\nng-if=\\\"!MsSearchBar.resultsLoading || MsSearchBar.collapsed\\\"><md-icon md-font-icon=\\\"icon-magnify\\\" class=\\\"icon s24\\\">\\n</md-icon></md-button><div class=\\\"ms-search-bar-loader\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\" \\nng-if=\\\"MsSearchBar.resultsLoading && !MsSearchBar.collapsed\\\"><md-progress-circular class=\\\"md-accent\\\" md-diameter=\\\"32\\\" \\nmd-mode=\\\"indeterminate\\\"></md-progress-circular></div></label><input id=\\\"ms-search-bar-input\\\" type=\\\"text\\\" \\nplaceholder=\\\"Search\\\" flex ng-model=\\\"MsSearchBar.query\\\" ng-model-options=\\\"MsSearchBar.queryOptions\\\" \\nng-blur=\\\"MsSearchBar.collapse()\\\" ng-keydown=\\\"MsSearchBar.handleKeydown($event)\\\"><md-button \\nclass=\\\"ms-search-bar-collapser md-icon-button\\\" ng-click=\\\"MsSearchBar.collapse()\\\" aria-label=\\\"Collapse Search Bar\\\">\\n<md-icon md-font-icon=\\\"icon-close\\\" class=\\\"icon s24\\\"></md-icon></md-button><div class=\\\"ms-search-bar-results\\\" \\nng-if=\\\"MsSearchBar.results\\\" ms-scroll><div class=\\\"no-results\\\" ng-if=\\\"MsSearchBar.results.length === 0\\\">No Results!\\n</div><div class=\\\"result\\\" ng-repeat=\\\"result in MsSearchBar.results\\\" ng-click=\\\"MsSearchBar.handleResultClick(result)\\\" \\nng-mouseenter=\\\"MsSearchBar.handleMouseenter($index)\\\" ng-mousedown=\\\"MsSearchBar.absorbEvent($event)\\\" \\nng-class=\\\"{\\'selected\\': $index == MsSearchBar.selectedResultIndex}\\\" md-ink-ripple><div layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><div class=\\\"icon-container\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\"><i \\nng-if=\\\"result.icon\\\" class=\\\"icon {{result.icon}}\\\"></i><div ng-if=\\\"!result.icon\\\" class=\\\"square md-accent-bg\\\"></div></div>\\n<div><div class=\\\"title\\\">{{result.title}}</div><div class=\\\"description\\\" ng-if=\\\"result.description\\\">\\n{{result.description}}</div></div></div></div></div></div>\");\n$templateCache.put(\"app/core/directives/ms-shortcuts/ms-shortcuts.html\",\"<div class=\\\"shortcuts-container\\\" layout=\\\"row\\\" layout-align=\\\"space-between center\\\" flex \\nng-class=\\\"{\\'mobile-bar-active\\': MsShortcuts.mobileBarActive}\\\"><div class=\\\"flex-noshrink\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\" flex><div class=\\\"shortcuts hide show-gt-xs\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\" \\nms-scroll ng-if=\\\"MsShortcuts.shortcuts.length > 0\\\" ng-sortable=\\\"MsShortcuts.sortableOptions\\\"><div \\nng-repeat=\\\"shortcut in MsShortcuts.shortcuts\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\"><md-button \\nclass=\\\"md-icon-button shortcut\\\" aria-label=\\\"{{shortcut.title}}\\\" ui-sref=\\\"{{shortcut.uisref}}\\\"><md-icon \\nng-if=\\\"shortcut.icon\\\" md-font-icon=\\\"{{shortcut.icon}}\\\" class=\\\"icon s24\\\"></md-icon><div ng-if=\\\"!shortcut.icon\\\" \\nclass=\\\"first-letter\\\">{{shortcut.title.charAt(0)}}</div><md-tooltip md-direction=\\\"bottom\\\">{{shortcut.title}}\\n</md-tooltip></md-button></div></div><md-menu md-offset=\\\"8 56\\\" class=\\\"shortcut-menu hide show-gt-xs\\\"><md-button \\nclass=\\\"md-icon-button add-shortcut-button\\\" aria-label=\\\"Add shortcut\\\" ng-click=\\\"$mdOpenMenu($event)\\\"><md-icon \\nmd-menu-origin md-font-icon=\\\"icon-star\\\" class=\\\"icon amber-600-fg s24\\\"></md-icon><md-tooltip md-direction=\\\"bottom\\\">\\nClick para agregar o eliminar acceso directo</md-tooltip></md-button><md-menu-content><div id=\\\"ms-shortcut-add-menu\\\">\\n<div class=\\\"shortcut-search\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\"><div class=\\\"search-icon\\\" layout=\\\"row\\\" \\nlayout-align=\\\"center center\\\" ng-if=\\\"!MsShortcuts.resultsLoading\\\"><md-icon md-menu-align-target \\nmd-font-icon=\\\"icon-magnify\\\" class=\\\"icon s24\\\"></md-icon></div><div class=\\\"shortcut-loader\\\" layout=\\\"row\\\" \\nlayout-align=\\\"center center\\\" ng-if=\\\"MsShortcuts.resultsLoading\\\"><md-progress-circular class=\\\"md-accent\\\" \\nmd-diameter=\\\"20\\\" md-mode=\\\"indeterminate\\\"></md-progress-circular></div><input type=\\\"text\\\" placeholder=\\\"Buscar\\\" flex \\nng-model=\\\"MsShortcuts.query\\\" ng-model-options=\\\"MsShortcuts.queryOptions\\\" \\nng-keydown=\\\"MsShortcuts.handleKeydown($event)\\\"></div><div class=\\\"results\\\" ng-if=\\\"MsShortcuts.results\\\" ms-scroll><div \\nclass=\\\"no-results\\\" ng-if=\\\"MsShortcuts.results.length === 0\\\">Sin Resultados</div><div class=\\\"result\\\" \\nng-repeat=\\\"result in MsShortcuts.results\\\" ng-click=\\\"MsShortcuts.handleResultClick(result)\\\" \\nng-mouseenter=\\\"MsShortcuts.handleMouseenter($index)\\\" ng-mousedown=\\\"MsShortcuts.absorbEvent($event)\\\" \\nng-class=\\\"{\\'selected\\': $index == MsShortcuts.selectedResultIndex}\\\" md-prevent-menu-close=\\\"md-prevent-menu-close\\\" \\nmd-ink-ripple><div layout=\\\"row\\\" layout-align=\\\"start space-between\\\"><div layout=\\\"row\\\" layout-align=\\\"start center\\\" flex>\\n<div class=\\\"icon icon-container\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\"><i ng-if=\\\"result.icon\\\" \\nclass=\\\"{{result.icon}}\\\"></i><div ng-if=\\\"!result.icon\\\" class=\\\"square md-accent-bg\\\"></div></div><div><div class=\\\"title\\\">\\n{{result.title}}</div></div></div><md-icon md-font-icon=\\\"icon-pin\\\" class=\\\"icon s18\\\" \\nng-class=\\\"{\\'fade-text\\': !result.hasShortcut}\\\"></md-icon></div></div></div></div></md-menu-content></md-menu></div>\\n<md-button class=\\\"md-icon-button toggle-mobile-menu hide-gt-xs\\\" aria-label=\\\"Add shortcut\\\" \\nng-click=\\\"MsShortcuts.toggleMobileBar()\\\"><md-icon md-menu-origin md-font-icon=\\\"icon-star\\\" \\nclass=\\\"icon amber-600-fg s24\\\" ng-hide=\\\"MsShortcuts.mobileBarActive\\\"></md-icon><md-icon md-menu-origin \\nmd-font-icon=\\\"icon-close\\\" class=\\\"icon s24\\\" ng-hide=\\\"!MsShortcuts.mobileBarActive\\\"></md-icon></md-button></div>\");\n$templateCache.put(\"app/main/auth/login/forgot-password.html\",\"<md-dialog class=\\\"forgot-password\\\" aria-label=\\\"Olvido su contraseña\\\"><form name=\\\"forgotForm\\\" novalidate>\\n<md-dialog-content><h2 class=\\\"md-title\\\">¿Olvidó su contraseña?</h2><div class=\\\"h5\\\">\\nIngrese el correo registrado previamente para poder reiniciar su contraseña.</div><md-input-container class=\\\"md-block\\\" \\nmd-no-float><input ng-keypress=\\\"vm.keypress($event)\\\" type=\\\"text\\\" name=\\\"email\\\" ng-model=\\\"vm.email\\\" placeholder=\\\"Correo\\\" \\nserver-validation=\\\"[\\'EMAIL_NOT_FOUND\\']\\\" ng-pattern=\\\"/^.+@.+\\\\..+$/\\\" required><div ng-messages=\\\"forgotForm.email.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El correo es requerido.</span></div><div ng-message=\\\"pattern\\\"><span>\\nDebe ser un correo valido.</span></div><div ng-message=\\\"EMAIL_NOT_FOUND\\\"><span>El correo no se encuentra registrado.\\n</span></div></div></md-input-container></md-dialog-content><md-dialog-actions><md-button class=\\\"md-primary\\\" \\nng-click=\\\"vm.cancel()\\\">Cancelar</md-button><md-button class=\\\"md-primary\\\" ng-click=\\\"vm.reset()\\\" \\nng-disabled=\\\"forgotForm.$invalid\\\">Aceptar</md-button></md-dialog-actions></form></md-dialog>\");\n$templateCache.put(\"app/main/auth/login/login.html\",\"<div id=\\\"login\\\" class=\\\"flex-scrollable\\\" layout=\\\"column\\\" ms-scroll><div id=\\\"login-form-wrapper\\\" layout=\\\"column\\\" \\nlayout-align=\\\"center center\\\"><div id=\\\"login-form\\\"><div class=\\\"logo\\\"><img \\nsrc=\\\"assets/images/logos/marca-HaibuSmart.png\\\" alt=\\\"logo\\\"></div><form name=\\\"loginForm\\\" novalidate \\nng-submit=\\\"vm.login()\\\"><md-input-container class=\\\"md-block\\\" md-no-float><input type=\\\"text\\\" name=\\\"email\\\" \\nng-model=\\\"vm.loginForm.email\\\" placeholder=\\\"Correo\\\" ng-pattern=\\\"/^.+@.+\\\\..+$/\\\" required><div \\nng-messages=\\\"loginForm.email.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El correo es requerido.</span></div>\\n<div ng-message=\\\"pattern\\\"><span>Debe ser un correo valido.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" name=\\\"password\\\" ng-model=\\\"vm.loginForm.password\\\" \\nplaceholder=\\\"Password\\\" server-validation=\\\"[\\'LOGIN_FAILED\\']\\\" required><div ng-messages=\\\"loginForm.password.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>La contraseña es requerida.</span></div><div ng-message=\\\"LOGIN_FAILED\\\">\\n<span>Correo o contraseña incorrecta.</span></div></div></md-input-container><div class=\\\"remember-forgot-password\\\" \\nlayout=\\\"row\\\" layout-xs=\\\"column\\\" layout-align=\\\"space-between center\\\"><md-checkbox class=\\\"remember-me\\\" \\nng-model=\\\"vm.rememberMe\\\" aria-label=\\\"Remember Me\\\"><span translate=\\\"LOGIN.REMEMBER_ME\\\">Remember Me</span></md-checkbox>\\n<a ng-click=\\\"vm.forgotPassword($event)\\\" class=\\\"forgot-password\\\" translate=\\\"LOGIN.FORGOT_PASSWORD\\\">Forgot Password?</a>\\n</div><md-button type=\\\"submit\\\" class=\\\"md-raised md-accent submit-button\\\" aria-label=\\\"LOG IN\\\" \\nng-disabled=\\\"loginForm.$invalid || loginForm.$pristine || vm.isLoading\\\">INGRESAR</md-button></form><div \\nclass=\\\"register\\\" layout=\\\"row\\\" layout-xs=\\\"column\\\" layout-align=\\\"space-between  center\\\"><span class=\\\"text\\\" \\ntranslate=\\\"LOGIN.DONT_HAVE_ACCOUNT\\\">Don\\'t have an account?</span> <a class=\\\"link\\\" ui-sref=\\\"app.auth_register\\\" \\ntranslate=\\\"LOGIN.CREATE_ACCOUNT\\\">Create an account</a></div><div class=\\\"text-center\\\"><p class=\\\"marca\\\">\\n© HaibuSmart | Haibu Group</p></div></div></div></div>\");\n$templateCache.put(\"app/main/auth/register/register.html\",\"<div id=\\\"register\\\" class=\\\"flex-scrollable\\\" layout=\\\"column\\\" ms-scroll><div id=\\\"register-form-wrapper\\\" layout=\\\"column\\\" \\nlayout-align=\\\"center center\\\"><div id=\\\"register-form\\\"><div class=\\\"logo\\\"><img \\nsrc=\\\"assets/images/logos/marca-HaibuSmart.png\\\" alt=\\\"logo\\\"></div><form name=\\\"registerForm\\\" novalidate \\nng-submit=\\\"vm.register($event)\\\"><md-input-container class=\\\"md-block\\\" md-no-float><input name=\\\"firstName\\\" \\nng-model=\\\"vm.registerForm.firstName\\\" placeholder=\\\"Nombre\\\" maxlength=\\\"30\\\" minlength=\\\"4\\\" \\nserver-validation=\\\"[\\'length.min\\',\\'length.max\\']\\\" required><div ng-messages=\\\"registerForm.firstName.$error\\\" role=\\\"alert\\\">\\n<div ng-message=\\\"required\\\"><span>El nombre es requerido.</span></div><div ng-message=\\\"minlength\\\"><span>\\nEl nombre no puede tener menos de 4 caracteres.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nEl nombre no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"length.man\\\"><span>\\nEl nombre no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"length.min\\\"><span>\\nEl nombre no puede tener menos de 4 caracteres.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input name=\\\"lastName\\\" ng-model=\\\"vm.registerForm.lastName\\\" placeholder=\\\"Apellido\\\" \\nmaxlength=\\\"30\\\" minlength=\\\"4\\\" server-validation=\\\"[\\'length.min\\',\\'length.max\\']\\\" required><div \\nng-messages=\\\"registerForm.lastName.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El apellido es requerido\\n</span></div><div ng-message=\\\"minlength\\\"><span>El nombre no puede tener menos de 4 caracteres.</span></div><div \\nng-message=\\\"maxlength\\\"><span>El nombre no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"length.min\\\">\\n<span>El nombre no puede tener menos de 4 caracteres.</span></div><div ng-message=\\\"length.max\\\"><span>\\nEl nombre no puede tener mas de 30 caracteres.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input type=\\\"text\\\" name=\\\"email\\\" ng-model=\\\"vm.registerForm.email\\\" placeholder=\\\"Correo\\\" \\nng-pattern=\\\"/^.+@.+\\\\..+$/\\\" server-validation=\\\"[\\'uniqueness\\']\\\" required><div ng-messages=\\\"registerForm.email.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El correo es requerido.</span></div><div ng-message=\\\"pattern\\\"><span>\\nDebe ser un correo valido.</span></div><div ng-message=\\\"uniqueness\\\"><span>El correo ya se encuentra registrado.</span>\\n</div></div></md-input-container><md-input-container class=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" \\nname=\\\"password\\\" ng-model=\\\"vm.registerForm.password\\\" placeholder=\\\"Contraseña\\\" maxlength=\\\"30\\\" minlength=\\\"8\\\" required><div\\n ng-messages=\\\"registerForm.password.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>La contraseña es requerida\\n</span></div><div ng-message=\\\"minlength\\\"><span>La contraseña no puede tener menos de 8 caracteres.</span></div><div \\nng-message=\\\"maxlength\\\"><span>La contraseña no puede tener mas de 30 caracteres.</span></div></div></md-input-container>\\n<md-input-container class=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" name=\\\"passwordConfirm\\\" \\nng-model=\\\"vm.registerForm.passwordConfirm\\\" placeholder=\\\"Confirmar contraseña\\\" \\nng-pattern=\\\"{{vm.registerForm.password}}\\\" required><div ng-messages=\\\"registerForm.passwordConfirm.$error\\\" role=\\\"alert\\\">\\n<div ng-message=\\\"required\\\"><span>La contraseña de confirmación es requerida</span></div><div ng-message=\\\"pattern\\\">\\n<span>Las contraseñas no son iguales</span></div></div></md-input-container><md-button type=\\\"submit\\\" \\nclass=\\\"md-raised md-accent submit-button\\\" aria-label=\\\"Crear mi cuenta\\\" \\nng-disabled=\\\"registerForm.$invalid || registerForm.$pristine || vm.isLoading\\\">Crear mi cuenta</md-button></form><div \\nclass=\\\"login\\\" layout=\\\"row\\\" layout-xs=\\\"column\\\" layout-align=\\\"space-between  center\\\"><span class=\\\"text\\\">\\n¿Ya tienes una cuenta?</span> <a class=\\\"link\\\" ui-sref=\\\"app.auth_login\\\">Iniciar sesión</a></div><div \\nclass=\\\"text-center\\\"><p class=\\\"marca\\\">© HaibuSmart | Haibu Group</p></div></div></div></div>\");\n$templateCache.put(\"app/main/auth/reset/reset.html\",\"<div id=\\\"reset\\\" class=\\\"flex-scrollable\\\" layout=\\\"column\\\" ms-scroll><div id=\\\"reset-form-wrapper\\\" layout=\\\"column\\\" \\nlayout-align=\\\"center center\\\"><div id=\\\"reset-form\\\"><div class=\\\"logo\\\"><img \\nsrc=\\\"assets/images/logos/marca-HaibuSmart.png\\\" alt=\\\"logo\\\"></div><form name=\\\"resetForm\\\" novalidate><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" name=\\\"password\\\" ng-model=\\\"vm.resetForm.password\\\" \\nplaceholder=\\\"Nueva contraseña\\\" maxlength=\\\"30\\\" minlength=\\\"8\\\" server-validation=\\\"[\\'AUTHORIZATION_REQUIRED\\']\\\" required>\\n<div ng-messages=\\\"resetForm.password.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>La contraseña es requerida\\n</span></div><div ng-message=\\\"minlength\\\"><span>La contraseña no puede tener menos de 8 caracteres.</span></div><div \\nng-message=\\\"maxlength\\\"><span>La contraseña no puede tener mas de 30 caracteres.</span></div><div \\nng-message=\\\"AUTHORIZATION_REQUIRED\\\"><span>El token ya ha sido utilizado.</span></div></div></md-input-container>\\n<md-input-container class=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" name=\\\"passwordConfirm\\\" \\nng-model=\\\"vm.resetForm.passwordConfirm\\\" placeholder=\\\"Confirmar contraseña\\\" ng-pattern=\\\"{{vm.resetForm.password}}\\\" \\nrequired><div ng-messages=\\\"resetForm.passwordConfirm.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nLa contraseña de confirmación es requerida</span></div><div ng-message=\\\"pattern\\\"><span>Las contraseñas no son iguales\\n</span></div></div></md-input-container><md-button type=\\\"submit\\\" class=\\\"md-raised md-accent submit-button\\\" \\naria-label=\\\"LOG IN\\\" ng-click=\\\"vm.reset($event)\\\" \\nng-disabled=\\\"resetForm.$invalid || resetForm.$pristine || vm.isLoading\\\">Reiniciar mi contraseña</md-button></form><div \\nclass=\\\"login\\\" layout=\\\"row\\\" layout-xs=\\\"column\\\" layout-align=\\\"space-between  center\\\"><span class=\\\"text\\\">\\n¿Ya tienes una cuenta?</span> <a class=\\\"link\\\" ui-sref=\\\"app.auth_login\\\">Iniciar sesión</a></div><div \\nclass=\\\"text-center\\\"><p class=\\\"marca\\\">© HaibuSmart | Haibu Group</p></div></div></div></div>\");\n$templateCache.put(\"app/main/pages/alerts/alerts.html\",\"<div id=\\\"alerts\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-advertencia2-HaibuSmart\\\"></md-icon><span>Alertas\\n</span></div></div></div><div class=\\\"content\\\"><div class=\\\"timeline-item\\\" layout=\\\"column\\\" layout-align=\\\"center center\\\" \\nlayout-gt-md=\\\"row\\\" layout-align-gt-md=\\\"center start\\\" ng-repeat=\\\"alert in vm.alerts | orderBy:\\'-timestamp\\'\\\"><div \\nclass=\\\"timeline-detail\\\" flex=\\\"50\\\"><div class=\\\"time\\\"><span am-time-ago=\\\"alert.timestamp \\\"></span></div></div><div \\nclass=\\\"timeline-card\\\" layout=\\\"row\\\" flex=\\\"50\\\"><md-card><md-card-content><h2>{{alert.title}}</h2><p>{{alert.event}}</p>\\n</md-card-content></md-card></div></div></div></div>\");\n$templateCache.put(\"app/main/pages/home/home.html\",\"<div id=\\\"home\\\"><div class=\\\"header md-primary-bg md-hue-2\\\" layout=\\\"row\\\" layout-align=\\\"space-between\\\"><div \\nlayout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\"><span \\nclass=\\\"wellcome mr-8\\\">Bienvenido</span><span class=\\\"text-bold\\\">{{vm.user.firstName}} {{vm.user.lastName}}</span></div>\\n</div><div layout=\\\"column\\\" layout-align=\\\"center end\\\" hide-xs><div class=\\\"time text-semi\\\" layout=\\\"row\\\">\\n{{vm.time.now.hour}}:{{vm.time.now.minute}}:{{vm.time.now.second}}</div><div class=\\\"full-time text-semi\\\" layout=\\\"row\\\">\\n{{vm.time.now.weekDay | capitalize}} {{vm.time.now.day}} de {{vm.time.now.month}} de {{vm.time.now.year}}</div></div>\\n</div><div class=\\\"content\\\"><div class=\\\"widget-group\\\" layout=\\\"row\\\" flex=\\\"100\\\" layout-wrap><ms-widget flippable=\\\"false\\\" \\nlayout=\\\"column\\\" flex=\\\"50\\\" flex-gt-xs=\\\"25\\\" flex-gt-md=\\\"25\\\"><ms-widget-front class=\\\"white-bg\\\"><div class=\\\"pt-8\\\"><div \\nclass=\\\"h3 text-center\\\">Bateria</div></div><div class=\\\"gauge-color p-8 text-center\\\" width=\\\"160\\\" ng-radial-gauge \\nranges=\\\"vm.device.gagueBAT.ranges\\\" value=\\\"vm.device.gagueBAT.value\\\" value-unit=\\\"vm.device.gagueBAT.unit\\\" \\nprecision=\\\"vm.device.gagueBAT.precision\\\" lower-limit=\\\"vm.device.gagueBAT.lowerLimit\\\" \\nupper-limit=\\\"vm.device.gagueBAT.upperLimit\\\" angle=\\\"90\\\" needle-color=\\\"#0095F4\\\" needle-value-text-size=\\\"30\\\"></div><div \\nclass=\\\"h4 text-center text-semi difference\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\"><div><md-icon \\nng-if=\\\"vm.device.gagueBAT.diff>0\\\" md-font-icon=\\\"icon-arrow-up\\\"></md-icon><md-icon ng-if=\\\"vm.device.gagueBAT.diff<0\\\" \\nmd-font-icon=\\\"icon-arrow-down\\\"></md-icon></div><div>\\n{{vm.device.gagueBAT.diff?(vm.device.gagueBAT.diff| limitTo : 4 )+\\'%\\':\\'\\'}}</div></div><p class=\\\"h4 text-center mb-8\\\">\\n{{(vm.device.gagueBAT.timestamp | date :\\\"short\\\") ||\\\"Sin información\\\"}}</p></ms-widget-front></ms-widget><ms-widget \\nflippable=\\\"false\\\" layout=\\\"column\\\" flex=\\\"50\\\" flex-gt-xs=\\\"25\\\" flex-gt-md=\\\"25\\\"><ms-widget-front class=\\\"white-bg\\\"><div \\nclass=\\\"pt-8\\\"><div class=\\\"h3 text-center\\\">Carga Solar</div></div><div class=\\\"gauge-color p-8 text-center\\\" width=\\\"160\\\" \\nng-radial-gauge ranges=\\\"vm.device.gagueCHR.ranges\\\" value=\\\"vm.device.gagueCHR.value\\\" \\nvalue-unit=\\\"vm.device.gagueCHR.unit\\\" precision=\\\"vm.device.gagueCHR.precision\\\" \\nlower-limit=\\\"vm.device.gagueCHR.lowerLimit\\\" upper-limit=\\\"vm.device.gagueCHR.upperLimit\\\" angle=\\\"90\\\" \\nneedle-color=\\\"#0095F4\\\" needle-value-text-size=\\\"30\\\"></div><div class=\\\"h4 text-center text-semi difference\\\" layout=\\\"row\\\" \\nlayout-align=\\\"center center\\\"><div><md-icon ng-if=\\\"vm.device.gagueCHR.diff>0\\\" md-font-icon=\\\"icon-arrow-up\\\"></md-icon>\\n<md-icon ng-if=\\\"vm.device.gagueCHR.diff<0\\\" md-font-icon=\\\"icon-arrow-down\\\"></md-icon></div><div>\\n{{vm.device.gagueCHR.diff?(vm.device.gagueCHR.diff| limitTo : 4 )+\\'%\\':\\'\\'}}</div></div><p class=\\\"h4 text-center mb-8\\\">\\n{{(vm.device.gagueCHR.timestamp | date :\\\"short\\\") ||\\\"Sin información\\\"}}</p></ms-widget-front></ms-widget><ms-widget \\nflippable=\\\"false\\\" layout=\\\"column\\\" flex=\\\"100\\\" flex-gt-xs=\\\"50\\\" flex-gt-md=\\\"50\\\"><ms-widget-front class=\\\"white-bg\\\"><div \\nclass=\\\"pt-8\\\"><div class=\\\"h3 text-center\\\">Acelerometro</div></div><div><nvd3 class=\\\"h-160 remove-x-lines line-chart\\\" \\noptions=\\\"vm.device.lineChartACC.options\\\" data=\\\"vm.device.lineChartACC.data\\\"></nvd3></div></ms-widget-front></ms-widget>\\n</div><div class=\\\"widget-group\\\" layout=\\\"row\\\" flex=\\\"100\\\" layout-wrap><ms-widget flippable=\\\"false\\\" layout=\\\"column\\\" \\nflex=\\\"100\\\" flex-gt-xs=\\\"50\\\" flex-gt-md=\\\"50\\\" class=\\\"h-340\\\"><ms-widget-front class=\\\"white-bg\\\"><div class=\\\"pt-8\\\"><div \\nclass=\\\"h3 text-center\\\">Caudal del rio</div></div><div><nvd3 class=\\\"h-250 remove-x-lines line-chart\\\" \\noptions=\\\"vm.device.lineChart.options\\\" data=\\\"vm.device.lineChart.data\\\"></nvd3></div></ms-widget-front></ms-widget>\\n<ms-widget flippable=\\\"false\\\" layout=\\\"column\\\" flex=\\\"100\\\" flex-gt-xs=\\\"50\\\" flex-gt-md=\\\"50\\\" class=\\\"h-340\\\"><ms-widget-front>\\n<jk-carousel layout-fill flex data=\\\"vm.carousel.images\\\" max-width=\\\"1200\\\" max-height=\\\"800\\\" \\nfont-icon-left=\\\"icono-izquierda-HaibuSmart\\\" font-icon-right=\\\"icono-derecha-HaibuSmart\\\" \\ncurrent-index=\\\"vm.carousel.currentIndex\\\" auto-slide-time=\\\"3000\\\" item-template-url=\\\"vm.carousel.templateUrl\\\" \\nauto-slide=\\\"vm.carouse.autoSlide\\\"></jk-carousel></ms-widget-front></ms-widget></div></div></div>\");\n$templateCache.put(\"app/main/pages/home/slide-template.html\",\"<img layout-fill flex ng-src=\\\"{{slideItem.src}}\\\">\");\n$templateCache.put(\"app/main/pages/profile/profile.html\",\"<div id=\\\"profile\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"content\\\"><form name=\\\"profileForm\\\" novalidate \\nng-submit=\\\"vm.login()\\\"><md-input-container class=\\\"md-block\\\" md-no-float><input name=\\\"firstName\\\" \\nng-model=\\\"vm.profileForm.firstName\\\" placeholder=\\\"Nombre\\\" maxlength=\\\"30\\\" minlength=\\\"4\\\" \\nserver-validation=\\\"[\\'length.min\\',\\'length.max\\']\\\" required><div ng-messages=\\\"profileForm.firstName.$error\\\" role=\\\"alert\\\">\\n<div ng-message=\\\"required\\\"><span>El nombre es requerido.</span></div><div ng-message=\\\"minlength\\\"><span>\\nEl nombre no puede tener menos de 4 caracteres.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nEl nombre no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"length.man\\\"><span>\\nEl nombre no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"length.min\\\"><span>\\nEl nombre no puede tener menos de 4 caracteres.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input name=\\\"lastName\\\" ng-model=\\\"vm.profileForm.lastName\\\" placeholder=\\\"Apellido\\\" \\nmaxlength=\\\"30\\\" minlength=\\\"4\\\" server-validation=\\\"[\\'length.min\\',\\'length.max\\']\\\" required><div \\nng-messages=\\\"profileForm.lastName.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El apellido es requerido</span>\\n</div><div ng-message=\\\"minlength\\\"><span>El nombre no puede tener menos de 4 caracteres.</span></div><div \\nng-message=\\\"maxlength\\\"><span>El nombre no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"length.min\\\">\\n<span>El nombre no puede tener menos de 4 caracteres.</span></div><div ng-message=\\\"length.max\\\"><span>\\nEl nombre no puede tener mas de 30 caracteres.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input type=\\\"text\\\" name=\\\"email\\\" ng-model=\\\"vm.profileForm.email\\\" placeholder=\\\"Correo\\\" \\nng-pattern=\\\"/^.+@.+\\\\..+$/\\\" server-validation=\\\"[\\'uniqueness\\']\\\" required><div ng-messages=\\\"profileForm.email.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El correo es requerido.</span></div><div ng-message=\\\"pattern\\\"><span>\\nDebe ser un correo valido.</span></div><div ng-message=\\\"uniqueness\\\"><span>El correo ya se encuentra registrado.</span>\\n</div></div></md-input-container><md-button type=\\\"submit\\\" class=\\\"md-raised md-accent submit-button\\\" \\naria-label=\\\"Actualizar Datos\\\" ng-click=\\\"vm.updateProfile($event)\\\" \\nng-disabled=\\\"profileForm.$invalid || profileForm.$pristine\\\">Actualizar Datos</md-button></form><form name=\\\"passForm\\\" \\nnovalidate ng-submit=\\\"vm.login()\\\"><md-input-container class=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" \\nname=\\\"oldPassword\\\" ng-model=\\\"vm.passForm.oldPassword\\\" placeholder=\\\"Contraseña Actual\\\" \\nserver-validation=\\\"[\\'INVALID_PASSWORD\\']\\\" maxlength=\\\"30\\\" minlength=\\\"8\\\" required><div \\nng-messages=\\\"passForm.oldPassword.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nLa contraseña actual es requerida</span></div><div ng-message=\\\"minlength\\\"><span>\\nLa contraseña no puede tener menos de 8 caracteres.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nLa contraseña no puede tener mas de 30 caracteres.</span></div><div ng-message=\\\"INVALID_PASSWORD\\\"><span>\\nContraseña actual incorrecta.</span></div></div></md-input-container><md-input-container class=\\\"md-block\\\" md-no-float>\\n<input type=\\\"password\\\" name=\\\"newPassword\\\" ng-model=\\\"vm.passForm.newPassword\\\" placeholder=\\\"Nueva contraseña\\\" \\nmaxlength=\\\"30\\\" minlength=\\\"8\\\" required><div ng-messages=\\\"passForm.newPassword.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"required\\\"><span>La nueva contraseña es requerida</span></div><div ng-message=\\\"minlength\\\"><span>\\nLa nueva contraseña no puede tener menos de 8 caracteres.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nLa nueva contraseña no puede tener mas de 30 caracteres.</span></div></div></md-input-container><md-input-container \\nclass=\\\"md-block\\\" md-no-float><input type=\\\"password\\\" name=\\\"passwordConfirm\\\" ng-model=\\\"vm.passForm.passwordConfirm\\\" \\nplaceholder=\\\"Confirmar contraseña\\\" ng-pattern=\\\"{{vm.passForm.newPassword}}\\\" required><div \\nng-messages=\\\"passForm.passwordConfirm.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nLa contraseña de confirmación es requerida</span></div><div ng-message=\\\"pattern\\\"><span>Las contraseñas no son iguales\\n</span></div></div></md-input-container><md-button type=\\\"submit\\\" class=\\\"md-raised md-accent submit-button\\\" \\naria-label=\\\"Actualizar\\\" ng-click=\\\"vm.updatePassword($event)\\\" \\nng-disabled=\\\"passForm.$invalid || passForm.$pristine || vm.isLoading\\\">Actualizar mi contraseña</md-button></form></div>\\n</div>\");\n$templateCache.put(\"app/main/pages/reports/reports.html\",\"<div id=\\\"reports\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-reporte2-HaibuSmart\\\"></md-icon><span>Reportes\\n</span></div></div><div layout=\\\"row\\\" layout-align=\\\"start center\\\"><md-button \\nclass=\\\"md-raised md-secondary smart-button-outline\\\" ng-click=\\\"vm.exportCvs($event)\\\" filename=\\\"haibu-smart-reporte.csv\\\">\\n<span>Exportar XLSX</span></md-button></div></div><div class=\\\"content\\\"><md-card><md-toolbar \\nclass=\\\"md-table-toolbar md-default\\\"><div class=\\\"md-toolbar-tools\\\"><div class=\\\"select-device\\\">Nodo {{vm.device.name}}\\n</div><md-menu md-offset=\\\"0 48\\\"><md-button class=\\\"md-icon-button device-selector\\\" ng-click=\\\"$mdOpenMenu()\\\" \\naria-label=\\\"Select project\\\" md-menu-origin md-menu-align-target><md-icon md-font-icon=\\\"icon-dots-horizontal\\\"></md-icon>\\n</md-button><md-menu-content width=\\\"3\\\" class=\\\"md-background-bg\\\"><md-menu-item ng-repeat=\\\"device in vm.devices\\\">\\n<md-button ng-click=\\\"vm.selectDevices(device)\\\" aria-label=\\\"{{device.name}}\\\"><span \\nng-class=\\\"{\\'secondary-text\\': vm.device == device}\\\">{{device.name}}</span></md-button></md-menu-item></md-menu-content>\\n</md-menu></div></md-toolbar><md-table-container><table md-table md-row-select=\\\"vm.options.rowSelection\\\" \\nmultiple=\\\"{{vm.options.multiSelect}}\\\" ng-model=\\\"vm.selected\\\"><thead md-head md-order=\\\"vm.query.order\\\" \\nmd-on-reorder=\\\"vm.getAllSolicitudes\\\"><tr md-row ng-if=\\\"vm.device.event.data\\\"><th md-column>Fecha</th><th md-column \\nng-repeat=\\\"data in vm.device.event.data\\\">{{data.id | parseUnits:vm.sensors}}</th></tr></thead><tbody md-body>\\n<md-progress-linear md-mode=\\\"indeterminate\\\" ng-show=\\\"vm.isLoading\\\" flex></md-progress-linear><tr md-row \\nng-if=\\\"vm.device.event.data\\\" ng-repeat=\\\"event in vm.reports\\\"><td md-cell><span am-time-ago=\\\"event.timestamp\\\"></span>\\n</td><td md-cell ng-repeat=\\\"header in vm.device.event.data\\\"><span \\nng-repeat=\\\"data in event.data | filter:{id:header.id}:true\\\">{{data.value}}{{data.id | parseUnits:vm.sensors:true}}\\n</span></td></tr></tbody></table></md-table-container><md-table-pagination \\nmd-label=\\\"{page: \\'Página:\\', rowsPerPage: \\'Filas por página:\\', of: \\'de\\'}\\\" md-limit=\\\"vm.query.limit\\\" \\nmd-limit-options=\\\"[5, 10, 15]\\\" md-page=\\\"vm.query.page\\\" md-total=\\\"{{vm.total}}\\\" md-page-select \\nmd-on-paginate=\\\"vm.getEvents\\\"></md-table-pagination></md-card></div></div>\");\n$templateCache.put(\"app/navigation/layouts/vertical-navigation/navigation.html\",\"<md-toolbar class=\\\"navigation-header\\\" layout=\\\"row\\\" layout-align=\\\"space-between center\\\"><div class=\\\"logo\\\" layout=\\\"row\\\" \\nlayout-align=\\\"center center\\\"><img class=\\\"logo-image\\\" src=\\\"assets/images/logos/marca-HaibuSmart.png\\\" alt=\\\"logo\\\"></div>\\n<md-icon class=\\\"fold-toggle s18\\\" md-font-icon=\\\"icon-backburger\\\" hide show-gt-sm \\nng-click=\\\"vm.toggleMsNavigationFolded()\\\"></md-icon></md-toolbar><ms-navigation class=\\\"scrollable\\\" folded=\\\"vm.folded\\\" \\nms-scroll=\\\"vm.msScrollOptions\\\"></ms-navigation><div class=\\\"text-center footer\\\"><img class=\\\"logo-marca\\\" \\nsrc=\\\"assets/images/logos/marca-Luxmeter-Energy.png\\\" alt=\\\"\\\"><p class=\\\"marca\\\">© HaibuSmart | Haibu Group</p></div>\");\n$templateCache.put(\"app/toolbar/layouts/vertical-navigation/toolbar.html\",\"<div layout=\\\"row\\\" layout-align=\\\"start center\\\"><div layout=\\\"row\\\" layout-align=\\\"start center\\\" flex><md-button \\nid=\\\"navigation-toggle\\\" class=\\\"md-icon-button\\\" ng-click=\\\"vm.toggleSidenav(\\'navigation\\')\\\" hide-gt-sm \\naria-label=\\\"Toggle navigation\\\" translate translate-attr-aria-label=\\\"TOOLBAR.TOGGLE_NAVIGATION\\\"><md-icon \\nmd-font-icon=\\\"icon-menu\\\" class=\\\"icon\\\"></md-icon></md-button><ms-shortcuts></ms-shortcuts><div \\nclass=\\\"toolbar-separator\\\"></div><div class=\\\"pl-8\\\" ng-if=\\\"weather\\\" ng-if=\\\"weather\\\"><div \\nclass=\\\"h3 primary-text text-semi\\\">Hoy <img class=\\\"icon-weather\\\" \\nng-src=\\\"assets/images/weather/icon{{weather.icon_code}}.png\\\" alt=\\\"icon-weather\\\"></div></div><div class=\\\"pr-8\\\" \\nng-if=\\\"weather\\\"><div class=\\\"h3 primary-text\\\">{{weather.temp}}&deg;C {{weather.phrase_32char}}</div></div><div \\nclass=\\\"toolbar-separator-mini\\\" ng-if=\\\"weather\\\"></div><div class=\\\"pl-8\\\" ng-if=\\\"weather\\\"><img class=\\\"logo\\\" \\nsrc=\\\"assets/images/logos/The-Weather-Company-logo.svg\\\" alt=\\\"logo\\\"></div></div><div layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-progress-circular id=\\\"toolbar-progress\\\" ng-disabled=\\\"!$root.loadingProgress\\\" \\nclass=\\\"md-accent\\\" md-diameter=\\\"32\\\"></md-progress-circular><div class=\\\"toolbar-separator\\\"></div><md-menu-bar \\nid=\\\"user-menu\\\"><md-menu md-position-mode=\\\"left bottom\\\"><md-button class=\\\"user-button\\\" ng-click=\\\"$mdOpenMenu()\\\" \\naria-label=\\\"User settings\\\" translate translate-attr-aria-label=\\\"TOOLBAR.USER_SETTINGS\\\"><div layout=\\\"row\\\" \\nlayout-align=\\\"space-between center\\\"><div class=\\\"avatar-wrapper\\\"><img md-menu-align-target class=\\\"avatar\\\" \\nsrc=\\\"assets/images/avatars/profile.jpg\\\"><md-icon md-font-icon ng-class=\\\"vm.userStatus.icon\\\" \\nng-style=\\\"{\\'color\\': vm.userStatus.color }\\\" class=\\\"icon status s16\\\"></md-icon></div><span class=\\\"username\\\" hide \\nshow-gt-sm>{{vm.customer.firstName}} {{vm.customer.lastName}}</span><md-icon md-font-icon=\\\"icon-chevron-down\\\" \\nclass=\\\"icon s16\\\" hide-xs></md-icon></div></md-button><md-menu-content width=\\\"2\\\"><md-menu-item class=\\\"md-indent\\\" \\nui-sref=\\\"app.pages.profile\\\"><md-icon md-font-icon=\\\"icon-account\\\" class=\\\"icon\\\"></md-icon><md-button>Mi Perfil\\n</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class=\\\"md-indent\\\"><md-icon \\nmd-font-icon=\\\"icon-logout\\\" class=\\\"icon\\\"></md-icon><md-button ng-click=\\\"vm.logout()\\\">Salir</md-button></md-menu-item>\\n</md-menu-content></md-menu></md-menu-bar><div class=\\\"toolbar-separator\\\"></div></div></div>\");\n$templateCache.put(\"app/core/directives/ms-navigation/templates/horizontal.html\",\"<div class=\\\"navigation-toggle\\\" hide-gt-sm><md-button class=\\\"md-icon-button\\\" ng-click=\\\"vm.toggleHorizontalMobileMenu()\\\" \\naria-label=\\\"Toggle Mobile Navigation\\\"><md-icon md-font-icon=\\\"icon-menu\\\"></md-icon></md-button></div><ul \\nclass=\\\"horizontal\\\"><li ng-repeat=\\\"node in vm.navigation\\\" ms-navigation-horizontal-node=\\\"node\\\" \\nng-class=\\\"{\\'has-children\\': vm.hasChildren}\\\" ng-include=\\\"\\'navigation-horizontal-nested.html\\'\\\"></li></ul><script \\ntype=\\\"text/ng-template\\\" id=\\\"navigation-horizontal-nested.html\\\">\\n<div ms-navigation-horizontal-item layout=\\\"row\\\" ng-if=\\\"!vm.isHidden()\\\">\\n\\n        <div class=\\\"ms-navigation-horizontal-button\\\" ng-if=\\\"!node.uisref && node.title\\\"\\n             ng-class=\\\"{\\'active md-accent-bg md-accent-fg\\': vm.isActive}\\\">\\n            <i class=\\\"icon s18 {{node.icon}}\\\" ng-if=\\\"node.icon\\\"></i>\\n            <span class=\\\"title\\\" translate=\\\"{{node.translate}}\\\" flex>{{node.title}}</span>\\n            <span class=\\\"badge white-fg\\\" style=\\\"background: {{node.badge.color}}\\\" ng-if=\\\"node.badge\\\">{{node.badge.content}}</span>\\n            <i class=\\\"icon-chevron-right s18 arrow\\\" ng-if=\\\"vm.hasChildren\\\"></i>\\n        </div>\\n\\n        <a class=\\\"ms-navigation-horizontal-button\\\" ui-sref=\\\"{{node.uisref}}\\\" ui-sref-active=\\\"active md-accent-bg\\\"\\n           ng-class=\\\"{\\'active md-accent-bg md-accent-fg\\': vm.isActive}\\\"\\n           ng-if=\\\"node.uisref && node.title\\\">\\n            <i class=\\\"icon s18 {{node.icon}}\\\" ng-if=\\\"node.icon\\\"></i>\\n            <span class=\\\"title\\\" translate=\\\"{{node.translate}}\\\" flex>{{node.title}}</span>\\n            <span class=\\\"badge white-fg\\\" style=\\\"background: {{node.badge.color}}\\\" ng-if=\\\"node.badge\\\">{{node.badge.content}}</span>\\n            <i class=\\\"icon-chevron-right s18 arrow\\\" ng-if=\\\"vm.hasChildren\\\"></i>\\n        </a>\\n\\n    </div>\\n\\n    <ul ng-if=\\\"vm.hasChildren && !vm.isHidden()\\\">\\n        <li ng-repeat=\\\"node in node.children\\\" ms-navigation-horizontal-node=\\\"node\\\"\\n            ng-class=\\\"{\\'has-children\\': vm.hasChildren}\\\"\\n            ng-include=\\\"\\'navigation-horizontal-nested.html\\'\\\"></li>\\n    </ul>\\n</script>\");\n$templateCache.put(\"app/core/directives/ms-navigation/templates/vertical.html\",\"<ul><li ng-repeat=\\\"node in vm.navigation\\\" ms-navigation-node=\\\"node\\\" \\nng-class=\\\"{\\'collapsed\\': vm.collapsed, \\'has-children\\': vm.hasChildren}\\\" ng-include=\\\"\\'navigation-nested.html\\'\\\"></li></ul>\\n<script type=\\\"text/ng-template\\\" id=\\\"navigation-nested.html\\\">\\n<div ms-navigation-item layout=\\\"row\\\" ng-if=\\\"!vm.isHidden()\\\">\\n\\n        <div class=\\\"ms-navigation-button\\\" ng-if=\\\"!node.uisref && node.title\\\">\\n            <i class=\\\"icon s24 {{node.icon}}\\\" ng-if=\\\"node.icon\\\"></i>\\n            <span class=\\\"title\\\" translate=\\\"{{node.translate}}\\\" flex>{{node.title}}</span>\\n            <span class=\\\"badge white-fg\\\" ng-style=\\\"{\\'background\\': node.badge.color}\\\" ng-if=\\\"node.badge\\\">{{node.badge.content}}</span>\\n            <i class=\\\"icon-chevron-right s16 arrow\\\" ng-if=\\\"vm.collapsable && vm.hasChildren\\\"></i>\\n        </div>\\n\\n        <a class=\\\"ms-navigation-button\\\" ui-sref=\\\"{{node.uisref}}\\\" ui-sref-active=\\\"active md-accent-bg\\\"\\n           ng-if=\\\"node.uisref && node.title\\\">\\n            <i class=\\\"icon s24 {{node.icon}}\\\" ng-if=\\\"node.icon\\\"></i>\\n            <span class=\\\"title\\\" translate=\\\"{{node.translate}}\\\" flex>{{node.title}}</span>\\n            <span class=\\\"badge white-fg\\\" ng-style=\\\"{\\'background\\': node.badge.color}\\\" ng-if=\\\"node.badge\\\">{{node.badge.content}}</span>\\n            <i class=\\\"icon-chevron-right s16 arrow\\\" ng-if=\\\"vm.collapsable && vm.hasChildren\\\"></i>\\n        </a>\\n\\n\\n\\n    </div>\\n\\n\\n    <ul ng-if=\\\"vm.hasChildren && !vm.isHidden()\\\">\\n        <li ng-repeat=\\\"node in node.children\\\" ms-navigation-node=\\\"node\\\"\\n            ng-class=\\\"{\\'collapsed\\': vm.collapsed, \\'has-children\\': vm.hasChildren}\\\"\\n            ng-include=\\\"\\'navigation-nested.html\\'\\\"></li>\\n    </ul>\\n</script>\");\n$templateCache.put(\"app/main/pages/help/help-config/help-config.html\",\"<div id=\\\"help-config\\\" class=\\\"page-layout simple tabbed\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-informacion2-HaibuSmart\\\"></md-icon><span>\\nConfiguraciones</span></div></div></div><div class=\\\"content\\\" layout=\\\"column\\\"><md-tabs md-dynamic-height><md-tab \\nlabel=\\\"Configuracion con MQTT\\\"><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div \\nclass=\\\"h3 primary-text\\\">MQTT</div><p>\\nEs un protocolo de transporte de mensajería tipo Cliente Servidor de publicación y subscripción. Es utilizado por los nodos para comunicarse con la nube Iot. Se trata de un protocolo creado especialmente para su uso en el IoT, ya que su flujo de datos está optimizado para la reducción del tráfico de la red.\\n</p><p>\\nUtiliza un patrón de envío y suscripción de mensajes que provee una distribución de mensajes de uno a muchos y una separación de las aplicaciones. Su objetivo es ofrecer un servicio de publicación/suscripción a fuentes de datos de forma muy sencilla y pensada en implementaciones ligeras donde el HTTP y los servicios web resultan muy pesados.\\n</p></div></div><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nPara la conexión mediante MQTT de un dispositivo dentro de la nube puede utilizar uno de los tres siguientes puertos:\\n</div><p><span class=\\\"text-bold\\\">Puerto 1883</span>\\n: Se envían los datos de manera no segura. La información del dispositivo y las credenciales de autenticación se envía en texto plano.\\n</p><p><span class=\\\"text-bold\\\">Puerto 8883</span>\\n: Se envían los datos de manera segura. La conexión se encripta con TLS v1.2.</p><p><span class=\\\"text-bold\\\">Puerto 443\\n</span>: Puerto que se utiliza para WebSockets. La conexión es segura gracias a la encriptación de la conexión.</p>\\n</div></div><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nIdentificador del cliente MQTT</div><p>\\nCada nodo debe de autenticarse utilizando un ID de cliente en el siguiente formato</p><div class=\\\"source-code\\\" \\nlayout=\\\"column\\\"><div class=\\\"h3\\\">d:org_id:type_id:device_id</div></div><div><p><span class=\\\"text-bold\\\">d</span>\\n: Identifica que el cliente es un nodo.</p><p><span class=\\\"text-bold\\\">org_id</span>\\n: Representa la id de la organización. En este caso es <span class=\\\"text-bold\\\">w6ucey</span></p><p><span \\nclass=\\\"text-bold\\\">type_id</span>: es el identificador del tipo de nodo que se conecta.</p><p><span class=\\\"text-bold\\\">\\ndevice_id</span>: el id del nodo que diferencia al nodo entre todos los nodos.</p></div><div class=\\\"source-code\\\" \\nlayout=\\\"column\\\"><div class=\\\"h3\\\">Ejemplo: d:w6ucey:SmartParking:23232-2323-23</div></div></div></div><div \\nclass=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">Autenticación</div><p>\\nCada nodo debe de autenticarse utilizando un ID de cliente en el siguiente formato</p><div><p><span class=\\\"text-bold\\\">\\nNombre del usuario</span>: el nombre de usuario es “use-token-auth”.</p><p><span class=\\\"text-bold\\\">\\nClave de autentificación</span>: se utiliza la calve de autentificación creada al registrar un nodo</p></div></div>\\n</div><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nEnvió de mensajes</div><p>\\nPara que el dispositivo pueda enviar los mensajes a la nube, el cliente debe enviar los mensajes al siguiente topico.\\n</p><div class=\\\"source-code\\\" layout=\\\"column\\\"><div class=\\\"h3\\\">iot-2/evt/up/fmt/json</div></div></div></div><div \\nclass=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nFormato de los mensajes</div><p>\\nTodos los mensajes son enviados en formato JSON. Estos mensajes se deben enviar con el siguiente formato.</p><div \\nclass=\\\"source-code\\\" layout=\\\"column\\\"><div class=\\\"h3\\\">{\\\"d\\\" :{ \\\"id_variable\\\": \\\"valor\\\", \\\"id_variable2\\\": \\\"valor2\\\" } }</div>\\n</div></div></div></md-tab><md-tab label=\\\"Configuracion con HTTP 1.1\\\"><div class=\\\"card md-whiteframe-4dp\\\" \\nlayout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">HTTP(S)</div><p>\\nEs otra opción para poder conectar los nodos a la nube, el envío de eventos se hace mediante una API. Mediante el uso de la API los nodos pueden hacer diferentes peticiones, pero siempre utilizando cabeceras de autorización en los mensajes. En estas cabeceras deben contener las credenciales que autentifiquen al nodo. Además en la petición HTTP se debe especificar el tipo de contenido del mensaje, en este caso siempre serán cabeceras del tipo Application/json.\\n</p><p>\\nPor otro lado, no se debe de olvidar que este protocolo no está creado especialmente para el IoT, por lo que su consumo de batería al enviar los mensajes y el tamaño de los paquetes es bastante elevado, por lo cual siempre se recomienda conectar los nodos con el protocolo MQTT para así aprovechar los beneficios de este.\\n</p></div></div><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nAPI Rest</div><p>\\nPara que el dispositivo pueda enviar los mensajes a la plataforma se debe hacer una solicitud POST el endpoint con el siguiente formato:\\n</p><div class=\\\"source-code\\\" layout=\\\"column\\\"><div class=\\\"h3\\\">\\nhttps://org_id.messaging.internetofthings.ibmcloud.com/api/v0002/device/types/type_id/devices/device_id/events/up</div>\\n</div><div><p><span class=\\\"text-bold\\\">org_id</span>: Representa la id de la organización. En este caso es <span \\nclass=\\\"text-bold\\\">w6ucey</span></p><p><span class=\\\"text-bold\\\">type_id</span>\\n: es el identificador del tipo de nodo que se conecta.</p><p><span class=\\\"text-bold\\\">device_id</span>\\n: el id del nodo que diferencia al nodo entre todos los nodos.</p></div></div></div><div \\nclass=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">Autenticación</div><p>\\nTodas las solicitudes deben incluir una cabecera de autorización. La autenticación básica es el único método que se admite. Cuando un dispositivo realiza una solicitud HTTP a través de la API REST, serán necesarias las siguientes credenciales:\\n</p><div><p><span class=\\\"text-bold\\\">Nombre del usuario</span>: el nombre de usuario es “use-token-auth”.</p><p><span \\nclass=\\\"text-bold\\\">Clave de autentificación</span>: se utiliza la calve de autentificación creada al registrar un nodo\\n</p></div></div></div><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div \\nclass=\\\"h3 primary-text\\\">Formato de los mensajes</div><p>\\nTodos los mensajes son enviados en formato JSON. Estos mensajes se deben enviar con el siguiente formato.</p><div \\nclass=\\\"source-code\\\" layout=\\\"column\\\"><div class=\\\"h3\\\">{\\\"d\\\" :{ \\\"id_variable\\\": \\\"valor\\\", \\\"id_variable2\\\": \\\"valor2\\\" } }</div>\\n</div></div></div></md-tab><md-tab label=\\\"Configuracion con HTTP 1.0\\\"><div class=\\\"card md-whiteframe-4dp\\\" \\nlayout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">HTTP</div><p>\\nEs la opción menos recomendada y se ocupa cuando el nodo no tiene la capacidad de hacer peticiones en el estándar 1.1, el envío de eventos se hace mediante una API. Mediante el uso de la API los nodos pueden hacer diferentes peticiones.\\n</p></div></div><div class=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nAPI Rest</div><p>\\nPara que el dispositivo pueda enviar los mensajes a la plataforma se debe hacer una solicitud GET el endpoint con el siguiente formato:\\n</p><div class=\\\"source-code\\\" layout=\\\"column\\\"><div class=\\\"h3\\\">\\nhttps://middleware-haibu-smart.mybluemix.net/v1/type_id/device_id/up</div></div><div><p><span class=\\\"text-bold\\\">type_id\\n</span>: es el identificador del tipo de nodo que se conecta.</p><p><span class=\\\"text-bold\\\">device_id</span>\\n: el id del nodo que diferencia al nodo entre todos los nodos.</p></div></div></div><div \\nclass=\\\"card md-whiteframe-4dp\\\" layout=\\\"column\\\"><div layout=\\\"column\\\"><div class=\\\"h3 primary-text\\\">\\nFormato de los mensajes</div><p>Todos los mensajes son como parametros en el endpoint.</p><div class=\\\"source-code\\\" \\nlayout=\\\"column\\\"><div class=\\\"h3\\\">?id_variable=valor&id_variable2=valor2</div></div></div></div></md-tab></md-tabs></div>\\n</div>\");\n$templateCache.put(\"app/main/pages/help/help-units/help-units.html\",\"<div id=\\\"help-units\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-informacion2-HaibuSmart\\\"></md-icon><span>\\nTabla de sensores</span></div></div></div><div class=\\\"content\\\" scroll><md-card><md-toolbar \\nclass=\\\"md-table-toolbar md-default\\\"><div class=\\\"md-toolbar-tools\\\"><md-icon md-font-icon=\\\"icon-magnify\\\"></md-icon><form \\nflex name=\\\"vm.filter.form\\\"><input type=\\\"text\\\" ng-model=\\\"vm.query.filter\\\" placeholder=\\\"Buscar\\\"></form></div>\\n</md-toolbar><md-table-container><table md-table md-row-select=\\\"vm.options.rowSelection\\\" \\nmultiple=\\\"{{vm.options.multiSelect}}\\\" ng-model=\\\"vm.selected\\\"><thead md-head><tr md-row><th md-column>Sensor</th><th \\nmd-column>Nombre</th><th md-column>Unidad de medida</th></tr></thead><tbody md-body><tr md-row \\nng-repeat=\\\"sensor in vm.sensors | filter:vm.query.filter | limitTo: vm.query.limit: (vm.query.page - 1) * vm.query.limit\\\">\\n<td md-cell>{{sensor.id}}</td><td md-cell>{{sensor.name}}</td><td md-cell>{{sensor.symbol}}</td></tr></tbody></table>\\n</md-table-container><md-table-pagination md-label=\\\"{page: \\'Página:\\', rowsPerPage: \\'Filas por página:\\', of: \\'de\\'}\\\" \\nmd-limit=\\\"vm.query.limit\\\" md-limit-options=\\\"[5, 10, 15]\\\" md-page=\\\"vm.query.page\\\" md-total=\\\"{{vm.sensors.length}}\\\" \\nmd-page-select md-on-paginate=\\\"vm.getEvents\\\"></md-table-pagination></md-card></div></div>\");\n$templateCache.put(\"app/main/pages/nodes/nodes-create/nodes-create.html\",\"<div id=\\\"nodes-create\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-sensor2-HaibuSmart\\\"></md-icon><span>\\nRegistrar Nodo</span></div></div></div><div class=\\\"content\\\"><ms-form-wizard flex><md-tabs md-dynamic-height \\nmd-selected=\\\"msWizard.selectedIndex\\\" md-center-tabs=\\\"true\\\"><md-tab><md-tab-label><span \\nclass=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep1.$invalid\\\">1\\n</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep1.$valid\\\"><i class=\\\"icon-check s16\\\"></i>\\n </span><span class=\\\"ms-form-wizard-step-text\\\">Tipo de nodo</span></span></md-tab-label><md-tab-body><form \\nname=\\\"wizardStep1\\\" class=\\\"md-inline-form\\\" ms-form-wizard-form novalidate><p>Seleccione el tipo de nodo .</p>\\n<md-input-container class=\\\"md-block\\\"><label>Tipo de nodo</label><md-select name=\\\"typeId\\\" \\nng-model=\\\"vm.registerForm.typeId\\\" required><md-option ng-repeat=\\\"types in  vm.devicetypes\\\" value=\\\"{{types.id}}\\\">\\n{{types.id}}</md-option></md-select><div ng-messages=\\\"wizardStep1.typeId.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"required\\\"><span>El tipo de nodo es requerido.</span></div></div></md-input-container></form></md-tab-body>\\n</md-tab><md-tab ng-disabled=\\\"wizardStep1.$invalid\\\"><md-tab-label><span class=\\\"ms-form-wizard-step-label\\\"><span \\nclass=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep2.$invalid\\\">2</span> <span \\nclass=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep2.$valid\\\"><i class=\\\"icon-check s16\\\"></i> </span><span \\nclass=\\\"ms-form-wizard-step-text\\\">Información</span></span></md-tab-label><md-tab-body><form name=\\\"wizardStep2\\\" \\nms-form-wizard-form novalidate><div class=\\\"form-title\\\"></div><p>El <span class=\\\"text-bold\\\">Nombre del nodo</span>\\n es la única información necesaria</p><div layout=\\\"column\\\" layout-gt-xs=\\\"row\\\" flex><md-input-container flex=\\\"100\\\" \\nflex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"vm.registerForm.name\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\s]{1,36}$/\\\" maxlength=\\\"36\\\" placeholder=\\\"Nombre del nodo\\\" required><div \\nng-messages=\\\"wizardStep2.name.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nDebe especificar el nombre para su nodo.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nEl nombre del nodo no puede tener mas de 36 caracteres.</span></div></div></md-input-container><md-input-container \\nflex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"manufacturer\\\" ng-model=\\\"vm.registerForm.deviceInfo.manufacturer\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" placeholder=\\\"Fabricante\\\"><div \\nng-messages=\\\"wizardStep2.manufacturer.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"maxlength\\\"><span>\\nEl fabricante no puede tener mas de 80 caracteres.</span></div></div></md-input-container></div><div layout=\\\"column\\\" \\nlayout-gt-xs=\\\"row\\\" flex><md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"serialNumber\\\" \\nng-model=\\\"vm.registerForm.deviceInfo.serialNumber\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" \\nplaceholder=\\\"Número de serie\\\"><div ng-messages=\\\"wizardStep2.serialNumber.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"maxlength\\\"><span>El número de serie no puede tener mas de 80 caracteres.</span></div></div>\\n</md-input-container><md-input-container md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"model\\\" \\nng-model=\\\"vm.registerForm.deviceInfo.model\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" \\nplaceholder=\\\"Modelo\\\"><div ng-messages=\\\"wizardStep2.model.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"maxlength\\\"><span>\\nEl modelo no puede tener mas de 80 caracteres.</span></div></div></md-input-container></div><div layout=\\\"column\\\" \\nlayout-gt-xs=\\\"row\\\" flex><md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"deviceClass\\\" \\nng-model=\\\"vm.registerForm.deviceInfo.deviceClass\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" \\nplaceholder=\\\"Clase\\\"><div ng-messages=\\\"wizardStep2.deviceClass.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"maxlength\\\"><span>\\nLa clase no puede tener mas de 80 caracteres.</span></div></div></md-input-container><md-input-container \\nmd-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"description\\\" \\nng-model=\\\"vm.registerForm.deviceInfo.description\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" \\nplaceholder=\\\"Descripción\\\"><div ng-messages=\\\"wizardStep2.description.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"maxlength\\\">\\n<span>La descripción no puede tener mas de 80 caracteres.</span></div></div></md-input-container></div><div \\nlayout=\\\"column\\\" layout-gt-xs=\\\"row\\\" flex><md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" \\nname=\\\"fwVersion\\\" ng-model=\\\"vm.registerForm.deviceInfo.fwVersion\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" \\nmaxlength=\\\"80\\\" placeholder=\\\"Versión de firmware\\\"><div ng-messages=\\\"wizardStep2.fwVersion.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"maxlength\\\"><span>La versión de firmware no puede tener mas de 80 caracteres.</span></div></div>\\n</md-input-container><md-input-container md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" \\nname=\\\"hwVersion\\\" ng-model=\\\"vm.registerForm.deviceInfo.hwVersion\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" \\nmaxlength=\\\"80\\\" placeholder=\\\"Versión de hardware\\\"><div ng-messages=\\\"wizardStep2.hwVersion.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"maxlength\\\"><span>La versión de hardware no puede tener mas de 80 caracteres.</span></div></div>\\n</md-input-container></div></form></md-tab-body></md-tab><md-tab \\nng-disabled=\\\"wizardStep1.$invalid || wizardStep2.$invalid\\\"><md-tab-label><span class=\\\"ms-form-wizard-step-label\\\"><span \\nclass=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep3.$invalid\\\">3</span> <span \\nclass=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep3.$valid\\\"><i class=\\\"icon-check s16\\\"></i> </span><span \\nclass=\\\"ms-form-wizard-step-text\\\">Seguridad</span></span></md-tab-label><md-tab-body><form name=\\\"wizardStep3\\\" \\nms-form-wizard-form novalidate><p>\\nTiene dos opciones; la señal de autenticación generada automáticamente y la señal de autenticación proporcionada.</p>\\n<md-input-container class=\\\"md-block\\\"><input type=\\\"text\\\" name=\\\"authToken\\\" ng-model=\\\"vm.registerForm.authToken\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\?\\\\@\\\\+\\\\*\\\\!\\\\&\\\\(\\\\)]*$/\\\" maxlength=\\\"36\\\" minlength=\\\"8\\\" \\nplaceholder=\\\"Señal de autenticación (opcional)\\\"><div ng-messages=\\\"wizardStep3.authToken.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"pattern\\\">\\nLa señal de autenticación puede contener solo caracteres alfanuméricos y los siguientes caracteres especiales: guión ( - ), guión bajo ( _ ), punto de exclamación ( ! ), ampersand ( & ), arroba ( @ ), signo de interrogación ( ? ), asterisco ( * ), signo más ( + ), punto ( . ) o los paréntesis izquierdo y derecho.\\n</div><div ng-message=\\\"minlength\\\"><span>La señal de autenticación debe tener como mínimo 8 caracteres de longitud.\\n</span></div><div ng-message=\\\"maxlength\\\"><span>\\nLa señal de autenticación debe tener como máximo 36 caracteres de longitud.</span></div></div></md-input-container>\\n</form></md-tab-body></md-tab><md-tab \\nng-disabled=\\\"wizardStep1.$invalid || wizardStep2.$invalid || wizardStep3.$invalid\\\"><md-tab-label><span \\nclass=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep4.$invalid\\\">4\\n</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep4.$valid\\\"><i class=\\\"icon-check s16\\\"></i>\\n </span><span class=\\\"ms-form-wizard-step-text\\\">Geolocalización</span></span></md-tab-label><md-tab-body><form \\nname=\\\"wizardStep4\\\" ms-form-wizard-form novalidate><div class=\\\"form-title\\\">Seleccione la geolocalización de su nodo.\\n</div><md-input-container class=\\\"md-block\\\"><ui-gmap-google-map options=\\\"vm.map.options\\\" center=\\\"vm.map.center\\\" \\nzoom=\\\"vm.map.zoom\\\"><ui-gmap-marker coords=\\\"vm.map.center\\\" options=\\\"vm.options\\\" idkey=\\\"1\\\"></ui-gmap-marker>\\n</ui-gmap-google-map></md-input-container></form></md-tab-body></md-tab><md-tab \\nng-disabled=\\\"wizardStep1.$invalid || wizardStep2.$invalid || wizardStep3.$invalid || wizardStep4.$invalid\\\">\\n<md-tab-label><span class=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" \\nng-if=\\\"wizardStep5.$invalid\\\">5</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep5.$valid\\\">\\n<i class=\\\"icon-check s16\\\"></i> </span><span class=\\\"ms-form-wizard-step-text\\\">Resumen</span></span></md-tab-label>\\n<md-tab-body><form name=\\\"wizardStep5\\\" ms-form-wizard-form novalidate><p>\\nCompruebe que toda la información enviada para este nodo es correcta antes de añadirlo.</p><div \\nclass=\\\"preview layout-align-center-stretch layout-column\\\" flex><div class=\\\"md-caption mb-8\\\">Tipo de nodo</div>\\n{{vm.registerForm.typeId}}</div><div class=\\\"preview layout-align-center-stretch layout-column\\\" flex><div \\nclass=\\\"md-caption mb-8\\\">Nombre del nodo</div>{{vm.registerForm.name}}</div><div \\nclass=\\\"preview layout-align-center-stretch layout-column\\\" flex><div class=\\\"md-caption mb-8\\\">Señal de autenticación\\n</div>{{vm.registerForm.authToken || \\\"Se generará\\\"}}</div><div \\nclass=\\\"preview layout-align-center-stretch layout-column\\\" flex><div class=\\\"md-caption mb-8\\\">Geolocalización</div>\\nLatitud: {{vm.map.center.latitude}}<br>Longitud: {{vm.map.center.longitude}}</div></form></md-tab-body></md-tab>\\n</md-tabs><div class=\\\"navigation\\\" flex layout=\\\"row\\\" layout-align=\\\"center center\\\"><md-button \\nclass=\\\"md-raised md-accent\\\" ng-click=\\\"msWizard.previousStep()\\\" ng-disabled=\\\"msWizard.isFirstStep()\\\">Atrás</md-button>\\n<div class=\\\"steps\\\"><span ng-repeat=\\\"form in msWizard.forms\\\" \\nng-class=\\\"{\\'selected md-accent-bg\\':msWizard.selectedIndex === $index}\\\"></span></div><md-button \\nclass=\\\"md-raised md-accent\\\" ng-click=\\\"msWizard.nextStep()\\\" ng-hide=\\\"msWizard.isLastStep()\\\" \\nng-disabled=\\\"msWizard.currentStepInvalid()\\\">Siguiente</md-button><md-button class=\\\"md-raised md-accent\\\" \\nng-click=\\\"vm.sendForm($event)\\\" ng-show=\\\"msWizard.isLastStep()\\\" ng-disabled=\\\"msWizard.formsIncomplete()\\\">Registrar\\n</md-button></div></ms-form-wizard></div></div>\");\n$templateCache.put(\"app/main/pages/nodes/nodes-list/nodes-create.html\",\"<md-dialog class=\\\"nodes-create\\\"><md-toolbar class=\\\"md-accent\\\" layout=\\\"column\\\"><div class=\\\"md-toolbar-tools\\\" \\nlayout=\\\"row\\\" layout-align=\\\"space-between center\\\"><span class=\\\"title\\\">{{vm.title}}</span><md-button \\nclass=\\\"md-icon-button\\\" ng-click=\\\"vm.cancel()\\\" aria-label=\\\"Close dialog\\\"><md-icon md-font-icon=\\\"icon-close\\\"></md-icon>\\n</md-button></div></md-toolbar><md-dialog-content><ms-form-wizard flex><md-tabs md-dynamic-height \\nmd-selected=\\\"msWizard.selectedIndex\\\" md-center-tabs=\\\"true\\\"><md-tab><md-tab-label><span \\nclass=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep1.$invalid\\\">1\\n</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep1.$valid\\\">1 </span><span \\nclass=\\\"ms-form-wizard-step-text\\\">Tipo</span></span></md-tab-label><md-tab-body><form name=\\\"wizardStep1\\\" \\nclass=\\\"md-inline-form\\\" ms-form-wizard-form novalidate><p class=\\\"text-bold\\\">1. Id del nodo.</p><div layout=\\\"column\\\">\\n<md-input-container flex=\\\"100\\\"><label>Seleccione el tipo de nodo</label><input name=\\\"typeId\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\s]{1,36}$/\\\" maxlength=\\\"36\\\" minlength=\\\"1\\\" placeholder=\\\"Tipo de nodo\\\" \\nng-model=\\\"vm.device.typeId\\\" required ng-disabled=\\\"!vm.newDevice\\\"><div ng-messages=\\\"wizardStep1.typeId.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>Debe especificar la tipo del nodo.</span></div><div \\nng-message=\\\"minlength\\\"><span>El tipo del nodo no puede tener menos de 1 caracteres.</span></div><div \\nng-message=\\\"maxlength\\\"><span>El tipo del nodo no puede tener más de 36 caracteres.</span></div></div>\\n</md-input-container></div></form></md-tab-body></md-tab><md-tab ng-disabled=\\\"wizardStep1.$invalid\\\"><md-tab-label><span\\n class=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep2.$invalid\\\">2\\n</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep2.$valid\\\">2 </span><span \\nclass=\\\"ms-form-wizard-step-text\\\">Información</span></span></md-tab-label><md-tab-body><form name=\\\"wizardStep2\\\" \\nms-form-wizard-form novalidate><div class=\\\"form-title\\\"></div><p class=\\\"text-bold\\\">2. Información.</p><div \\nlayout=\\\"column\\\" layout-gt-xs=\\\"row\\\" flex><md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"name\\\" \\nng-model=\\\" vm.device.name\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\s]{1,36}$/\\\" maxlength=\\\"36\\\" placeholder=\\\"Nombre del nodo\\\" \\nrequired><div ng-messages=\\\"wizardStep2.name.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>\\nDebe especificar el nombre para su nodo.</span></div><div ng-message=\\\"maxlength\\\"><span>\\nEl nombre del nodo no puede tener mas de 36 caracteres.</span></div></div></md-input-container><md-input-container \\nflex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"manufacturer\\\" ng-model=\\\" vm.device.deviceInfo.manufacturer\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" placeholder=\\\"Fabricante\\\"><div \\nng-messages=\\\"wizardStep2.manufacturer.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"maxlength\\\"><span>\\nEl fabricante no puede tener mas de 80 caracteres.</span></div></div></md-input-container></div><div layout=\\\"column\\\" \\nlayout-gt-xs=\\\"row\\\" flex><md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"serialNumber\\\" \\nng-model=\\\" vm.device.deviceInfo.serialNumber\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" \\nplaceholder=\\\"Número de serie\\\"><div ng-messages=\\\"wizardStep2.serialNumber.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"maxlength\\\"><span>El número de serie no puede tener mas de 80 caracteres.</span></div></div>\\n</md-input-container><md-input-container md-input-container flex=\\\"100\\\" flex-gt-xs=\\\"50\\\"><input type=\\\"text\\\" name=\\\"model\\\" \\nng-model=\\\" vm.device.deviceInfo.model\\\" ng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.]{1,36}$/\\\" maxlength=\\\"80\\\" placeholder=\\\"Modelo\\\">\\n<div ng-messages=\\\"wizardStep2.model.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"maxlength\\\"><span>\\nEl modelo no puede tener mas de 80 caracteres.</span></div></div></md-input-container></div></form></md-tab-body>\\n</md-tab><md-tab ng-if=\\\"vm.newDevice\\\" ng-disabled=\\\"wizardStep1.$invalid || wizardStep2.$invalid\\\"><md-tab-label><span \\nclass=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep3.$invalid\\\">3\\n</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep3.$valid\\\">3 </span><span \\nclass=\\\"ms-form-wizard-step-text\\\">Seguridad</span></span></md-tab-label><md-tab-body><form name=\\\"wizardStep3\\\" \\nms-form-wizard-form novalidate><p class=\\\"text-bold\\\">3. Seguridad.</p><div class=\\\"h4 text-bold\\\">\\nTiene dos opciones; la señal de autenticación generada automáticamente y la señal de autenticación generada.</div>\\n<md-input-container class=\\\"md-block\\\"><input type=\\\"text\\\" name=\\\"authToken\\\" ng-model=\\\" vm.device.authToken\\\" \\nng-pattern=\\\"/^[A-Za-z0-9\\\\-\\\\_\\\\.\\\\?\\\\@\\\\+\\\\*\\\\!\\\\&\\\\(\\\\)]*$/\\\" maxlength=\\\"36\\\" minlength=\\\"8\\\" \\nplaceholder=\\\"Autenticación automática o generada\\\"><div ng-messages=\\\"wizardStep3.authToken.$error\\\" role=\\\"alert\\\"><div \\nng-message=\\\"pattern\\\">\\nLa autenticación puede contener solo caracteres alfanuméricos y los siguientes caracteres especiales: guión ( - ), guión bajo ( _ ), punto de exclamación ( ! ), ampersand ( & ), arroba ( @ ), signo de interrogación ( ? ), asterisco ( * ), signo más ( + ), punto ( . ) o los paréntesis izquierdo y derecho.\\n</div><div ng-message=\\\"minlength\\\"><span>La señal de autenticación debe tener como mínimo 8 caracteres de longitud.\\n</span></div><div ng-message=\\\"maxlength\\\"><span>\\nLa señal de autenticación debe tener como máximo 36 caracteres de longitud.</span></div></div></md-input-container>\\n</form></md-tab-body></md-tab><md-tab \\nng-disabled=\\\"wizardStep1.$invalid || wizardStep2.$invalid || wizardStep3.$invalid\\\"><md-tab-label><span \\nclass=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep4.$invalid\\\">\\n{{vm.newDevice?\\\"4\\\":\\\"3\\\"}}</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" ng-if=\\\"wizardStep4.$valid\\\">\\n{{vm.newDevice?\\\"4\\\":\\\"3\\\"}} </span><span class=\\\"ms-form-wizard-step-text\\\">Geolocalización</span></span></md-tab-label>\\n<md-tab-body><form name=\\\"wizardStep4\\\" ms-form-wizard-form novalidate><p class=\\\"text-bold\\\">\\n{{vm.newDevice?\\\"4\\\":\\\"3\\\"}}. Geolocalización.</p><div class=\\\"h4 text-bold\\\">\\nSeleccione la geolocalicación de su nodo, puede posicionar el marker con doble click o arrastrandolo a su posición.\\n</div><script type=\\\"text/ng-template\\\" id=\\\"searchbox.tpl.html\\\">\\n<input class=\\\"searchbox \\\"type=\\\"text\\\"  \\n                                       \tplaceholder=\\\"Ubicación\\\"\\n                                       >\\n</script><md-input-container class=\\\"md-block\\\"><div class=\\\"searchbox-container\\\" id=\\\"searchbox-container\\\"></div>\\n<ui-gmap-google-map options=\\\"vm.map.options\\\" center=\\\"vm.map.center\\\" zoom=\\\"vm.map.zoom\\\" events=\\\"vm.map.events\\\">\\n<ui-gmap-search-box ng-if=\\\"vm.searchbox.events\\\" template=\\\"vm.searchbox.template\\\" events=\\\"vm.searchbox.events\\\" \\nparentdiv=\\\"\\'searchbox-container\\'\\\"></ui-gmap-search-box><ui-gmap-marker coords=\\\"vm.device.location\\\" \\noptions=\\\"vm.marker.options\\\" idkey=\\\"1\\\"></ui-gmap-marker></ui-gmap-google-map></md-input-container></form></md-tab-body>\\n</md-tab><md-tab \\nng-disabled=\\\"wizardStep1.$invalid || wizardStep2.$invalid || wizardStep3.$invalid || wizardStep4.$invalid\\\">\\n<md-tab-label><span class=\\\"ms-form-wizard-step-label\\\"><span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" \\nng-if=\\\"wizardStep5.$invalid\\\">{{vm.newDevice?\\\"5\\\":\\\"4\\\"}}</span> <span class=\\\"ms-form-wizard-step-number md-accent-bg\\\" \\nng-if=\\\"wizardStep5.$valid\\\">{{vm.newDevice?\\\"5\\\":\\\"4\\\"}} </span><span class=\\\"ms-form-wizard-step-text\\\">Resumen</span></span>\\n</md-tab-label><md-tab-body><form name=\\\"wizardStep5\\\" ms-form-wizard-form novalidate><p>\\n{{vm.newDevice?\\\"5\\\":\\\"4\\\"}}. Compruebe que toda la información para este nodo está correcta antes de {{vm.newDevice?\\\"añadirlo\\\":\\\"actualizarlo\\\"}}.\\n</p><div class=\\\"mb-8\\\" flex><div class=\\\"text-bold\\\">Id del nodo</div><div class=\\\"h4\\\">{{ vm.device.deviceId}}</div></div>\\n<div class=\\\"mb-8\\\" flex><div class=\\\"text-bold\\\">Tipo de nodo</div><div class=\\\"h4\\\">{{ vm.device.typeId}}</div></div><div \\nclass=\\\"mb-8\\\" flex><div class=\\\"text-bold\\\">Nombre del nodo</div><div class=\\\"h4\\\">{{ vm.device.name}}</div></div><div \\nclass=\\\"mb-8\\\" flex ng-if=\\\" vm.device.deviceInfo.manufacturer\\\"><div class=\\\"text-bold\\\">Fabricante</div><div class=\\\"h4\\\">\\n{{ vm.device.deviceInfo.manufacturer}}</div></div><div class=\\\"mb-8\\\" flex ng-if=\\\" vm.device.deviceInfo.serialNumber\\\">\\n<div class=\\\"text-bold\\\">Número de serie</div><div class=\\\"h4\\\">{{ vm.device.deviceInfo.serialNumber}}</div></div><div \\nclass=\\\"mb-8\\\" flex ng-if=\\\" vm.device.deviceInfo.model\\\"><div class=\\\"text-bold\\\">Modelo</div><div class=\\\"h4\\\">\\n{{ vm.device.deviceInfo.model}}</div></div><div class=\\\"mb-8\\\" flex ng-if=\\\"vm.newDevice\\\"><div class=\\\"text-bold\\\">\\nSeñal de autenticación</div><div class=\\\"h4\\\">{{ vm.device.authToken || \\\"Se generará\\\"}}</div></div><div class=\\\"mb-8\\\" \\nflex><div class=\\\"text-bold\\\">Geolocalización</div><div class=\\\"h4\\\">\\nCoordenadas: {{vm.device.location.latitude}} , {{vm.device.location.longitude}}</div></div></form></md-tab-body>\\n</md-tab></md-tabs><div class=\\\"navigation\\\" flex layout=\\\"row\\\" layout-align=\\\"center center\\\"><md-button \\nclass=\\\"md-raised md-accent\\\" ng-click=\\\"msWizard.previousStep()\\\" ng-disabled=\\\"msWizard.isFirstStep()\\\">Atrás</md-button>\\n<div class=\\\"steps\\\"><span ng-repeat=\\\"form in msWizard.forms\\\" \\nng-class=\\\"{\\'selected md-accent-bg\\':msWizard.selectedIndex === $index}\\\"></span></div><md-button \\nclass=\\\"md-raised md-accent\\\" ng-click=\\\"msWizard.nextStep()\\\" ng-hide=\\\"msWizard.isLastStep()\\\" \\nng-disabled=\\\"msWizard.currentStepInvalid()\\\">Siguiente</md-button><md-button class=\\\"md-raised md-accent\\\" \\nng-if=\\\"vm.newDevice\\\" ng-click=\\\"vm.register($event)\\\" ng-show=\\\"msWizard.isLastStep()\\\" \\nng-disabled=\\\"msWizard.formsIncomplete()\\\">Registrar</md-button><md-button class=\\\"md-raised md-accent\\\" \\nng-if=\\\"!vm.newDevice\\\" ng-click=\\\"vm.update($event)\\\" ng-show=\\\"msWizard.isLastStep()\\\" \\nng-disabled=\\\"msWizard.formsIncomplete() \\\">Actualizar</md-button></div></ms-form-wizard></md-dialog-content></md-dialog>\");\n$templateCache.put(\"app/main/pages/nodes/nodes-list/nodes-list.html\",\"<div id=\\\"nodes-list\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-senal2-HaibuSmart\\\"></md-icon><span>Nodos</span>\\n</div></div><div layout=\\\"row\\\" layout-align=\\\"start center\\\"><md-button \\nclass=\\\"md-raised md-secondary smart-button-outline\\\" ng-click=\\\"vm.dialogDevice($event)\\\"><span>Registrar Kit</span>\\n</md-button></div></div><div class=\\\"content\\\"><div layout=\\\"row\\\" flex=\\\"100\\\" layout-wrap><div layout=\\\"column\\\" flex=\\\"100\\\" \\nflex-gt-xs=\\\"50\\\" flex-gt-md=\\\"25\\\" layout=\\\"column\\\" flex=\\\"100\\\" flex-gt-xs=\\\"50\\\" flex-gt-md=\\\"25\\\" \\nng-repeat=\\\"device in vm.devices \\\"><div class=\\\"white-bg m-8\\\"><md-list-item class=\\\"md-2-line\\\" ng-if=\\\"!device.loadEvent\\\">\\n<div class=\\\"md-list-item-text text\\\" layout=\\\"column\\\"><h3 class=\\\"h4 pt-16 text-semi\\\">{{device.name}}</h3><h4 class=\\\"h6\\\">\\n{{device.event.data.length?\\\"Última actualización\\\":\\\"Sin registros\\\"}}<p class=\\\"h5 text-semi\\\" ng-if=\\\"device.event.data\\\">\\n<span am-time-ago=\\\"device.event.timestamp\\\"></span></p></h4></div><md-menu class=\\\"pt-16\\\"><md-button \\nclass=\\\"md-icon-button\\\" ng-click=\\\"$mdOpenMenu()\\\" md-menu-origin md-menu-align-target aria-label=\\\"Options\\\"><md-icon \\nmd-font-icon=\\\"icon-dots-vertical\\\" class=\\\"icon\\\"></md-icon></md-button><md-menu-content width=\\\"3\\\"><md-menu-item>\\n<md-button ng-click=\\\"vm.refreshLastEvent($event,device)\\\"><md-icon md-font-icon=\\\"icono-refrescar-HaibuSmart\\\" \\nclass=\\\"icon\\\"></md-icon>Refrescar</md-button></md-menu-item><md-menu-item ng-if=\\\"!device.isFollow\\\"><md-button \\nng-click=\\\"vm.config($event,device)\\\"><md-icon md-font-icon=\\\"icon-share\\\" class=\\\"icon\\\"></md-icon>Configuración</md-button>\\n</md-menu-item><md-menu-item><md-button ng-click=\\\"vm.unregister($event,device)\\\"><md-icon \\nmd-font-icon=\\\"icono-sin-HaibuSmart\\\" class=\\\"icon\\\"></md-icon>Eliminar</md-button></md-menu-item><md-menu-item><md-button \\nng-click=\\\"vm.dialogDevice($event,device)\\\"><md-icon md-font-icon=\\\"icono-engranaje2-HaibuSmart\\\" class=\\\"icon\\\"></md-icon>\\nEditar</md-button></md-menu-item></md-menu-content></md-menu></md-list-item><div ng-if=\\\"!device.loadEvent\\\"><div \\nclass=\\\"pb-8\\\" layout=\\\"column\\\" layout-align=\\\"center center\\\" ng-if=\\\"device.event.data.length\\\"><div \\nclass=\\\"text-center font-size-62 line-height-62 primary-text font-weight-400 text-semi\\\">\\n{{device.event.data[0].value | number : 1}}{{device.event.data[0].id| parseUnits:vm.sensors:true}}</div><div \\nclass=\\\"h1 text-center text-bold\\\"><span>{{device.event.data[0].id| parseUnits:vm.sensors}}</span><md-icon \\nclass=\\\"animated infinite pulse {{device.event.timestamp | colorState:device.event.data[0].alert }}\\\" \\nmd-font-icon=\\\"icon-brightness-1\\\"></md-icon></div></div><div class=\\\"text-center pb-8\\\"><md-button \\nclass=\\\"md-raised md-secondary smart-button\\\" ng-click=\\\"vm.detalle($event,device)\\\">Ver Detalle</md-button></div></div>\\n<div layout=\\\"row\\\" class=\\\"p-16\\\" layout-align=\\\"space-around\\\" ng-if=\\\"device.loadEvent\\\"><md-progress-circular \\nmd-mode=\\\"indeterminate\\\" md-diameter=\\\"90\\\"></md-progress-circular></div></div></div></div></div></div>\");\n$templateCache.put(\"app/main/pages/rules/rules-create/rules-create.html\",\"<div id=\\\"rules-create\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-medir2-HaibuSmart\\\"></md-icon><span>\\n{{vm.isEdit?\\\"Editar Regla\\\":\\\"Crear Regla\\\"}}</span></div></div><div layout=\\\"row\\\" layout-align=\\\"start center\\\"><md-button \\nng-if=\\\"vm.isEdit\\\" class=\\\"light\\\" ng-click=\\\"vm.deleteRule($event)\\\"><span>Eliminar Regla</span></md-button></div></div>\\n<div class=\\\"content\\\"><md-card><form name=\\\"ruleForm\\\" class=\\\"md-inline-form\\\" novalidate><md-toolbar class=\\\"md-accent\\\">\\n<div class=\\\"md-toolbar-tools\\\" layout=\\\"row\\\" layout-align=\\\"space-between center\\\"><h4 class=\\\"title\\\"><span>\\nInformacion Básica</span></h4></div></md-toolbar><div class=\\\"p-16\\\"><md-input-container class=\\\"md-block\\\"><label>Nombre\\n</label><input name=\\\"name\\\" ng-model=\\\"vm.rule.name\\\" type=\\\"text\\\" required><div ng-messages=\\\"ruleForm.name.$error\\\" \\nrole=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El nombre es requerido.</span></div></div></md-input-container>\\n<md-input-container class=\\\"md-block\\\"><label>Descripción</label><input name=\\\"description\\\" \\nng-model=\\\"vm.rule.description\\\" type=\\\"text\\\"></md-input-container><md-input-container class=\\\"md-block\\\"><label>\\nSe aplicará en el nodo</label><md-select name=\\\"deviceId\\\" ng-model=\\\"vm.rule.device\\\" type=\\\"text\\\" \\nng-change=\\\"vm.changeDevice()\\\" required ng-model-options=\\\"{trackBy: \\'$value.deviceId\\'}\\\"><md-option \\nng-repeat=\\\"device in  vm.devices\\\" ng-value=\\\"{{device}}\\\">{{device.name}}</md-option></md-select></md-input-container>\\n</div></form></md-card><md-card class=\\\"mt-16\\\" ng-if=\\\"vm.rule.device\\\"><form name=\\\"conditionForm\\\" class=\\\"md-inline-form\\\" \\nnovalidate><md-toolbar class=\\\"md-accent\\\"><div class=\\\"md-toolbar-tools\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between center\\\"><h4 class=\\\"title\\\"><span>Condición</span></h4></div></md-toolbar><div class=\\\"p-16\\\">\\n<md-input-container class=\\\"md-block\\\"><label>Propiedad</label><md-select name=\\\"property\\\" \\nng-model=\\\"vm.condition.property\\\" type=\\\"text\\\" required><md-option ng-repeat=\\\"data in  vm.rule.device.event.data\\\" \\nvalue=\\\"{{data.id}}\\\">{{data.id}}</md-option></md-select></md-input-container><md-input-container class=\\\"md-block\\\">\\n<label>Operación</label><md-select name=\\\"operation\\\" ng-model=\\\"vm.condition.operation\\\" type=\\\"text\\\" required><md-option \\nng-repeat=\\\"operation in  vm.operations\\\" value=\\\"{{operation}}\\\">{{operation}}</md-option></md-select>\\n</md-input-container><md-input-container class=\\\"md-block\\\"><label>Comprar con</label><md-select name=\\\"comparison\\\" \\nng-model=\\\"vm.condition.comparison\\\" type=\\\"text\\\" required><md-option ng-repeat=\\\"comparison in  vm.comparisons\\\" \\nvalue=\\\"{{comparison.id}}\\\">{{comparison.text}}</md-option></md-select></md-input-container><md-input-container \\nclass=\\\"md-block\\\" ng-if=\\\"vm.condition.comparison == \\'property\\'\\\"><label>Propiedad</label><md-select \\nname=\\\"propertyComparison\\\" ng-model=\\\"vm.condition.propertyComparison\\\" type=\\\"text\\\" required><md-option \\nng-repeat=\\\"data in  vm.rule.device.event.data\\\" value=\\\"{{data.id}}\\\">{{data.id}}</md-option></md-select>\\n</md-input-container><md-input-container class=\\\"md-block\\\" ng-if=\\\"vm.condition.comparison == \\'static\\'\\\"><label>Valor\\n</label><input name=\\\"propertyComparison\\\" ng-model=\\\"vm.condition.propertyComparison\\\" type=\\\"number\\\" required><div \\nng-messages=\\\"propertyComparison.value.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El valor es requerido.\\n</span></div></div></md-input-container><md-button type=\\\"submit\\\" ng-click=\\\"vm.saveRule($event)\\\" \\nclass=\\\"md-raised md-secondary smart-button submit-button\\\" ng-disabled=\\\"conditionForm.$invalid  || ruleForm.$invalid \\\">\\nGUARDAR</md-button></div></form></md-card></div></div>\");\n$templateCache.put(\"app/main/pages/rules/rules-list/rules-list.html\",\"<div id=\\\"ruler-list\\\" class=\\\"page-layout simple fullwidth\\\"><div class=\\\"header md-accent-bg\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between\\\"><div layout=\\\"column\\\" layout-align=\\\"center start\\\"><div class=\\\"h1\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><md-icon class=\\\"light\\\" md-font-icon=\\\"icono-medir2-HaibuSmart\\\"></md-icon><span>Reglas</span>\\n</div></div><div layout=\\\"row\\\" layout-align=\\\"start center\\\"><md-button \\nclass=\\\"md-raised md-secondary smart-button-outline\\\" ng-click=\\\"vm.goCreate()\\\"><span>Agregar Regla</span></md-button>\\n</div></div><div class=\\\"content\\\" scroll><md-card><md-table-container><table md-table \\nmd-row-select=\\\"vm.options.rowSelection\\\" multiple=\\\"{{vm.options.multiSelect}}\\\" md-progress=\\\"vm.promise\\\" \\nng-model=\\\"vm.selected\\\"><thead md-head md-order=\\\"vm.query.order\\\"><tr md-row><th md-column>Nombre</th><th md-column>\\nDescripción</th><th md-column>Regla</th></tr></thead><tbody md-body><tr md-row md-select=\\\"item\\\" \\nmd-on-select=\\\"vm.logItem\\\" md-auto-select=\\\"vm.options.autoSelect\\\" \\nng-repeat=\\\"rule in  vm.rules | filter: vm.query.filter | orderBy: vm.query.order | limitTo: vm.query.limit : (vm.query.page -1) * vm.query.limit\\\" \\nng-click=\\\"vm.editRule($event, rule)\\\"><td md-cell>{{rule.name}}</td><td md-cell>{{rule.description}}</td><td md-cell>\\n{{rule.condition}}</td></tr></tbody></table></md-table-container><md-table-pagination \\nmd-label=\\\"{page: \\'Página:\\', rowsPerPage: \\'Filas por página:\\', of: \\'de\\'}\\\" md-limit=\\\"vm.query.limit\\\" \\nmd-limit-options=\\\"[5, 10, 15]\\\" md-page=\\\"vm.query.page\\\" md-total=\\\"{{vm.rules.length}}\\\" md-page-select \\nmd-on-paginate=\\\"vm.getEvents\\\"></md-table-pagination></md-card></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-1/template-1.html\",\"<div class=\\\"template-1\\\"><div class=\\\"media\\\"><img class=\\\"image\\\" ng-src=\\\"{{card.media.image.src}}\\\" \\nalt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div><div class=\\\"content pv-24 ph-16\\\"><div class=\\\"title h1\\\" \\nng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"subtitle secondary-text\\\" ng-if=\\\"card.subtitle\\\">{{card.subtitle}}\\n</div><div class=\\\"text pt-16\\\" ng-if=\\\"card.text\\\">{{card.text}}</div></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-10/template-10.html\",\"<div class=\\\"template-10 p-16\\\"><div class=\\\"pb-16\\\" layout=\\\"row\\\" layout-align=\\\"space-between center\\\"><div class=\\\"info\\\">\\n<div class=\\\"title secondary-text\\\" ng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"subtitle h2\\\" \\nng-if=\\\"card.subtitle\\\">{{card.subtitle}}</div></div><div class=\\\"media ml-16\\\"><img class=\\\"image\\\" \\nng-src=\\\"{{card.media.image.src}}\\\" alt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div></div><div \\nclass=\\\"text\\\">{{card.text}}</div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-2/template-2.html\",\"<div class=\\\"template-2\\\"><div class=\\\"header p-16\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\"><div ng-if=\\\"card.avatar\\\"><img\\n class=\\\"avatar mr-16\\\" ng-src=\\\"{{card.avatar.src}}\\\" alt=\\\"{{card.avatar.alt}}\\\"></div><div class=\\\"info\\\"><div \\nclass=\\\"title\\\" ng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"subtitle secondary-text\\\" ng-if=\\\"card.subtitle\\\">\\n{{card.subtitle}}</div></div></div><div class=\\\"media\\\"><img class=\\\"image\\\" ng-src=\\\"{{card.media.image.src}}\\\" \\nalt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div><div class=\\\"text p-16\\\" ng-if=\\\"card.text\\\">{{card.text}}\\n</div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-3/template-3.html\",\"<div class=\\\"template-3 p-16 teal-bg white-fg\\\" layout=\\\"row\\\" layout-align=\\\"space-between\\\"><div layout=\\\"column\\\" \\nlayout-align=\\\"space-between\\\"><div class=\\\"info\\\"><div class=\\\"title h1\\\" ng-if=\\\"card.title\\\">{{card.title}}</div><div \\nclass=\\\"subtitle h3 secondary-text\\\" ng-if=\\\"card.subtitle\\\">{{card.subtitle}}</div></div><div class=\\\"cta\\\"><md-button \\nclass=\\\"m-0\\\">{{card.cta}}</md-button></div></div><div class=\\\"media pl-16\\\"><img class=\\\"image\\\" \\nng-src=\\\"{{card.media.image.src}}\\\" alt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-4/template-4.html\",\"<div class=\\\"template-4\\\"><div class=\\\"info white-fg ph-16 pv-24\\\"><div class=\\\"title h1\\\" ng-if=\\\"card.title\\\">{{card.title}}\\n</div><div class=\\\"text\\\" ng-if=\\\"card.text\\\">{{card.text}}</div></div><div class=\\\"media\\\"><img class=\\\"image\\\" \\nng-src=\\\"{{card.media.image.src}}\\\" alt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-5/template-5.html\",\"<div class=\\\"template-5 p-16\\\" layout=\\\"row\\\" layout-align=\\\"space-between start\\\"><div class=\\\"info\\\"><div \\nclass=\\\"title secondary-text\\\" ng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"event h2\\\" ng-if=\\\"card.event\\\">\\n{{card.event}}</div></div><div class=\\\"media ml-16\\\"><img class=\\\"image\\\" ng-src=\\\"{{card.media.image.src}}\\\" \\nalt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-6/template-6.html\",\"<div class=\\\"template-6\\\"><div class=\\\"content pv-24 ph-16\\\"><div class=\\\"subtitle secondary-text\\\" ng-if=\\\"card.subtitle\\\">\\n{{card.subtitle}}</div><div class=\\\"title h2\\\" ng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"text pt-8\\\" \\nng-if=\\\"card.text\\\">{{card.text}}</div></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-7/template-7.html\",\"<div class=\\\"template-7\\\" layout=\\\"row\\\" layout-align=\\\"space-between\\\"><div class=\\\"info\\\" layout=\\\"column\\\" \\nlayout-align=\\\"space-between\\\" layout-fill flex><div class=\\\"p-16\\\"><div class=\\\"title h1\\\" ng-if=\\\"card.title\\\">{{card.title}}\\n</div><div class=\\\"subtitle h4 secondary-text\\\" ng-if=\\\"card.subtitle\\\">{{card.subtitle}}</div><div class=\\\"text h4 pt-8\\\" \\nng-if=\\\"card.text\\\">{{card.text}}</div></div><div><md-divider></md-divider><div class=\\\"p-8\\\" layout=\\\"row\\\"><md-icon \\nmd-font-icon=\\\"icon-star-outline\\\" class=\\\"mh-5\\\"></md-icon><md-icon md-font-icon=\\\"icon-star-outline\\\" class=\\\"mh-5\\\">\\n</md-icon><md-icon md-font-icon=\\\"icon-star-outline\\\" class=\\\"mh-5\\\"></md-icon><md-icon md-font-icon=\\\"icon-star-outline\\\" \\nclass=\\\"mh-5\\\"></md-icon><md-icon md-font-icon=\\\"icon-star-outline\\\" class=\\\"mh-5\\\"></md-icon></div></div></div><div \\nclass=\\\"media\\\"><img class=\\\"image\\\" ng-src=\\\"{{card.media.image.src}}\\\" alt=\\\"{{card.media.image.alt}}\\\" \\nng-show=\\\"card.media.image\\\"></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-8/template-8.html\",\"<div class=\\\"template-8\\\"><div class=\\\"media\\\"><img class=\\\"image\\\" ng-src=\\\"{{card.media.image.src}}\\\" \\nalt=\\\"{{card.media.image.alt}}\\\" ng-show=\\\"card.media.image\\\"></div><div class=\\\"content pv-24 ph-16\\\"><div class=\\\"title h1\\\" \\nng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"subtitle secondary-text\\\" ng-if=\\\"card.subtitle\\\">{{card.subtitle}}\\n</div><div class=\\\"buttons pt-16\\\"><md-button class=\\\"m-0\\\">{{card.button1}}</md-button><md-button class=\\\"m-0 md-accent\\\">\\n{{card.button2}}</md-button></div><div class=\\\"text pt-16\\\" ng-if=\\\"card.text\\\">{{card.text}}</div></div></div>\");\n$templateCache.put(\"app/core/directives/ms-card/templates/template-9/template-9.html\",\"<div class=\\\"template-9\\\"><div class=\\\"header p-16\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\"><div ng-if=\\\"card.avatar\\\"><img\\n class=\\\"avatar mr-16\\\" ng-src=\\\"{{card.avatar.src}}\\\" alt=\\\"{{card.avatar.alt}}\\\"></div><div class=\\\"info\\\"><div \\nclass=\\\"title\\\" ng-if=\\\"card.title\\\">{{card.title}}</div><div class=\\\"subtitle secondary-text\\\" ng-if=\\\"card.subtitle\\\">\\n{{card.subtitle}}</div></div></div><div class=\\\"text ph-16 pb-16\\\" ng-if=\\\"card.text\\\">{{card.text}}</div><div \\nclass=\\\"media\\\"><img class=\\\"image\\\" ng-src=\\\"{{card.media.image.src}}\\\" alt=\\\"{{card.media.image.alt}}\\\" \\nng-show=\\\"card.media.image\\\"></div><div class=\\\"buttons m-8\\\"><md-button class=\\\"md-icon-button mr-16\\\" \\naria-label=\\\"Favorite\\\"><md-icon md-font-icon=\\\"icon-heart-outline\\\" class=\\\"s24\\\"></md-icon></md-button><md-button \\nclass=\\\"md-icon-button\\\" aria-label=\\\"Share\\\"><md-icon md-font-icon=\\\"icon-share\\\" class=\\\"s24\\\"></md-icon></md-button></div>\\n</div>\");\n$templateCache.put(\"app/core/directives/ms-stepper/templates/horizontal/horizontal.html\",\"<div class=\\\"ms-stepper-horizontal\\\"><div class=\\\"ms-stepper-navigation-wrapper\\\"><div class=\\\"ms-stepper-navigation\\\" \\nlayout=\\\"row\\\" layout-align=\\\"center center\\\"><md-button class=\\\"ms-stepper-navigation-item\\\" \\nng-class=\\\"{\\'current\\': MsStepper.isStepCurrent(step.stepNumber), \\'valid\\': MsStepper.isStepValid(step.stepNumber), \\'disabled\\': MsStepper.isStepDisabled(step.stepNumber), \\'optional\\': MsStepper.isStepOptional(step.stepNumber)}\\\" \\nng-click=\\\"MsStepper.gotoStep(step.stepNumber)\\\" ng-disabled=\\\"MsStepper.isStepDisabled(step.stepNumber)\\\" \\nng-repeat=\\\"step in MsStepper.steps | filter:MsStepper.filterHiddenStep\\\" layout=\\\"row\\\" layout-align=\\\"start center\\\"><div \\nclass=\\\"step md-accent-bg\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\"><span \\nng-if=\\\"!MsStepper.isStepValid(step.stepNumber) || MsStepper.isStepOptional(step.stepNumber)\\\">{{$index + 1}} </span>\\n<span ng-if=\\\"MsStepper.isStepValid(step.stepNumber) && !MsStepper.isStepOptional(step.stepNumber)\\\"><i \\nclass=\\\"icon icon-check s18\\\"></i></span></div><div layout=\\\"column\\\" layout-align=\\\"start start\\\"><div class=\\\"title\\\" \\ntranslate=\\\"{{step.stepTitleTranslate}}\\\">{{step.stepTitle}}</div><div class=\\\"subtitle\\\" \\nng-if=\\\"MsStepper.isStepOptional(step.stepNumber)\\\">Optional</div></div></md-button></div></div><div \\nclass=\\\"ms-stepper-steps\\\" ng-transclude></div><div class=\\\"ms-stepper-controls\\\" layout=\\\"row\\\" \\nlayout-align=\\\"center center\\\"><md-button class=\\\"md-accent md-raised\\\" ng-disabled=\\\"MsStepper.isFirstStep()\\\" \\nng-click=\\\"MsStepper.gotoPreviousStep()\\\">Back</md-button><div class=\\\"ms-stepper-dots\\\"><span \\nng-repeat=\\\"step in MsStepper.steps\\\" ng-hide=\\\"MsStepper.isStepHidden(step.stepNumber)\\\" \\nng-class=\\\"{\\'selected md-accent-bg\\':MsStepper.currentStepNumber === $index + 1}\\\"></span></div><md-button \\nclass=\\\"md-accent md-raised\\\" ng-if=\\\"!MsStepper.isLastStep()\\\" \\nng-disabled=\\\"!MsStepper.isStepValid(MsStepper.currentStepNumber)\\\" ng-click=\\\"MsStepper.gotoNextStep()\\\">Next</md-button>\\n<md-button type=\\\"submit\\\" class=\\\"md-accent md-raised\\\" ng-click=\\\"MsStepper.resetForm()\\\" ng-if=\\\"MsStepper.isLastStep()\\\" \\nng-disabled=\\\"!MsStepper.isFormValid()\\\">Submit</md-button></div></div>\");\n$templateCache.put(\"app/core/directives/ms-stepper/templates/vertical/vertical.html\",\"<div class=\\\"ms-stepper-vertical\\\"><div class=\\\"ms-stepper-vertical-line\\\"></div><div class=\\\"ms-stepper-steps\\\" \\nng-transclude></div></div>\");\n$templateCache.put(\"app/main/pages/rules/rules-create/dialogs/conditionItem.html\",\"<md-dialog class=\\\"condition-dialog\\\" aria-label=\\\"Nuevo Item\\\"><form name=\\\"conditionForm\\\" class=\\\"md-inline-form\\\" \\nnovalidate><md-toolbar class=\\\"md-accent\\\" layout=\\\"column\\\"><div class=\\\"md-toolbar-tools\\\" layout=\\\"row\\\" \\nlayout-align=\\\"space-between center\\\"><span class=\\\"title\\\">{{vm.title}}</span><md-button class=\\\"md-icon-button\\\" \\nng-click=\\\"vm.closeDialog()\\\" aria-label=\\\"Cerrar dialog\\\"><md-icon md-font-icon=\\\"icon-close\\\"></md-icon></md-button></div>\\n</md-toolbar><md-dialog-content ms-scroll><md-input-container class=\\\"md-block\\\"><label>Propiedad</label><md-select \\nname=\\\"property\\\" ng-model=\\\"vm.condition.property\\\" type=\\\"text\\\" required><md-option \\nng-repeat=\\\"data in  vm.device.event.data\\\" value=\\\"{{data.id}}\\\">{{data.id}}</md-option></md-select></md-input-container>\\n<md-input-container class=\\\"md-block\\\"><label>Operación</label><md-select name=\\\"operation\\\" \\nng-model=\\\"vm.condition.operation\\\" type=\\\"text\\\" required><md-option ng-repeat=\\\"operation in  vm.operations\\\" \\nvalue=\\\"{{operation}}\\\">{{operation}}</md-option></md-select></md-input-container><md-input-container class=\\\"md-block\\\">\\n<label>Comprar con</label><md-select name=\\\"comparison\\\" ng-model=\\\"vm.condition.comparison\\\" type=\\\"text\\\" required>\\n<md-option ng-repeat=\\\"comparison in  vm.comparisons\\\" value=\\\"{{comparison.id}}\\\">{{comparison.text}}</md-option>\\n</md-select></md-input-container><md-input-container class=\\\"md-block\\\" ng-if=\\\"vm.condition.comparison == \\'property\\'\\\">\\n<label>Propiedad</label><md-select name=\\\"propertyComparison\\\" ng-model=\\\"vm.condition.propertyComparison\\\" type=\\\"text\\\" \\nrequired><md-option ng-repeat=\\\"data in  vm.device.event.data\\\" value=\\\"{{data.id}}\\\">{{data.id}}</md-option></md-select>\\n</md-input-container><md-input-container class=\\\"md-block\\\" ng-if=\\\"vm.condition.comparison == \\'static\\'\\\"><label>Valor\\n</label><input name=\\\"value\\\" ng-model=\\\"vm.condition.value\\\" type=\\\"text\\\" required><div \\nng-messages=\\\"conditionForm.value.$error\\\" role=\\\"alert\\\"><div ng-message=\\\"required\\\"><span>El valor es requerido.</span>\\n</div></div></md-input-container></md-dialog-content><md-dialog-actions layout=\\\"row\\\" \\nlayout-align=\\\"space-between center\\\"><div layout=\\\"row\\\" layout-align=\\\"start center\\\"><md-button type=\\\"submit\\\" \\nng-if=\\\"!vm.newCondition\\\" ng-click=\\\"vm.saveCondition()\\\" class=\\\"send-button md-accent md-raised\\\" \\nng-disabled=\\\"conditionForm.$invalid || conditionForm.$pristine\\\">GUARDAR</md-button><md-button type=\\\"submit\\\" \\nng-if=\\\"vm.newCondition\\\" ng-click=\\\"vm.addNewCondition()\\\" class=\\\"send-button md-accent md-raised\\\" \\nng-disabled=\\\"conditionForm.$invalid || conditionForm.$pristine\\\">Agregar Condición</md-button></div><div layout=\\\"row\\\">\\n<md-button class=\\\"md-icon-button\\\" ng-click=\\\"vm.deleteConfirm($event)\\\"><md-icon md-font-icon=\\\"icon-delete\\\"></md-icon>\\n<md-tooltip>BORRAR</md-tooltip></md-button></div></md-dialog-actions></form></md-dialog>\");\n$templateCache.put(\"app/core/directives/ms-stepper/templates/vertical/step/vertical-step.html\",\"<md-button class=\\\"ms-stepper-navigation-item\\\" \\nng-class=\\\"{\\'current\\': MsStepper.isStepCurrent(stepInfo.stepNumber), \\'valid\\': MsStepper.isStepValid(stepInfo.stepNumber), \\'disabled\\': MsStepper.isStepDisabled(stepInfo.stepNumber), \\'optional\\': MsStepper.isStepOptional(stepInfo.stepNumber)}\\\" \\nng-click=\\\"MsStepper.gotoStep(stepInfo.stepNumber)\\\" ng-disabled=\\\"MsStepper.isStepDisabled(stepInfo.stepNumber)\\\" \\nng-hide=\\\"MsStepper.isStepHidden(stepInfo.stepNumber)\\\" aria-label=\\\"Stepper navigation button\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\"><div class=\\\"step\\\" layout=\\\"row\\\" layout-align=\\\"center center\\\"><span \\nng-if=\\\"!MsStepper.isStepValid(stepInfo.stepNumber) || MsStepper.isStepOptional(stepInfo.stepNumber)\\\"><i \\nclass=\\\"icon icon-checkbox-blank-circle-outline s18 md-accent-fg\\\"></i> </span><span \\nng-if=\\\"MsStepper.isStepValid(stepInfo.stepNumber) && !MsStepper.isStepOptional(stepInfo.stepNumber)\\\"><i \\nclass=\\\"icon icon-check-circle s18 md-accent-fg\\\"></i></span></div><div layout=\\\"column\\\" layout-align=\\\"start start\\\"><div \\nclass=\\\"title\\\" ng-if=\\\"stepInfo.stepTitleTranslate\\\">{{stepInfo.stepTitleTranslate | translate }}</div><div class=\\\"title\\\" \\nng-if=\\\"!stepInfo.stepTitleTranslate\\\">{{stepInfo.stepTitle}}</div><div class=\\\"subtitle\\\" \\nng-if=\\\"MsStepper.isStepOptional(stepInfo.stepNumber)\\\">Optional</div></div></md-button><div \\nclass=\\\"ms-stepper-step-content\\\" ng-transclude></div><div class=\\\"ms-stepper-controls\\\" layout=\\\"row\\\" \\nlayout-align=\\\"start center\\\" ng-show=\\\"MsStepper.isStepCurrent(stepInfo.stepNumber)\\\"><md-button \\nclass=\\\"md-accent md-raised\\\" ng-disabled=\\\"MsStepper.isFirstStep()\\\" ng-click=\\\"MsStepper.gotoPreviousStep()\\\">Back\\n</md-button><md-button class=\\\"md-accent md-raised\\\" ng-if=\\\"!MsStepper.isLastStep()\\\" \\nng-disabled=\\\"!MsStepper.isStepValid(MsStepper.currentStepNumber)\\\" ng-click=\\\"MsStepper.gotoNextStep()\\\">Next</md-button>\\n<md-button type=\\\"submit\\\" class=\\\"md-accent md-raised\\\" ng-click=\\\"MsStepper.resetForm()\\\" ng-if=\\\"MsStepper.isLastStep()\\\" \\nng-disabled=\\\"!MsStepper.isFormValid()\\\">Submit</md-button></div>\");}]);"],"sourceRoot":"/source/"}